"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2794],{7928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=t(4848),a=t(8453);t(4235),t(8328),t(3078);const s={id:"events",title:"Events"},r=void 0,o={id:"events",title:"Events",description:"Introduction",source:"@site/docs/events.mdx",sourceDirName:".",slug:"/events",permalink:"/java/docs/next/events",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"events",title:"Events"},sidebar:"docs",previous:{title:"Evaluating JavaScript",permalink:"/java/docs/next/evaluating"},next:{title:"Extensibility",permalink:"/java/docs/next/extensibility"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Waiting for event",id:"waiting-for-event",level:2},{value:"Adding/removing event listener",id:"addingremoving-event-listener",level:2},{value:"Adding one-off listeners",id:"adding-one-off-listeners",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events, such as waiting for events or adding or removing event listeners."}),"\n",(0,i.jsx)(n.h2,{id:"waiting-for-event",children:"Waiting for event"}),"\n",(0,i.jsx)(n.p,{children:"Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns."}),"\n",(0,i.jsxs)(n.p,{children:["Wait for a request with the specified url using ",(0,i.jsx)(n.a,{href:"/java/docs/next/api/class-page#page-wait-for-request",children:"Page.waitForRequest()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// The callback lambda defines scope of the code that is expected to\n// trigger request.\nRequest request = page.waitForRequest("**/*logo*.png", () -> {\n  page.navigate("https://wikipedia.org");\n});\nSystem.out.println(request.url());\n'})}),"\n",(0,i.jsx)(n.p,{children:"Wait for popup window:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// The callback lambda defines scope of the code that is expected to\n// create popup window.\nPage popup = page.waitForPopup(() -> {\n  page.getByText("open the popup").click();\n});\npopup.navigate("https://wikipedia.org");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"addingremoving-event-listener",children:"Adding/removing event listener"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'page.onRequest(request -> System.out.println("Request sent: " + request.url()));\nConsumer<Request> listener = request -> System.out.println("Request finished: " + request.url());\npage.onRequestFinished(listener);\npage.navigate("https://wikipedia.org");\n\n// Remove previously added listener, each on* method has corresponding off*\npage.offRequestFinished(listener);\npage.navigate("https://www.openstreetmap.org/");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"adding-one-off-listeners",children:"Adding one-off listeners"}),"\n",(0,i.jsx)(n.p,{children:"If a certain event needs to be handled once, there is a convenience API for that:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'page.onceDialog(dialog -> dialog.accept("2021"));\npage.evaluate("prompt(\'Enter a number:\')");\n'})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);