"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9719],{3876:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=s(4848),t=s(8453);s(4235),s(8328),s(3078);const a={id:"accessibility-testing",title:"Accessibility testing"},l=void 0,o={id:"accessibility-testing",title:"Accessibility testing",description:"Introduction",source:"@site/docs/accessibility-testing.mdx",sourceDirName:".",slug:"/accessibility-testing",permalink:"/java/docs/next/accessibility-testing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"accessibility-testing",title:"Accessibility testing"},sidebar:"docs",previous:{title:"Actions",permalink:"/java/docs/next/input"},next:{title:"Auto-waiting",permalink:"/java/docs/next/actionability"}},r={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Disclaimer",id:"disclaimer",level:2},{value:"Example accessibility tests",id:"example-accessibility-tests",level:2},{value:"Example 1: Scanning an entire page",id:"example-1-scanning-an-entire-page",level:3},{value:"Example 2: Configuring axe to scan a specific part of a page",id:"example-2-configuring-axe-to-scan-a-specific-part-of-a-page",level:3},{value:"Example 3: Scanning for WCAG violations",id:"example-3-scanning-for-wcag-violations",level:3},{value:"Handling known issues",id:"handling-known-issues",level:2},{value:"Excluding individual elements from a scan",id:"excluding-individual-elements-from-a-scan",level:3},{value:"Disabling individual scan rules",id:"disabling-individual-scan-rules",level:3},{value:"Using violation fingerprints to specific known issues",id:"using-violation-fingerprints-to-specific-known-issues",level:3},{value:"Using a test fixture for common axe configuration",id:"using-a-test-fixture-for-common-axe-configuration",level:2},{value:"Creating a fixture",id:"creating-a-fixture",level:3},{value:"Using a fixture",id:"using-a-fixture",level:3}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(i.p,{children:"Playwright can be used to test your application for many types of accessibility issues."}),"\n",(0,n.jsx)(i.p,{children:"A few examples of problems this can catch include:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Text that would be hard to read for users with vision impairments due to poor color contrast with the background behind it"}),"\n",(0,n.jsx)(i.li,{children:"UI controls and form elements without labels that a screen reader could identify"}),"\n",(0,n.jsx)(i.li,{children:"Interactive elements with duplicate IDs which can confuse assistive technologies"}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["The following examples rely on the ",(0,n.jsx)(i.a,{href:"https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright",children:(0,n.jsx)(i.code,{children:"com.deque.html.axe-core/playwright"})})," Maven package which adds support for running the ",(0,n.jsx)(i.a,{href:"https://www.deque.com/axe/",children:"axe accessibility testing engine"})," as part of your Playwright tests."]}),"\n",(0,n.jsx)(i.h2,{id:"disclaimer",children:"Disclaimer"}),"\n",(0,n.jsx)(i.p,{children:"Automated accessibility tests can detect some common accessibility problems such as missing or invalid properties. But many accessibility problems can only be discovered through manual testing. We recommend using a combination of automated testing, manual accessibility assessments, and inclusive user testing."}),"\n",(0,n.jsxs)(i.p,{children:["For manual assessments, we recommend ",(0,n.jsx)(i.a,{href:"https://accessibilityinsights.io/docs/web/overview/?referrer=playwright-accessibility-testing-java",children:"Accessibility Insights for Web"}),", a free and open source dev tool that walks you through assessing a website for ",(0,n.jsx)(i.a,{href:"https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&levels=aaa",children:"WCAG 2.1 AA"})," coverage."]}),"\n",(0,n.jsx)(i.h2,{id:"example-accessibility-tests",children:"Example accessibility tests"}),"\n",(0,n.jsx)(i.p,{children:"Accessibility tests work just like any other Playwright test. You can either create separate test cases for them, or integrate accessibility scans and assertions into your existing test cases."}),"\n",(0,n.jsx)(i.p,{children:"The following examples demonstrate a few basic accessibility testing scenarios."}),"\n",(0,n.jsx)(i.h3,{id:"example-1-scanning-an-entire-page",children:"Example 1: Scanning an entire page"}),"\n",(0,n.jsx)(i.p,{children:"This example demonstrates how to test an entire page for automatically detectable accessibility violations. The test:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["Imports the ",(0,n.jsx)(i.a,{href:"https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright",children:(0,n.jsx)(i.code,{children:"com.deque.html.axe-core/playwright"})})," package"]}),"\n",(0,n.jsxs)(i.li,{children:["Uses normal JUnit 5 ",(0,n.jsx)(i.code,{children:"@Test"})," syntax to define a test case"]}),"\n",(0,n.jsx)(i.li,{children:"Uses normal Playwright syntax to open a browser and navigate to the page under test"}),"\n",(0,n.jsxs)(i.li,{children:["Invokes ",(0,n.jsx)(i.code,{children:"AxeBuilder.analyze()"})," to run the accessibility scan against the page"]}),"\n",(0,n.jsx)(i.li,{children:"Uses normal JUnit 5 test assertions to verify that there are no violations in the returned scan results"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'import com.deque.html.axecore.playwright.*; // 1\nimport com.deque.html.axecore.utilities.axeresults.*;\n\nimport org.junit.jupiter.api.*;\nimport com.microsoft.playwright.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HomepageTests {\n  @Test // 2\n  void shouldNotHaveAutomaticallyDetectableAccessibilityIssues() throws Exception {\n    Playwright playwright = Playwright.create();\n    Browser browser = playwright.chromium().launch();\n    BrowserContext context = browser.newContext();\n    Page page = context.newPage();\n\n    page.navigate("https://your-site.com/"); // 3\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze(); // 4\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations()); // 5\n  }\n}\n'})}),"\n",(0,n.jsx)(i.h3,{id:"example-2-configuring-axe-to-scan-a-specific-part-of-a-page",children:"Example 2: Configuring axe to scan a specific part of a page"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"com.deque.html.axe-core/playwright"})," supports many configuration options for axe. You can specify these options by using a Builder pattern with the ",(0,n.jsx)(i.code,{children:"AxeBuilder"})," class."]}),"\n",(0,n.jsxs)(i.p,{children:["For example, you can use ",(0,n.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderincludeliststring-selector",children:(0,n.jsx)(i.code,{children:"AxeBuilder.include()"})})," to constrain an accessibility scan to only run against one specific part of a page."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"AxeBuilder.analyze()"})," will scan the page ",(0,n.jsx)(i.em,{children:"in its current state"})," when you call it. To scan parts of a page that are revealed based on UI interactions, use ",(0,n.jsx)(i.a,{href:"/java/docs/next/locators",children:"Locators"})," to interact with the page before invoking ",(0,n.jsx)(i.code,{children:"analyze()"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'@Test\nvoid navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {\n  page.navigate("https://your-site.com/");\n\n  page.locator("button[aria-label=\\"Navigation Menu\\"]").click();\n\n  // It is important to waitFor() the page to be in the desired\n  // state *before* running analyze(). Otherwise, axe might not\n  // find all the elements your test expects it to scan.\n  page.locator("#navigation-menu-flyout").waitFor();\n\n  AxeResults accessibilityScanResults = new AxeBuilder(page)\n    .include(Arrays.asList("#navigation-menu-flyout"))\n    .analyze();\n\n  assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n}\n'})}),"\n",(0,n.jsx)(i.h3,{id:"example-3-scanning-for-wcag-violations",children:"Example 3: Scanning for WCAG violations"}),"\n",(0,n.jsxs)(i.p,{children:["By default, axe checks against a wide variety of accessibility rules. Some of these rules correspond to specific success criteria from the ",(0,n.jsx)(i.a,{href:"https://www.w3.org/TR/WCAG21/",children:"Web Content Accessibility Guidelines (WCAG)"}),', and others are "best practice" rules that are not specifically required by any WCAG criterion.']}),"\n",(0,n.jsxs)(i.p,{children:['You can constrain an accessibility scan to only run those rules which are "tagged" as corresponding to specific WCAG success criteria by using ',(0,n.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderwithtagsliststring-rules",children:(0,n.jsx)(i.code,{children:"AxeBuilder.withTags()"})}),". For example, ",(0,n.jsx)(i.a,{href:"https://accessibilityinsights.io/docs/web/getstarted/fastpass/?referrer=playwright-accessibility-testing-java",children:"Accessibility Insights for Web's Automated Checks"})," only include axe rules that test for violations of WCAG A and AA success criteria; to match that behavior, you would use the tags ",(0,n.jsx)(i.code,{children:"wcag2a"}),", ",(0,n.jsx)(i.code,{children:"wcag2aa"}),", ",(0,n.jsx)(i.code,{children:"wcag21a"}),", and ",(0,n.jsx)(i.code,{children:"wcag21aa"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["Note that ",(0,n.jsx)(i.a,{href:"#disclaimer",children:"automated testing cannot detect all types of WCAG violations"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .withTags(Arrays.asList("wcag2a", "wcag2aa", "wcag21a", "wcag21aa"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n'})}),"\n",(0,n.jsxs)(i.p,{children:["You can find a complete listing of the rule tags axe-core supports in ",(0,n.jsx)(i.a,{href:"https://www.deque.com/axe/core-documentation/api-documentation/#axe-core-tags",children:'the "Axe-core Tags" section of the axe API documentation'}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"handling-known-issues",children:"Handling known issues"}),"\n",(0,n.jsx)(i.p,{children:'A common question when adding accessibility tests to an application is "how do I suppress known violations?" The following examples demonstrate a few techniques you can use.'}),"\n",(0,n.jsx)(i.h3,{id:"excluding-individual-elements-from-a-scan",children:"Excluding individual elements from a scan"}),"\n",(0,n.jsxs)(i.p,{children:["If your application contains a few specific elements with known issues, you can use ",(0,n.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderexcludeliststring-selector",children:(0,n.jsx)(i.code,{children:"AxeBuilder.exclude()"})})," to exclude them from being scanned until you're able to fix the issues."]}),"\n",(0,n.jsx)(i.p,{children:"This is usually the simplest option, but it has some important downsides:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"exclude()"})," will exclude the specified elements ",(0,n.jsx)(i.em,{children:"and all of their descendants"}),". Avoid using it with components that contain many children."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"exclude()"})," will prevent ",(0,n.jsx)(i.em,{children:"all"})," rules from running against the specified elements, not just the rules corresponding to known issues."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Here is an example of excluding one element from being scanned in one specific test:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .exclude(Arrays.asList("#element-with-known-issue"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n'})}),"\n",(0,n.jsxs)(i.p,{children:["If the element in question is used repeatedly in many pages, consider ",(0,n.jsx)(i.a,{href:"#using-a-test-fixture-for-common-axe-configuration",children:"using a test fixture"})," to reuse the same ",(0,n.jsx)(i.code,{children:"AxeBuilder"})," configuration across multiple tests."]}),"\n",(0,n.jsx)(i.h3,{id:"disabling-individual-scan-rules",children:"Disabling individual scan rules"}),"\n",(0,n.jsxs)(i.p,{children:["If your application contains many different preexisting violations of a specific rule, you can use ",(0,n.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderdisablerulesliststring-rules",children:(0,n.jsx)(i.code,{children:"AxeBuilder.disableRules()"})})," to temporarily disable individual rules until you're able to fix the issues."]}),"\n",(0,n.jsxs)(i.p,{children:["You can find the rule IDs to pass to ",(0,n.jsx)(i.code,{children:"disableRules()"})," in the ",(0,n.jsx)(i.code,{children:"id"})," property of the violations you want to suppress. A ",(0,n.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core/blob/master/doc/rule-descriptions.md",children:"complete list of axe's rules"})," can be found in ",(0,n.jsx)(i.code,{children:"axe-core"}),"'s documentation."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .disableRules(Arrays.asList("duplicate-id"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n'})}),"\n",(0,n.jsx)(i.h3,{id:"using-violation-fingerprints-to-specific-known-issues",children:"Using violation fingerprints to specific known issues"}),"\n",(0,n.jsx)(i.p,{children:"If you would like to allow for a more granular set of known issues, you can use the following pattern:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"Perform an accessibility scan which is expected to find some known violations"}),"\n",(0,n.jsx)(i.li,{children:'Convert the violations into "violation fingerprint" objects'}),"\n",(0,n.jsx)(i.li,{children:"Assert that the set of fingerprints is equivalent to the expected ones"}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["This approach avoids the downsides of using ",(0,n.jsx)(i.code,{children:"AxeBuilder.exclude()"})," at the cost of slightly more complexity and fragility."]}),"\n",(0,n.jsx)(i.p,{children:'Here is an example of using fingerprints based on only rule IDs and "target" selectors pointing to each violation:'}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'@Test\nshouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {\n  page.navigate("https://your-site.com/");\n\n  AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();\n\n  List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);\n\n  assertEquals(Arrays.asList(\n    new ViolationFingerprint("aria-roles", "[span[role=\\"invalid\\"]]"),\n    new ViolationFingerprint("color-contrast", "[li:nth-child(2) > span]"),\n    new ViolationFingerprint("label", "[input]")\n  ), violationFingerprints);\n}\n\n// You can make your "fingerprint" as specific as you like. This one considers a violation to be\n// "the same" if it corresponds the same Axe rule on the same element.\n//\n// Using a record type makes it easy to compare fingerprints with assertEquals\npublic record ViolationFingerprint(String ruleId, String target) { }\n\npublic List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {\n  return results.getViolations().stream()\n    // Each violation refers to one rule and multiple "nodes" which violate it\n    .flatMap(violation -> violation.getNodes().stream()\n      .map(node -> new ViolationFingerprint(\n        violation.getId(),\n        // Each node contains a "target", which is a CSS selector that uniquely identifies it\n        // If the page involves iframes or shadow DOMs, it may be a chain of CSS selectors\n        node.getTarget().toString()\n      )))\n    .collect(Collectors.toList());\n}\n'})}),"\n",(0,n.jsx)(i.h2,{id:"using-a-test-fixture-for-common-axe-configuration",children:"Using a test fixture for common axe configuration"}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsxs)(i.a,{href:"./test-runners#running-tests-in-parallel",children:[(0,n.jsx)(i.code,{children:"TestFixtures"})," class"]})," is a good way to share common ",(0,n.jsx)(i.code,{children:"AxeBuilder"})," configuration across many tests. Some scenarios where this might be useful include:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Using a common set of rules among all of your tests"}),"\n",(0,n.jsx)(i.li,{children:"Suppressing a known violation in a common element which appears in many different pages"}),"\n",(0,n.jsx)(i.li,{children:"Attaching standalone accessibility reports consistently for many scans"}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["The following example demonstrates extending the ",(0,n.jsx)(i.code,{children:"TestFixtures"})," class from the ",(0,n.jsx)(i.a,{href:"./test-runners#running-tests-in-parallel",children:"Test Runners example"})," with a new fixture that contains some common ",(0,n.jsx)(i.code,{children:"AxeBuilder"})," configuration."]}),"\n",(0,n.jsx)(i.h3,{id:"creating-a-fixture",children:"Creating a fixture"}),"\n",(0,n.jsxs)(i.p,{children:["This example fixture creates an ",(0,n.jsx)(i.code,{children:"AxeBuilder"})," object which is pre-configured with shared ",(0,n.jsx)(i.code,{children:"withTags()"})," and ",(0,n.jsx)(i.code,{children:"exclude()"})," configuration."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"class AxeTestFixtures extends TestFixtures {\n  AxeBuilder makeAxeBuilder() {\n    return new AxeBuilder(page)\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n      .exclude('#commonly-reused-element-with-known-issue');\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h3,{id:"using-a-fixture",children:"Using a fixture"}),"\n",(0,n.jsxs)(i.p,{children:["To use the fixture, replace the earlier examples' ",(0,n.jsx)(i.code,{children:"new AxeBuilder(page)"})," with the newly defined ",(0,n.jsx)(i.code,{children:"makeAxeBuilder"})," fixture:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"public class HomepageTests extends AxeTestFixtures {\n  @Test\n  void exampleUsingCustomFixture() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include('#specific-element-under-test')\n      .analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["See experimental ",(0,n.jsx)(i.a,{href:"/java/docs/next/junit",children:"JUnit integration"})," to automatically initialize Playwright objects and more."]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);