"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7707],{5347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var s=n(4848),i=n(8453);n(4235),n(8328),n(3078);const r={id:"api-testing",title:"API \u6e2c\u8a66"},a=void 0,o={id:"api-testing",title:"API \u6e2c\u8a66",description:"\u7c21\u4ecb",source:"@site/versioned_docs/version-stable/api-testing.mdx",sourceDirName:".",slug:"/api-testing",permalink:"/java/docs/api-testing",draft:!1,unlisted:!1,tags:[],version:"stable",frontMatter:{id:"api-testing",title:"API \u6e2c\u8a66"},sidebar:"docs",previous:{title:"\u81ea\u52d5\u7b49\u5f85",permalink:"/java/docs/actionability"},next:{title:"\u65b7\u8a00",permalink:"/java/docs/test-assertions"}},l={},p=[{value:"\u7c21\u4ecb",id:"\u7c21\u4ecb",level:2},{value:"\u64b0\u5beb API \u6e2c\u8a66",id:"\u64b0\u5beb-api-\u6e2c\u8a66",level:2},{value:"\u8a2d\u5b9a",id:"\u8a2d\u5b9a",level:3},{value:"\u64b0\u5beb\u6e2c\u8a66",id:"\u64b0\u5beb\u6e2c\u8a66",level:3},{value:"\u8a2d\u5b9a\u548c\u62c6\u5378",id:"\u8a2d\u5b9a\u548c\u62c6\u5378",level:3},{value:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",id:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",level:3},{value:"\u901a\u904e API \u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",id:"\u901a\u904e-api-\u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",level:2},{value:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",id:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",level:2},{value:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",id:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\u7c21\u4ecb",children:"\u7c21\u4ecb"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright \u53ef\u4ee5\u7528\u4f86\u5b58\u53d6\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u7684 ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Representational_state_transfer",children:"REST"})," API\u3002"]}),"\n",(0,s.jsx)(t.p,{children:"\u6709\u6642\u5019\u4f60\u53ef\u80fd\u60f3\u76f4\u63a5\u5f9e Java \u767c\u9001\u8acb\u6c42\u5230\u4f3a\u670d\u5668\uff0c\u800c\u4e0d\u9700\u8981\u8f09\u5165\u9801\u9762\u4e26\u5728\u5176\u4e2d\u57f7\u884c js \u7a0b\u5f0f\u78bc\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u80fd\u6d3e\u4e0a\u7528\u5834\u7684\u7bc4\u4f8b:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u6e2c\u8a66\u4f60\u7684\u4f3a\u670d\u5668 API\u3002"}),"\n",(0,s.jsx)(t.li,{children:"\u5728\u6e2c\u8a66\u4e2d\u8a2a\u554f web \u61c9\u7528\u7a0b\u5f0f\u4e4b\u524d\u6e96\u5099\u4f3a\u670d\u5668\u7aef\u72c0\u614b\u3002"}),"\n",(0,s.jsx)(t.li,{children:"\u5728\u700f\u89bd\u5668\u4e2d\u57f7\u884c\u4e00\u4e9b\u64cd\u4f5c\u5f8c\u9a57\u8b49\u4f3a\u670d\u5668\u7aef\u5f8c\u7f6e\u689d\u4ef6\u3002"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["\u6240\u6709\u9019\u4e9b\u90fd\u53ef\u4ee5\u901a\u904e ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u65b9\u6cd5\u5be6\u73fe\u3002"]}),"\n",(0,s.jsx)(t.h2,{id:"\u64b0\u5beb-api-\u6e2c\u8a66",children:"\u64b0\u5beb API \u6e2c\u8a66"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/java/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u53ef\u4ee5\u900f\u904e\u7db2\u8def\u767c\u9001\u5404\u7a2e HTTP(S) \u8acb\u6c42\u3002"]}),"\n",(0,s.jsxs)(t.p,{children:["\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Playwright \u6e2c\u8a66\u901a\u904e ",(0,s.jsx)(t.a,{href:"https://docs.github.com/en/rest",children:"GitHub API"})," \u5efa\u7acb\u554f\u984c\u3002\u6e2c\u8a66\u5957\u4ef6\u5c07\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u5132\u5b58\u5eab\u5f8c\u57f7\u884c\u6e2c\u8a66\u3002"}),"\n",(0,s.jsx)(t.li,{children:"\u5efa\u7acb\u4e00\u4e9b\u554f\u984c\u4e26\u9a57\u8b49\u4f3a\u670d\u5668\u72c0\u614b\u3002"}),"\n",(0,s.jsx)(t.li,{children:"\u57f7\u884c\u6e2c\u8a66\u5f8c\u522a\u9664\u5132\u5b58\u5eab\u3002"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"\u8a2d\u5b9a",children:"\u8a2d\u5b9a"}),"\n",(0,s.jsxs)(t.p,{children:["GitHub API \u9700\u8981\u6388\u6b0a\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u70ba\u6240\u6709\u6e2c\u8a66\u8a2d\u5b9a\u4e00\u6b21 token\u3002\u5728\u6b64\u540c\u6642\uff0c\u6211\u5011\u4e5f\u6703\u8a2d\u5b9a ",(0,s.jsx)(t.code,{children:"baseURL"})," \u4f86\u7c21\u5316\u6e2c\u8a66\u3002"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'package org.example;\n\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put("Accept", "application/vnd.github.v3+json");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put("Authorization", "token " + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL("https://api.github.com")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\u64b0\u5beb\u6e2c\u8a66",children:"\u64b0\u5beb\u6e2c\u8a66"}),"\n",(0,s.jsx)(t.p,{children:"\u73fe\u5728\u6211\u5011\u5df2\u7d93\u521d\u59cb\u5316\u4e86\u8acb\u6c42\u7269\u4ef6\uff0c\u6211\u5011\u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u6e2c\u8a66\uff0c\u9019\u4e9b\u6e2c\u8a66\u5c07\u5728\u5b58\u653e\u5eab\u4e2d\u5efa\u7acb\u65b0\u7684\u554f\u984c\u3002"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'package org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = "test-repo-2";\n  private static final String USER = System.getenv("GITHUB_USER");\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  // ...\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Bug] report 1");\n    data.put("body", "Bug description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Feature] request 1");\n    data.put("body", "Feature description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());\n  }\n}\n\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\u8a2d\u5b9a\u548c\u62c6\u5378",children:"\u8a2d\u5b9a\u548c\u62c6\u5378"}),"\n",(0,s.jsxs)(t.p,{children:["\u9019\u4e9b\u6e2c\u8a66\u5047\u8a2d\u5132\u5b58\u5eab\u5df2\u5b58\u5728\u3002\u4f60\u53ef\u80fd\u60f3\u5728\u57f7\u884c\u6e2c\u8a66\u4e4b\u524d\u5efa\u7acb\u4e00\u500b\u65b0\u7684\uff0c\u4e26\u5728\u4e4b\u5f8c\u522a\u9664\u5b83\u3002\u70ba\u6b64\u4f7f\u7528 ",(0,s.jsx)(t.code,{children:"@BeforeAll"})," \u548c ",(0,s.jsx)(t.code,{children:"@AfterAll"})," \u9264\u5b50\u3002"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'  // ...\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post("/user/repos",\n      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n  // ...\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",children:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b"}),"\n",(0,s.jsx)(t.p,{children:"\u4ee5\u4e0b\u662f\u4e00\u500b API \u6e2c\u8a66\u7684\u5b8c\u6574\u7bc4\u4f8b:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'package org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.*;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = "test-repo-2";\n  private static final String USER = System.getenv("GITHUB_USER");\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put("Accept", "application/vnd.github.v3+json");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put("Authorization", "token " + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL("https://api.github.com")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post("/user/repos",\n      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Bug] report 1");\n    data.put("body", "Bug description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Feature] request 1");\n    data.put("body", "Feature description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());\n  }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["\u8acb\u53c3\u95b1\u5be6\u9a57\u6027 ",(0,s.jsx)(t.a,{href:"/java/docs/junit",children:"JUnit integration"})," \u4ee5\u81ea\u52d5\u521d\u59cb\u5316 Playwright \u7269\u4ef6\u53ca\u66f4\u591a\u3002"]}),"\n",(0,s.jsx)(t.h2,{id:"\u901a\u904e-api-\u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",children:"\u901a\u904e API \u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b"}),"\n",(0,s.jsxs)(t.p,{children:["\u4ee5\u4e0b\u6e2c\u8a66\u901a\u904e API \u5efa\u7acb\u4e00\u500b\u65b0\u554f\u984c\uff0c\u7136\u5f8c\u5c0e\u822a\u5230\u5c08\u6848\u4e2d\u6240\u6709\u554f\u984c\u7684\u5217\u8868\uff0c\u4ee5\u6aa2\u67e5\u5b83\u662f\u5426\u51fa\u73fe\u5728\u5217\u8868\u7684\u9802\u90e8\u3002\u6aa2\u67e5\u662f\u4f7f\u7528 ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-locatorassertions",children:"LocatorAssertions"})," \u9032\u884c\u7684\u3002"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Test\nvoid lastCreatedIssueShouldBeFirstInTheList() {\n  Map<String, String> data = new HashMap<>();\n  data.put("title", "[Feature] request 1");\n  data.put("body", "Feature description");\n  APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n    RequestOptions.create().setData(data));\n  assertTrue(newIssue.ok());\n\n  page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");\n  Locator firstIssue = page.locator("a[data-hovercard-type=\'issue\']").first();\n  assertThat(firstIssue).hasText("[Feature] request 1");\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",children:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b"}),"\n",(0,s.jsx)(t.p,{children:"\u4ee5\u4e0b\u6e2c\u8a66\u901a\u904e\u700f\u89bd\u5668\u4e2d\u7684\u4f7f\u7528\u8005\u4ecb\u9762\u5efa\u7acb\u4e00\u500b\u65b0\u554f\u984c\uff0c\u7136\u5f8c\u901a\u904e API \u6aa2\u67e5\u662f\u5426\u5df2\u5efa\u7acb:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Test\nvoid lastCreatedIssueShouldBeOnTheServer() {\n  page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");\n  page.locator("text=New Issue").click();\n  page.locator("[aria-label=\'Title\']").fill("Bug report 1");\n  page.locator("[aria-label=\'Comment body\']").fill("Bug description");\n  page.locator("text=Submit new issue").click();\n  String issueId = page.url().substring(page.url().lastIndexOf(\'/\'));\n\n  APIResponse newIssue = request.get("https://github.com/" + USER + "/" + REPO + "/issues/" + issueId);\n  assertThat(newIssue).isOK();\n  assertTrue(newIssue.text().contains("Bug report 1"));\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",children:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b"}),"\n",(0,s.jsxs)(t.p,{children:["Web apps \u4f7f\u7528\u57fa\u65bc cookie \u6216\u57fa\u65bc token \u7684\u8eab\u4efd\u9a57\u8b49\uff0c\u5df2\u9a57\u8b49\u7684\u72c0\u614b\u5b58\u5132\u70ba ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",children:"cookies"}),"\u3002Playwright \u63d0\u4f9b ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-apirequestcontext#api-request-context-storage-state",children:"APIRequestContext.storageState()"})," \u65b9\u6cd5\uff0c\u53ef\u7528\u65bc\u5f9e\u5df2\u9a57\u8b49\u7684\u4e0a\u4e0b\u6587\u4e2d\u6aa2\u7d22\u5b58\u5132\u72c0\u614b\uff0c\u7136\u5f8c\u4f7f\u7528\u8a72\u72c0\u614b\u5efa\u7acb\u65b0\u7684\u4e0a\u4e0b\u6587\u3002"]}),"\n",(0,s.jsxs)(t.p,{children:["\u5132\u5b58\u72c0\u614b\u5728 ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," \u548c ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u4e4b\u9593\u662f\u53ef\u4e92\u63db\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u901a\u904e API \u547c\u53eb\u767b\u5165\uff0c\u7136\u5f8c\u5efa\u7acb\u4e00\u500b\u5df2\u7d93\u5305\u542b cookies \u7684\u65b0 context\u3002\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7247\u6bb5\u5f9e\u5df2\u9a57\u8b49\u7684 ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u4e2d\u6aa2\u7d22\u72c0\u614b\uff0c\u4e26\u4f7f\u7528\u8a72\u72c0\u614b\u5efa\u7acb\u4e00\u500b\u65b0\u7684 ",(0,s.jsx)(t.a,{href:"/java/docs/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),"\u3002"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'APIRequestContext requestContext = playwright.request().newContext(\n  new APIRequest.NewContextOptions().setHttpCredentials("user", "passwd"));\nrequestContext.get("https://api.example.com/login");\n// Save storage state into a variable.\nString state = requestContext.storageState();\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));\n'})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);