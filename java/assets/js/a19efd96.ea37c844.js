"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9364],{9027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=t(4848),s=t(8453);t(4235),t(8328),t(3078);const i={id:"emulation",title:"Emulation"},a=void 0,r={id:"emulation",title:"Emulation",description:"Introduction",source:"@site/docs/emulation.mdx",sourceDirName:".",slug:"/emulation",permalink:"/java/docs/next/emulation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"emulation",title:"Emulation"},sidebar:"docs",previous:{title:"Downloads",permalink:"/java/docs/next/downloads"},next:{title:"Evaluating JavaScript",permalink:"/java/docs/next/evaluating"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Devices",id:"devices",level:2},{value:"Viewport",id:"viewport",level:2},{value:"isMobile",id:"ismobile",level:2},{value:"Locale &amp; Timezone",id:"locale--timezone",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Geolocation",id:"geolocation",level:2},{value:"Color Scheme and Media",id:"color-scheme-and-media",level:2},{value:"User Agent",id:"user-agent",level:2},{value:"Offline",id:"offline",level:2},{value:"JavaScript Enabled",id:"javascript-enabled",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as ",(0,o.jsx)(n.code,{children:'"userAgent"'}),", ",(0,o.jsx)(n.code,{children:'"screenSize"'}),", ",(0,o.jsx)(n.code,{children:'"viewport"'})," and if it ",(0,o.jsx)(n.code,{children:'"hasTouch"'})," enabled. You can also emulate the ",(0,o.jsx)(n.code,{children:'"geolocation"'}),", ",(0,o.jsx)(n.code,{children:'"locale"'})," and ",(0,o.jsx)(n.code,{children:'"timezone"'})," for all tests or for a specific test as well as set the ",(0,o.jsx)(n.code,{children:'"permissions"'})," to show notifications or change the ",(0,o.jsx)(n.code,{children:'"colorScheme"'}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"devices",children:"Devices"}),"\n",(0,o.jsxs)(n.p,{children:["Playwright can emulate various devices by specifying ",(0,o.jsx)(n.code,{children:"setDeviceScaleFactor"}),", ",(0,o.jsx)(n.code,{children:"setHasTouch"}),", ",(0,o.jsx)(n.code,{children:"setIsMobile"}),", ",(0,o.jsx)(n.code,{children:"setScreenSize"}),", ",(0,o.jsx)(n.code,{children:"setUserAgent"})," and ",(0,o.jsx)(n.code,{children:"setViewportSize"})," options when creating a context with ",(0,o.jsx)(n.a,{href:"/java/docs/next/api/class-browser#browser-new-context",children:"Browser.newContext()"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"viewport",children:"Viewport"}),"\n",(0,o.jsxs)(n.p,{children:["The viewport is included in the device but you can override it for some tests with ",(0,o.jsx)(n.a,{href:"/java/docs/next/api/class-page#page-set-viewport-size",children:"Page.setViewportSize()"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Test file:"}),"\n",(0,o.jsx)(n.p,{children:"The same works inside a test file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Create context with given viewport\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(1280, 1024));\n\n// Resize viewport for individual page\npage.setViewportSize(1600, 1200);\n\n// Emulate high-DPI\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setViewportSize(2560, 1440)\n  .setDeviceScaleFactor(2);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"ismobile",children:"isMobile"}),"\n",(0,o.jsx)(n.p,{children:"Whether the meta viewport tag is taken into account and touch events are enabled."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .isMobile(false));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"locale--timezone",children:"Locale & Timezone"}),"\n",(0,o.jsx)(n.p,{children:"Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setLocale("de-DE")\n  .setTimezoneId("Europe/Berlin"));\n'})}),"\n",(0,o.jsx)("img",{width:"1394",alt:"Bing in german lang and timezone",src:"https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png"}),"\n",(0,o.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,o.jsx)(n.p,{children:"Allow app to show system notifications."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setPermissions(Arrays.asList("notifications"));\n'})}),"\n",(0,o.jsx)(n.p,{children:"Allow notifications for a specific domain."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'context.grantPermissions(Arrays.asList("notifications"),\n  new BrowserContext.GrantPermissionsOptions().setOrigin("https://skype.com"));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Revoke all permissions with ",(0,o.jsx)(n.a,{href:"/java/docs/next/api/class-browsercontext#browser-context-clear-permissions",children:"BrowserContext.clearPermissions()"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"context.clearPermissions();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"geolocation",children:"Geolocation"}),"\n",(0,o.jsxs)(n.p,{children:["Grant ",(0,o.jsx)(n.code,{children:'"geolocation"'})," permissions and set geolocation to a specific area."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setGeolocation(41.890221, 12.492348)\n  .setPermissions(Arrays.asList("geolocation")));\n'})}),"\n",(0,o.jsx)("img",{width:"1394",alt:"geolocation for italy on bing maps",src:"https://user-images.githubusercontent.com/13063165/220417670-bb22d815-f5cd-47c4-8562-0b88165eac27.png"}),"\n",(0,o.jsx)(n.p,{children:"Change the location later:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"context.setGeolocation(new Geolocation(48.858455, 2.294474));\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"})," you can only change geolocation for all pages in the context."]}),"\n",(0,o.jsx)(n.h2,{id:"color-scheme-and-media",children:"Color Scheme and Media"}),"\n",(0,o.jsxs)(n.p,{children:["Emulate the users ",(0,o.jsx)(n.code,{children:'"colorScheme"'}),". Supported values are 'light', 'dark', 'no-preference'. You can also emulate the media type with ",(0,o.jsx)(n.a,{href:"/java/docs/next/api/class-page#page-emulate-media",children:"Page.emulateMedia()"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Create context with dark mode\nBrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setColorScheme(ColorScheme.DARK)); // or "light"\n\n// Create page with dark mode\nPage page = browser.newPage(new Browser.NewPageOptions()\n  .setColorScheme(ColorScheme.DARK)); // or "light"\n\n// Change color scheme for the page\npage.emulateMedia(new Page.EmulateMediaOptions().setColorScheme(ColorScheme.DARK));\n\n// Change media for page\npage.emulateMedia(new Page.EmulateMediaOptions().setMedia(Media.PRINT));\n'})}),"\n",(0,o.jsx)("img",{width:"1394",alt:"playwright web in dark mode",src:"https://user-images.githubusercontent.com/13063165/220411638-55d2b051-4678-4da7-9f0b-ed22f5a3c47c.png"}),"\n",(0,o.jsx)(n.h2,{id:"user-agent",children:"User Agent"}),"\n",(0,o.jsxs)(n.p,{children:["The User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the ",(0,o.jsx)(n.code,{children:"userAgent"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setUserAgent("My user agent"));\n'})}),"\n",(0,o.jsx)(n.h2,{id:"offline",children:"Offline"}),"\n",(0,o.jsx)(n.p,{children:"Emulate the network being offline."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .setOffline(true));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"javascript-enabled",children:"JavaScript Enabled"}),"\n",(0,o.jsx)(n.p,{children:"Emulate a user scenario where JavaScript is disabled."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n  .javaScriptEnabled(false));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);