"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6983],{8960:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var o=i(4848),n=i(8453);i(4235),i(8328),i(3078);const l={id:"dialogs",title:"Dialogs"},t=void 0,s={id:"dialogs",title:"Dialogs",description:"Introduction",source:"@site/docs/dialogs.mdx",sourceDirName:".",slug:"/dialogs",permalink:"/java/docs/next/dialogs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"dialogs",title:"Dialogs"},sidebar:"docs",previous:{title:"Clock",permalink:"/java/docs/next/clock"},next:{title:"Debugging Tests",permalink:"/java/docs/next/debug"}},r={},d=[{value:"Introduction",id:"introduction",level:2},{value:"alert(), confirm(), prompt() dialogs",id:"alert-confirm-prompt-dialogs",level:2},{value:"beforeunload dialog",id:"beforeunload-dialog",level:2},{value:"Print dialogs",id:"print-dialogs",level:2}];function c(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(a.p,{children:["Playwright can interact with the web page dialogs such as ",(0,o.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert",children:(0,o.jsx)(a.code,{children:"alert"})}),", ",(0,o.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",children:(0,o.jsx)(a.code,{children:"confirm"})}),", ",(0,o.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",children:(0,o.jsx)(a.code,{children:"prompt"})})," as well as ",(0,o.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",children:(0,o.jsx)(a.code,{children:"beforeunload"})})," confirmation. For print dialogs, see ",(0,o.jsx)(a.a,{href:"#print-dialogs",children:"Print"}),"."]}),"\n",(0,o.jsx)(a.h2,{id:"alert-confirm-prompt-dialogs",children:"alert(), confirm(), prompt() dialogs"}),"\n",(0,o.jsxs)(a.p,{children:["By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-dialog#dialog-accept",children:"Dialog.accept()"})," or ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-dialog#dialog-dismiss",children:"Dialog.dismiss()"})," it."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:"page.onDialog(dialog -> dialog.accept());\npage.getByRole(AriaRole.BUTTON).click();\n"})}),"\n",(0,o.jsx)(a.admonition,{type:"note",children:(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-page#page-event-dialog",children:"Page.onDialog(handler)"})," listener ",(0,o.jsx)(a.strong,{children:"must handle"})," the dialog. Otherwise your action will stall, be it ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-locator#locator-click",children:"Locator.click()"})," or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled."]})}),"\n",(0,o.jsx)(a.p,{children:"As a result, the following snippet will never resolve:"}),"\n",(0,o.jsx)(a.admonition,{type:"warning",children:(0,o.jsx)(a.p,{children:"WRONG!"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:"page.onDialog(dialog -> System.out.println(dialog.message()));\npage.getByRole(AriaRole.BUTTON).click(); // Will hang here\n"})}),"\n",(0,o.jsx)(a.admonition,{type:"note",children:(0,o.jsxs)(a.p,{children:["If there is no listener for ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-page#page-event-dialog",children:"Page.onDialog(handler)"}),", all dialogs are automatically dismissed."]})}),"\n",(0,o.jsx)(a.h2,{id:"beforeunload-dialog",children:"beforeunload dialog"}),"\n",(0,o.jsxs)(a.p,{children:["When ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-page#page-close",children:"Page.close()"})," is invoked with the truthy ",(0,o.jsx)(a.code,{children:"runBeforeUnload"})," value, the page runs its unload handlers. This is the only case when ",(0,o.jsx)(a.a,{href:"/java/docs/next/api/class-page#page-close",children:"Page.close()"})," does not wait for the page to actually close, because it might be that the page stays open in the end of the operation."]}),"\n",(0,o.jsxs)(a.p,{children:["You can register a dialog handler to handle the ",(0,o.jsx)(a.code,{children:"beforeunload"})," dialog yourself:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:'page.onDialog(dialog -> {\n  assertEquals("beforeunload", dialog.type());\n  dialog.dismiss();\n});\npage.close(new Page.CloseOptions().setRunBeforeUnload(true));\n'})}),"\n",(0,o.jsx)(a.h2,{id:"print-dialogs",children:"Print dialogs"}),"\n",(0,o.jsxs)(a.p,{children:["In order to assert that a print dialog via ",(0,o.jsx)(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/print",children:(0,o.jsx)(a.code,{children:"window.print"})})," was triggered, you can use the following snippet:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:'page.navigate("<url>");\n\npage.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");\npage.getByText("Print it!").click();\n\npage.waitForFunction("window.waitForPrintDialog");\n'})}),"\n",(0,o.jsx)(a.p,{children:"This will wait for the print dialog to be opened after the button is clicked. Make sure to evaluate the script before clicking the button / after the page is loaded."})]})}function h(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);