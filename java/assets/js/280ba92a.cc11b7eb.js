"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[4518],{9606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(4848),s=n(8453);n(4235),n(8328),n(3078);const i={id:"running-tests",title:"Running and debugging tests"},a=void 0,o={id:"running-tests",title:"Running and debugging tests",description:"Introduction",source:"@site/docs/running-tests.mdx",sourceDirName:".",slug:"/running-tests",permalink:"/java/docs/next/running-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"running-tests",title:"Running and debugging tests"},sidebar:"docs",previous:{title:"Generating tests",permalink:"/java/docs/next/codegen-intro"},next:{title:"Trace viewer",permalink:"/java/docs/next/trace-viewer-intro"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Run tests in headed mode",id:"run-tests-in-headed-mode",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["Playwright tests can be run in a variety of ways. We recommend hooking it up to your favorite test runner, e.g., ",(0,r.jsx)(t.a,{href:"/java/docs/next/test-runners",children:"JUnit"}),", since it gives you the ability to run tests in parallel, run single test, etc."]}),"\n",(0,r.jsxs)(t.p,{children:["You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the ",(0,r.jsx)(t.code,{children:"launch(new BrowserType.LaunchOptions().setHeadless(false))"})," option."]}),"\n",(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.a,{href:"https://junit.org/junit5/",children:"JUnit"}),", you can initialize ",(0,r.jsx)(t.a,{href:"/java/docs/next/api/class-playwright",title:"Playwright",children:"Playwright"})," and ",(0,r.jsx)(t.a,{href:"/java/docs/next/api/class-browser",title:"Browser",children:"Browser"})," in ",(0,r.jsx)(t.a,{href:"https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/BeforeAll.html",children:"@BeforeAll"})," method and destroy them in ",(0,r.jsx)(t.a,{href:"https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/AfterAll.html",children:"@AfterAll"}),". In the example below, all three test methods use the same ",(0,r.jsx)(t.a,{href:"/java/docs/next/api/class-browser",title:"Browser",children:"Browser"}),". Each test uses its own ",(0,r.jsx)(t.a,{href:"/java/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," and ",(0,r.jsx)(t.a,{href:"/java/docs/next/api/class-page",title:"Page",children:"Page"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package org.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static Playwright playwright;\n  static Browser browser;\n\n  // New instance for each test method.\n  BrowserContext context;\n  Page page;\n\n  @BeforeAll\n  static void launchBrowser() {\n    playwright = Playwright.create();\n    browser = playwright.chromium().launch();\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    playwright.close();\n  }\n\n  @BeforeEach\n  void createContextAndPage() {\n    context = browser.newContext();\n    page = context.newPage();\n  }\n\n  @AfterEach\n  void closeContext() {\n    context.close();\n  }\n\n  @Test\n  void shouldClickButton() {\n    page.navigate("data:text/html,<script>var result;<\/script><button onclick=\'result=\\"Clicked\\"\'>Go</button>");\n    page.locator("button").click();\n    assertEquals("Clicked", page.evaluate("result"));\n  }\n\n  @Test\n  void shouldCheckTheBox() {\n    page.setContent("<input id=\'checkbox\' type=\'checkbox\'></input>");\n    page.locator("input").check();\n    assertTrue((Boolean) page.evaluate("() => window[\'checkbox\'].checked"));\n  }\n\n  @Test\n  void shouldSearchWiki() {\n    page.navigate("https://www.wikipedia.org/");\n    page.locator("input[name=\\"search\\"]").click();\n    page.locator("input[name=\\"search\\"]").fill("playwright");\n    page.locator("input[name=\\"search\\"]").press("Enter");\n    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());\n  }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["See ",(0,r.jsx)(t.a,{href:"/java/docs/next/test-runners",children:"here"})," for further details on how to run tests in parallel, etc."]}),"\n",(0,r.jsxs)(t.p,{children:["See experimental ",(0,r.jsx)(t.a,{href:"/java/docs/next/junit",children:"JUnit integration"})," to automatically initialize Playwright objects and more."]}),"\n",(0,r.jsx)(t.h3,{id:"run-tests-in-headed-mode",children:"Run tests in headed mode"}),"\n",(0,r.jsxs)(t.p,{children:["If you prefer, you can run your tests in headed mode by using the ",(0,r.jsx)(t.code,{children:"launch(new BrowserType.LaunchOptions().setHeadless(false))"})," option."]}),"\n",(0,r.jsx)(t.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/java/docs/next/debug",children:"Debugging tests"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/java/docs/next/codegen",children:"Generate tests with Codegen"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/java/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);