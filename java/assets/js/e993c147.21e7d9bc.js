"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6],{9945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(4848),r=n(8453);n(4235),n(8328),n(3078);const o={id:"webview2",title:"WebView2"},s=void 0,a={id:"webview2",title:"WebView2",description:"Introduction",source:"@site/docs/webview2.mdx",sourceDirName:".",slug:"/webview2",permalink:"/java/docs/next/webview2",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"webview2",title:"WebView2"},sidebar:"docs",previous:{title:"Videos",permalink:"/java/docs/next/videos"},next:{title:"Docker",permalink:"/java/docs/next/docker"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Overview",id:"overview",level:2},{value:"Writing and running tests",id:"writing-and-running-tests",level:2},{value:"Debugging",id:"debugging",level:2}];function w(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["The following will explain how to use Playwright with ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/microsoft-edge/webview2/",children:"Microsoft Edge WebView2"}),". WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses ",(0,i.jsx)(t.a,{href:"/java/docs/next/api/class-browsertype#browser-type-connect-over-cdp",children:"BrowserType.connectOverCDP()"})," which connects to it via the Chrome DevTools Protocol (CDP)."]}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["A WebView2 control can be instructed to listen to incoming CDP connections by setting either the ",(0,i.jsx)(t.code,{children:"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS"})," environment variable with ",(0,i.jsx)(t.code,{children:"--remote-debugging-port=9222"})," or calling ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22",children:"EnsureCoreWebView2Async"})," with the ",(0,i.jsx)(t.code,{children:"--remote-debugging-port=9222"})," argument. This will start the WebView2 process with the Chrome DevTools Protocol enabled which allows the automation by Playwright. 9222 is an example port in this case, but any other unused port can be used as well."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()\n{\n  AdditionalBrowserArguments = "--remote-debugging-port=9222",\n})).ConfigureAwait(false);\n'})}),"\n",(0,i.jsx)(t.p,{children:"Once your application with the WebView2 control is running, you can connect to it via Playwright:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'Browser browser = playwright.chromium().connectOverCDP("http://localhost:9222");\nBrowserContext context = browser.contexts().get(0);\nPage page = context.pages().get(0);\n'})}),"\n",(0,i.jsxs)(t.p,{children:["To ensure that the WebView2 control is ready, you can wait for the ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.corewebview2initializationcompleted?view=webview2-dotnet-1.0.1343.22",children:(0,i.jsx)(t.code,{children:"CoreWebView2InitializationCompleted"})})," event:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'this.webView.CoreWebView2InitializationCompleted += (_, e) =>\n{\n    if (e.IsSuccess)\n    {\n        Console.WriteLine("WebView2 initialized");\n    }\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"writing-and-running-tests",children:"Writing and running tests"}),"\n",(0,i.jsxs)(t.p,{children:["By default, the WebView2 control will use the same user data directory for all instances. This means that if you run multiple tests in parallel, they will interfere with each other. To avoid this, you should set the ",(0,i.jsx)(t.code,{children:"WEBVIEW2_USER_DATA_FOLDER"})," environment variable (or use ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22",children:"WebView2.EnsureCoreWebView2Async Method"}),") to a different folder for each test. This will make sure that each test runs in its own user data directory."]}),"\n",(0,i.jsxs)(t.p,{children:["Using the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the ",(0,i.jsx)(t.a,{href:"/java/docs/next/api/class-page",title:"Page",children:"Page"})," instance to your test:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:'title="WebView2Process.java"',children:'package com.example;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class WebView2Process {\n  public int cdpPort;\n  private Path _dataDir;\n  private Process _process;\n  private Path _executablePath = Path.of("../webview2-app/bin/Debug/net8.0-windows/webview2.exe");\n\n  public WebView2Process() throws IOException {\n    cdpPort = nextFreePort();\n    _dataDir = Files.createTempDirectory("pw-java-webview2-tests-");\n\n    if (!Files.exists(_executablePath)) {\n      throw new RuntimeException("Executable not found: " + _executablePath);\n    }\n    ProcessBuilder pb = new ProcessBuilder().command(_executablePath.toAbsolutePath().toString());\n    Map<String, String> envMap = pb.environment();\n    envMap.put("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--remote-debugging-port=" + cdpPort);\n    envMap.put("WEBVIEW2_USER_DATA_FOLDER", _dataDir.toString());\n    _process = pb.start();\n    // wait until "WebView2 initialized" got printed\n    BufferedReader reader = new BufferedReader(new InputStreamReader(_process.getInputStream()));\n    while (true) {\n      String line = reader.readLine();\n      if (line == null) {\n        throw new RuntimeException("WebView2 process exited");\n      }\n      if (line.contains("WebView2 initialized")) {\n        break;\n      }\n    }\n  }\n\n  private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);\n\n  private static boolean available(int port) {\n    try (ServerSocket ignored = new ServerSocket(port)) {\n      return true;\n    } catch (IOException ignored) {\n      return false;\n    }\n  }\n\n  static int nextFreePort() {\n    for (int i = 0; i < 100; i++) {\n      int port = nextUnusedPort.getAndIncrement();\n      if (available(port)) {\n        return port;\n      }\n    }\n    throw new RuntimeException("Cannot find free port: " + nextUnusedPort.get());\n  }\n\n  public void dispose() {\n    _process.destroy();\n    try {\n      _process.waitFor();\n    } catch (InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:'title="TestExample.java"',children:'package com.example;\n\nimport com.microsoft.playwright.Browser;\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nimport java.io.IOException;\n\npublic class TestExample {\n  // Shared between all tests in this class.\n  static WebView2Process webview2Process;\n  static Playwright playwright;\n  static Browser browser;\n  static BrowserContext context;\n  static Page page;\n\n  @BeforeAll\n  static void launchBrowser() throws IOException {\n    playwright = Playwright.create();\n    webview2Process = new WebView2Process();\n    browser = playwright.chromium().connectOverCDP("http://127.0.0.1:" + webview2Process.cdpPort);\n    context = browser.contexts().get(0);\n    page = context.pages().get(0);\n  }\n\n  @AfterAll\n  static void closeBrowser() {\n    webview2Process.dispose();\n  }\n\n  @Test\n  public void shouldClickButton() {\n    page.navigate("https://playwright.dev");\n    Locator gettingStarted = page.getByText("Get started");\n    assertThat(gettingStarted).isVisible();\n  }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsxs)(t.p,{children:['Inside your webview2 control, you can just right-click to open the context menu and select "Inspect" to open the DevTools or press ',(0,i.jsx)("kbd",{children:"F12"}),". You can also use the ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.opendevtoolswindow?view=webview2-dotnet-1.0.1462.37",children:"WebView2.CoreWebView2.OpenDevToolsWindow"})," method to open the DevTools programmatically."]}),"\n",(0,i.jsxs)(t.p,{children:["For debugging tests, see the Playwright ",(0,i.jsx)(t.a,{href:"./debug",children:"Debugging guide"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}}}]);