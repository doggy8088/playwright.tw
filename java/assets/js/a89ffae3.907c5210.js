"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1846],{7087:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var s=a(4848),r=a(8453);a(4235),a(8328),a(3078);const n={id:"writing-tests",title:"Writing tests"},i=void 0,o={id:"writing-tests",title:"Writing tests",description:"Introduction",source:"@site/docs/writing-tests.mdx",sourceDirName:".",slug:"/writing-tests",permalink:"/java/docs/next/writing-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"writing-tests",title:"Writing tests"},sidebar:"docs",previous:{title:"Installation",permalink:"/java/docs/next/intro"},next:{title:"Generating tests",permalink:"/java/docs/next/codegen-intro"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Assertions",id:"assertions",level:3},{value:"Locators",id:"locators",level:3},{value:"Test Isolation",id:"test-isolation",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with ",(0,s.jsx)(t.a,{href:"/java/docs/next/actionability",children:"auto-wait"})," built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides ",(0,s.jsx)(t.a,{href:"/java/docs/next/test-assertions",children:"assertThat"})," overloads to write assertions."]}),"\n",(0,s.jsx)(t.p,{children:"Take a look at the example test below to see how to write a test using web first assertions, locators and selectors."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'package org.example;\n\nimport java.util.regex.Pattern;\nimport com.microsoft.playwright.*;\nimport com.microsoft.playwright.options.AriaRole;\n\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class App {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            Page page = browser.newPage();\n            page.navigate("http://playwright.dev");\n\n            // Expect a title "to contain" a substring.\n            assertThat(page).hasTitle(Pattern.compile("Playwright"));\n\n            // create a locator\n            Locator getStarted = page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Get Started"));\n\n            // Expect an attribute "to be strictly equal" to the value.\n            assertThat(getStarted).hasAttribute("href", "/docs/intro");\n\n            // Click the get started link.\n            getStarted.click();\n\n            // Expects page to have a heading with the name of Installation.\n            assertThat(page.getByRole(AriaRole.HEADING,\n               new Page.GetByRoleOptions().setName("Installation"))).isVisible();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"assertions",children:"Assertions"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright provides ",(0,s.jsx)(t.a,{href:"/java/docs/next/test-assertions",children:(0,s.jsx)(t.code,{children:"assertThat"})})," overloads which will wait until the expected condition is met."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import java.util.regex.Pattern;\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page).hasTitle(Pattern.compile("Playwright"));\n'})}),"\n",(0,s.jsx)(t.h3,{id:"locators",children:"Locators"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/java/docs/next/locators",children:"Locators"})," are the central piece of Playwright's auto-waiting and retry-ability. Locators represent a way to find element(s) on the page at any moment and are used to perform actions on elements such as ",(0,s.jsx)(t.code,{children:".click"})," ",(0,s.jsx)(t.code,{children:".fill"})," etc. Custom locators can be created with the ",(0,s.jsx)(t.a,{href:"/java/docs/next/api/class-page#page-locator",children:"Page.locator()"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nLocator getStarted = page.locator("text=Get Started");\n\nassertThat(getStarted).hasAttribute("href", "/docs/intro");\ngetStarted.click();\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Playwright supports many different locators like ",(0,s.jsx)(t.a,{href:"/java/docs/next/locators#locate-by-role",children:"role"})," ",(0,s.jsx)(t.a,{href:"/java/docs/next/locators#get-by-text",children:"text"}),", ",(0,s.jsx)(t.a,{href:"/java/docs/next/locators#get-by-test-id",children:"test id"})," and many more. Learn more about available locators and how to pick one in this ",(0,s.jsx)(t.a,{href:"/java/docs/next/locators",children:"in-depth guide"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page.locator("text=Installation")).isVisible();\n'})}),"\n",(0,s.jsx)(t.h3,{id:"test-isolation",children:"Test Isolation"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright has the concept of a ",(0,s.jsx)(t.a,{href:"/java/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," which is an in-memory isolated browser profile. It's recommended to create a new ",(0,s.jsx)(t.a,{href:"/java/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," for each test to ensure they don't interfere with each other."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"Browser browser = playwright.chromium().launch();\nBrowserContext context = browser.newContext();\nPage page = context.newPage();\n"})}),"\n",(0,s.jsx)(t.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/java/docs/next/running-tests",children:"Run single test, multiple tests, headed mode"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/java/docs/next/codegen",children:"Generate tests with Codegen"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/java/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);