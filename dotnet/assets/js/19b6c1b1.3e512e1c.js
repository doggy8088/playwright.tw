"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[210],{543:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(4848),i=s(8453);s(4235),s(8328),s(3078);const r={id:"ci",title:"Continuous Integration"},o=void 0,l={id:"ci",title:"Continuous Integration",description:"Introduction",source:"@site/docs/ci.mdx",sourceDirName:".",slug:"/ci",permalink:"/dotnet/docs/next/ci",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"ci",title:"Continuous Integration"},sidebar:"docs",previous:{title:"Docker",permalink:"/dotnet/docs/next/docker"},next:{title:"Selenium Grid (experimental)",permalink:"/dotnet/docs/next/selenium-grid"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"CI configurations",id:"ci-configurations",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"On push/pull_request",id:"on-pushpull_request",level:4},{value:"Via Containers",id:"via-containers",level:4},{value:"On deployment",id:"on-deployment",level:4},{value:"Docker",id:"docker",level:3},{value:"Azure Pipelines",id:"azure-pipelines",level:3},{value:"Azure Pipelines (containerized)",id:"azure-pipelines-containerized",level:4},{value:"CircleCI",id:"circleci",level:3},{value:"Jenkins",id:"jenkins",level:3},{value:"Bitbucket Pipelines",id:"bitbucket-pipelines",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Caching browsers",id:"caching-browsers",level:2},{value:"Debugging browser launches",id:"debugging-browser-launches",level:2},{value:"Running headed",id:"running-headed",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Playwright tests can be executed in CI environments. We have created sample configurations for common CI providers."}),"\n",(0,t.jsx)(n.p,{children:"3 steps to get your tests running on CI:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Ensure CI agent can run browsers"}),": Use ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"our Docker image"})," in Linux agents or install your dependencies using the ",(0,t.jsx)(n.a,{href:"./browsers#install-system-dependencies",children:"CLI"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Install Playwright"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet build\npwsh bin/Debug/netX/playwright.ps1 install --with-deps\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Run your tests"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet test\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ci-configurations",children:"CI configurations"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"./browsers#install-system-dependencies",children:"Command line tools"})," can be used to install all operating system dependencies in CI."]}),"\n",(0,t.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,t.jsx)(n.h4,{id:"on-pushpull_request",children:"On push/pull_request"}),"\n",(0,t.jsxs)(n.p,{children:["Tests will run on push or pull request on branches main/master. The ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/actions/using-workflows/about-workflows",children:"workflow"})," will install all dependencies, install Playwright and then run the tests."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/playwright.yml"',children:"name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test\n"})}),"\n",(0,t.jsx)(n.h4,{id:"via-containers",children:"Via Containers"}),"\n",(0,t.jsxs)(n.p,{children:["GitHub Actions support ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container",children:"running jobs in a container"})," by using the ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idcontainer",children:(0,t.jsx)(n.code,{children:"jobs.<job_id>.container"})})," option. This is useful to not pollute the host environment with dependencies and to have a consistent environment for e.g. screenshots/visual regression testing across different operating systems."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/playwright.yml"',children:"name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  playwright:\n    name: 'Playwright Tests'\n    runs-on: ubuntu-latest\n    container:\n      image: mcr.microsoft.com/playwright/dotnet:v1.46.0-jammy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup dotnet\n        uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: 8.0.x\n      - run: dotnet build\n      - name: Run your tests\n        run: dotnet test\n        env:\n          HOME: /root\n"})}),"\n",(0,t.jsx)(n.h4,{id:"on-deployment",children:"On deployment"}),"\n",(0,t.jsxs)(n.p,{children:["This will start the tests after a ",(0,t.jsx)(n.a,{href:"https://developer.github.com/v3/repos/deployments/",children:"GitHub Deployment"})," went into the ",(0,t.jsx)(n.code,{children:"success"})," state. Services like Vercel use this pattern so you can run your end-to-end tests on their deployed environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/playwright.yml"',children:"name: Playwright Tests\non:\n  deployment_status:\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run tests\n      run: dotnet test\n      env:\n        # This might depend on your test-runner\n        PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,t.jsxs)(n.p,{children:["We have a ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"pre-built Docker image"})," which can either be used directly, or as a reference to update your existing Docker definitions."]}),"\n",(0,t.jsx)(n.p,{children:"Suggested configuration"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"--ipc=host"})," is also recommended when using Chromium. Without it Chromium can run out of memory and crash. Learn more about this option in ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/run/#ipc-settings---ipc",children:"Docker docs"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Seeing other weird errors when launching Chromium? Try running your container with ",(0,t.jsx)(n.code,{children:"docker run --cap-add=SYS_ADMIN"})," when developing locally."]}),"\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"--init"})," Docker flag or ",(0,t.jsx)(n.a,{href:"https://github.com/Yelp/dumb-init",children:"dumb-init"})," is recommended to avoid special treatment for processes with PID=1. This is a common reason for zombie processes."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"azure-pipelines",children:"Azure Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"For Windows or macOS agents, no additional configuration required, just install Playwright and run your tests."}),"\n",(0,t.jsxs)(n.p,{children:["For Linux agents, you can use ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"our Docker container"})," with Azure Pipelines support ",(0,t.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops",children:"running containerized jobs"}),". Alternatively, you can use ",(0,t.jsx)(n.a,{href:"./browsers#install-system-dependencies",children:"Command line tools"})," to install all necessary dependencies."]}),"\n",(0,t.jsx)(n.p,{children:"For running the Playwright tests use this pipeline task:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"trigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: pwsh bin/Release/net8.0/playwright.ps1 install --with-deps\n  displayName: 'Install Playwright browsers'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n"})}),"\n",(0,t.jsx)(n.h4,{id:"azure-pipelines-containerized",children:"Azure Pipelines (containerized)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"trigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\ncontainer: mcr.microsoft.com/playwright/dotnet:v1.46.0-noble\n\nsteps:\n- task: UseDotNet@2\n  inputs:\n    packageType: sdk\n    version: '8.0.x'\n  displayName: 'Use .NET SDK'\n\n- script: dotnet build --configuration Release\n  displayName: 'Build'\n- script: dotnet test --configuration Release\n  displayName: 'Run tests'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"circleci",children:"CircleCI"}),"\n",(0,t.jsxs)(n.p,{children:["Running Playwright on CircleCI is very similar to running on GitHub Actions. In order to specify the pre-built Playwright ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"Docker image"}),", simply modify the agent definition with ",(0,t.jsx)(n.code,{children:"docker:"})," in your config like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"executors:\n  pw-jammy-development:\n    docker:\n      - image: mcr.microsoft.com/playwright/dotnet:v1.46.0-noble\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: When using the docker agent definition, you are specifying the resource class of where playwright runs to the 'medium' tier ",(0,t.jsx)(n.a,{href:"https://circleci.com/docs/configuration-reference?#docker-execution-environment",children:"here"}),". The default behavior of Playwright is to set the number of workers to the detected core count (2 in the case of the medium tier). Overriding the number of workers to greater than this number will cause unnecessary timeouts and failures."]}),"\n",(0,t.jsx)(n.h3,{id:"jenkins",children:"Jenkins"}),"\n",(0,t.jsxs)(n.p,{children:["Jenkins supports Docker agents for pipelines. Use the ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"Playwright Docker image"})," to run tests on Jenkins."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-groovy",children:"pipeline {\n   agent { docker { image 'mcr.microsoft.com/playwright/dotnet:v1.46.0-noble' } }\n   stages {\n      stage('e2e-tests') {\n         steps {\n            sh 'dotnet build'\n            sh 'dotnet test'\n         }\n      }\n   }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bitbucket-pipelines",children:"Bitbucket Pipelines"}),"\n",(0,t.jsxs)(n.p,{children:["Bitbucket Pipelines can use public ",(0,t.jsx)(n.a,{href:"https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html",children:"Docker images as build environments"}),". To run Playwright tests on Bitbucket, use our public Docker image (",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"see Dockerfile"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"image: mcr.microsoft.com/playwright/dotnet:v1.46.0-noble\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,t.jsxs)(n.p,{children:["To run Playwright tests on GitLab, use our public Docker image (",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"see Dockerfile"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"caching-browsers",children:"Caching browsers"}),"\n",(0,t.jsxs)(n.p,{children:["Caching browser binaries is not recommended, since the amount of time it takes to restore the cache is comparable to the time it takes to download the binaries. Especially under Linux, ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/browsers#install-system-dependencies",children:"operating system dependencies"})," need to be installed, which are not cacheable."]}),"\n",(0,t.jsxs)(n.p,{children:["If you still want to cache the browser binaries between CI runs, cache ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/browsers#managing-browser-binaries",children:"these directories"})," in your CI configuration, against a hash of the Playwright version."]}),"\n",(0,t.jsx)(n.h2,{id:"debugging-browser-launches",children:"Debugging browser launches"}),"\n",(0,t.jsxs)(n.p,{children:["Playwright supports the ",(0,t.jsx)(n.code,{children:"DEBUG"})," environment variable to output debug logs during execution. Setting it to ",(0,t.jsx)(n.code,{children:"pw:browser"})," is helpful while debugging ",(0,t.jsx)(n.code,{children:"Error: Failed to launch browser"})," errors."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"DEBUG=pw:browser dotnet test\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-headed",children:"Running headed"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Playwright launches browsers in headless mode. See in our ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/running-tests#run-tests-in-headed-mode",children:"Running tests"})," guide how to run tests in headed mode."]}),"\n",(0,t.jsxs)(n.p,{children:["On Linux agents, headed execution requires ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Xvfb",children:"Xvfb"})," to be installed. Our ",(0,t.jsx)(n.a,{href:"/dotnet/docs/next/docker",children:"Docker image"})," and GitHub Action have Xvfb pre-installed. To run browsers in headed mode with Xvfb, add ",(0,t.jsx)(n.code,{children:"xvfb-run"})," before the actual command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"xvfb-run dotnet test\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);