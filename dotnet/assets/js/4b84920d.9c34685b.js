"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[884],{5102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var s=n(4848),l=n(8453),o=n(4235),i=n(8328);n(3078);const a={id:"debug",title:"Debugging Tests"},r=void 0,c={id:"debug",title:"Debugging Tests",description:"Playwright Inspector",source:"@site/docs/debug.mdx",sourceDirName:".",slug:"/debug",permalink:"/dotnet/docs/next/debug",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"debug",title:"Debugging Tests"},sidebar:"docs",previous:{title:"Clock",permalink:"/dotnet/docs/next/clock"},next:{title:"Dialogs",permalink:"/dotnet/docs/next/dialogs"}},h={},d=[{value:"Playwright Inspector",id:"playwright-inspector",level:2},{value:"Run in debug mode",id:"run-in-debug-mode",level:3},{value:"Stepping through your tests",id:"stepping-through-your-tests",level:3},{value:"Run a test from a specific breakpoint",id:"run-a-test-from-a-specific-breakpoint",level:3},{value:"Live editing locators",id:"live-editing-locators",level:3},{value:"Picking locators",id:"picking-locators",level:3},{value:"Actionability logs",id:"actionability-logs",level:3},{value:"Trace Viewer",id:"trace-viewer",level:2},{value:"Browser Developer Tools",id:"browser-developer-tools",level:2},{value:"playwright.$(selector)",id:"playwrightselector",level:4},{value:"playwright.$$(selector)",id:"playwrightselector-1",level:4},{value:"playwright.inspect(selector)",id:"playwrightinspectselector",level:4},{value:"playwright.locator(selector)",id:"playwrightlocatorselector",level:4},{value:"playwright.selector(element)",id:"playwrightselectorelement",level:4},{value:"Verbose API logs",id:"verbose-api-logs",level:2},{value:"Headed mode",id:"headed-mode",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"playwright-inspector",children:"Playwright Inspector"}),"\n",(0,s.jsx)(t.p,{children:"The Playwright Inspector is a GUI tool to help you debug your Playwright tests. It allows you to step through your tests, live edit locators, pick locators and see actionability logs."}),"\n",(0,s.jsx)("img",{width:"864",alt:"Playwright Inspector",src:"https://user-images.githubusercontent.com/13063165/212924587-4b84e5f6-b147-40e9-8c75-d7b9ab6b7ca1.png"}),"\n",(0,s.jsx)(t.h3,{id:"run-in-debug-mode",children:"Run in debug mode"}),"\n",(0,s.jsxs)(t.p,{children:["Set the ",(0,s.jsx)(t.code,{children:"PWDEBUG"})," environment variable to run your Playwright tests in debug mode. This configures Playwright for debugging and opens the inspector. Additional useful defaults are configured when ",(0,s.jsx)(t.code,{children:"PWDEBUG=1"})," is set:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Browsers launch in headed mode"}),"\n",(0,s.jsx)(t.li,{children:"Default timeout is set to 0 (= no timeout)"}),"\n"]}),"\n",(0,s.jsxs)(o.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,s.jsx)(i.A,{value:"bash",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"PWDEBUG=1 dotnet test\n"})})}),(0,s.jsx)(i.A,{value:"powershell",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:"$env:PWDEBUG=1\ndotnet test\n"})})}),(0,s.jsx)(i.A,{value:"batch",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-batch",children:"set PWDEBUG=1\ndotnet test\n"})})})]}),"\n",(0,s.jsx)(t.h3,{id:"stepping-through-your-tests",children:"Stepping through your tests"}),"\n",(0,s.jsx)(t.p,{children:"You can play, pause or step through each action of your test using the toolbar at the top of the Inspector. You can see the current action highlighted in the test code, and matching elements highlighted in the browser window."}),"\n",(0,s.jsx)("img",{width:"1340",alt:"Playwright Inspector and browser",src:"https://user-images.githubusercontent.com/13063165/212936618-84b87acc-bc2e-46ed-994b-32b2ef742e60.png"}),"\n",(0,s.jsx)(t.h3,{id:"run-a-test-from-a-specific-breakpoint",children:"Run a test from a specific breakpoint"}),"\n",(0,s.jsxs)(t.p,{children:["To speed up the debugging process you can add a ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page#page-pause",children:"Page.PauseAsync()"})," method to your test. This way you won't have to step through each action of your test to get to the point where you want to debug."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"await page.PauseAsync();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Once you add a ",(0,s.jsx)(t.code,{children:"page.pause()"}),' call, run your tests in debug mode. Clicking the "Resume" button in the Inspector will run the test and only stop on the ',(0,s.jsx)(t.code,{children:"page.pause()"}),"."]}),"\n",(0,s.jsx)("img",{width:"1350",alt:"test with page.pause",src:"https://user-images.githubusercontent.com/13063165/219473050-122be4c2-31d0-4cbd-aa8b-8588e8b781a6.png"}),"\n",(0,s.jsx)(t.h3,{id:"live-editing-locators",children:"Live editing locators"}),"\n",(0,s.jsxs)(t.p,{children:["While running in debug mode you can live edit the locators. Next to the 'Pick Locator' button there is a field showing the ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/locators",children:"locator"})," that the test is paused on. You can edit this locator directly in the ",(0,s.jsx)(t.strong,{children:"Pick Locator"})," field, and matching elements will be highlighted in the browser window."]}),"\n",(0,s.jsx)("img",{width:"1348",alt:"live editing locators",src:"https://user-images.githubusercontent.com/13063165/212980815-1cf6ef7b-e69a-496c-898a-ec603a3bc562.png"}),"\n",(0,s.jsx)(t.h3,{id:"picking-locators",children:"Picking locators"}),"\n",(0,s.jsxs)(t.p,{children:["While debugging, you might need to choose a more resilient locator. You can do this by clicking on the ",(0,s.jsx)(t.strong,{children:"Pick Locator"})," button and hovering over any element in the browser window. While hovering over an element you will see the code needed to locate this element highlighted below. Clicking an element in the browser will add the locator into the field where you can then either tweak it or copy it into your code."]}),"\n",(0,s.jsx)("img",{width:"1392",alt:"Picking locators",src:"https://user-images.githubusercontent.com/13063165/212968640-ce82a027-9277-4bdf-b0a9-6282fb2becb7.png"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright will look at your page and figure out the best locator, prioritizing ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/locators",children:"role, text and test id locators"}),". If Playwright finds multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, so you don't have to worry about failing tests due to locators."]}),"\n",(0,s.jsx)(t.h3,{id:"actionability-logs",children:"Actionability logs"}),"\n",(0,s.jsxs)(t.p,{children:["By the time Playwright has paused on a click action, it has already performed ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/actionability",children:"actionability checks"})," that can be found in the log. This can help you understand what happened during your test and what Playwright did or tried to do. The log tells you if the element was visible, enabled and stable, if the locator resolved to an element, scrolled into view, and so much more. If actionability can't be reached, it will show the action as pending."]}),"\n",(0,s.jsx)("img",{width:"883",alt:"Actionability Logs",src:"https://user-images.githubusercontent.com/13063165/212968907-5dede739-e0e3-482a-91cd-726a0f5b0b6d.png"}),"\n",(0,s.jsx)(t.h2,{id:"trace-viewer",children:"Trace Viewer"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/trace-viewer",children:"Trace Viewer"})," is a GUI tool that lets you explore recorded Playwright traces of your tests. You can go back and forward through each action on the left side, and visually see what was happening during the action. In the middle of the screen, you can see a DOM snapshot for the action. On the right side you can see action details, such as time, parameters, return value and log. You can also explore console messages, network requests and the source code."]}),"\n",(0,s.jsx)("video",{width:"100%",height:"100%",controls:!0,muted:!0,children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)("source",{src:"https://user-images.githubusercontent.com/13063165/219132713-17b9d75b-71e3-42c4-a43f-3f9e2e15f834.mp4",type:"video/mp4"})," Your browser does not support the video tag."]})}),"\n",(0,s.jsxs)(t.p,{children:["To learn more about how to record traces and use the Trace Viewer, check out the ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/trace-viewer",children:"Trace Viewer"})," guide."]}),"\n",(0,s.jsx)(t.h2,{id:"browser-developer-tools",children:"Browser Developer Tools"}),"\n",(0,s.jsxs)(t.p,{children:["When running in Debug Mode with ",(0,s.jsx)(t.code,{children:"PWDEBUG=console"}),", a ",(0,s.jsx)(t.code,{children:"playwright"})," object is available in the Developer tools console. Developer tools can help you to:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Inspect the DOM tree and ",(0,s.jsx)(t.strong,{children:"find element selectors"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"See console logs"})," during execution (or learn how to ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page#page-event-console",children:"read logs via API"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["Check ",(0,s.jsx)(t.strong,{children:"network activity"})," and other developer tools features"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This will also set the default timeouts of Playwright to 0 (= no timeout)."}),"\n",(0,s.jsx)("img",{width:"1399",alt:"Browser Developer Tools with Playwright object",src:"https://user-images.githubusercontent.com/13063165/219128002-898f604d-9697-4b7f-95b5-a6a8260b7282.png"}),"\n",(0,s.jsxs)(t.p,{children:["To debug your tests using the browser developer tools, start by setting a breakpoint in your test to pause the execution using the ",(0,s.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page#page-pause",children:"Page.PauseAsync()"})," method."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"await page.PauseAsync();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Once you have set a breakpoint in your test, you can then run your test with ",(0,s.jsx)(t.code,{children:"PWDEBUG=console"}),"."]}),"\n",(0,s.jsxs)(o.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,s.jsx)(i.A,{value:"bash",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"PWDEBUG=console dotnet test\n"})})}),(0,s.jsx)(i.A,{value:"powershell",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:"$env:PWDEBUG=console\ndotnet test\n"})})}),(0,s.jsx)(i.A,{value:"batch",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-batch",children:"set PWDEBUG=console\ndotnet test\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Once Playwright launches the browser window, you can open the developer tools. The ",(0,s.jsx)(t.code,{children:"playwright"})," object will be available in the console panel."]}),"\n",(0,s.jsx)(t.h4,{id:"playwrightselector",children:"playwright.$(selector)"}),"\n",(0,s.jsx)(t.p,{children:"Query the Playwright selector, using the actual Playwright query engine, for example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"playwright.$('.auth-form >> text=Log in');\n\n<button>Log in</button>\n"})}),"\n",(0,s.jsx)(t.h4,{id:"playwrightselector-1",children:"playwright.$$(selector)"}),"\n",(0,s.jsxs)(t.p,{children:["Same as ",(0,s.jsx)(t.code,{children:"playwright.$"}),", but returns all matching elements."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"playwright.$$('li >> text=John')\n\n[<li>, <li>, <li>, <li>]\n"})}),"\n",(0,s.jsx)(t.h4,{id:"playwrightinspectselector",children:"playwright.inspect(selector)"}),"\n",(0,s.jsx)(t.p,{children:"Reveal element in the Elements panel."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"playwright.inspect('text=Log in')\n"})}),"\n",(0,s.jsx)(t.h4,{id:"playwrightlocatorselector",children:"playwright.locator(selector)"}),"\n",(0,s.jsx)(t.p,{children:"Create a locator and query matching elements, for example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"playwright.locator('.auth-form', { hasText: 'Log in' });\n\nLocator ()\n  - element: button\n  - elements: [button]\n"})}),"\n",(0,s.jsx)(t.h4,{id:"playwrightselectorelement",children:"playwright.selector(element)"}),"\n",(0,s.jsxs)(t.p,{children:["Generates selector for the given element. For example, select an element in the Elements panel and pass ",(0,s.jsx)(t.code,{children:"$0"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'playwright.selector($0)\n\n"div[id="glow-ingress-block"] >> text=/.*Hello.*/"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"verbose-api-logs",children:"Verbose API logs"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright supports verbose logging with the ",(0,s.jsx)(t.code,{children:"DEBUG"})," environment variable."]}),"\n",(0,s.jsxs)(o.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,s.jsx)(i.A,{value:"bash",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"DEBUG=pw:api dotnet run\n"})})}),(0,s.jsx)(i.A,{value:"powershell",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:'$env:DEBUG="pw:api"\ndotnet run\n'})})}),(0,s.jsx)(i.A,{value:"batch",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-batch",children:"set DEBUG=pw:api\ndotnet run\n"})})})]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For WebKit"}),": launching WebKit Inspector during the execution will prevent the Playwright script from executing any further and will reset pre-configured user agent and device emulation."]})}),"\n",(0,s.jsx)(t.h2,{id:"headed-mode",children:"Headed mode"}),"\n",(0,s.jsxs)(t.p,{children:["Playwright runs browsers in headless mode by default. To change this behavior, use ",(0,s.jsx)(t.code,{children:"headless: false"})," as a launch option."]}),"\n",(0,s.jsxs)(t.p,{children:["You can also use the ",(0,s.jsx)(t.code,{children:"slowMo"})," option to slow down execution (by N milliseconds per operation) and follow along while debugging."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"// Chromium, Firefox, or WebKit\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 100\n});\n"})})]})}function g(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);