"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1846],{7087:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var n=s(4848),i=s(8453),a=s(4235),l=s(8328);s(3078);const r={id:"writing-tests",title:"Writing tests"},o=void 0,c={id:"writing-tests",title:"Writing tests",description:"Introduction",source:"@site/docs/writing-tests.mdx",sourceDirName:".",slug:"/writing-tests",permalink:"/dotnet/docs/next/writing-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"writing-tests",title:"Writing tests"},sidebar:"docs",previous:{title:"Installation",permalink:"/dotnet/docs/next/intro"},next:{title:"Generating tests",permalink:"/dotnet/docs/next/codegen-intro"}},d={},h=[{value:"Introduction",id:"introduction",level:2},{value:"First test",id:"first-test",level:2},{value:"Actions",id:"actions",level:2},{value:"Navigation",id:"navigation",level:3},{value:"Interactions",id:"interactions",level:3},{value:"Basic actions",id:"basic-actions",level:3},{value:"Assertions",id:"assertions",level:2},{value:"Test Isolation",id:"test-isolation",level:2},{value:"Using Test Hooks",id:"using-test-hooks",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}];function x(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"Playwright tests are simple, they"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"perform actions"}),", and"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"assert the state"})," against expectations."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["There is no need to wait for anything prior to performing an action: Playwright automatically waits for the wide range of ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/actionability",children:"actionability"})," checks to pass prior to performing each action."]}),"\n",(0,n.jsx)(t.p,{children:"There is also no need to deal with the race conditions when performing the checks - Playwright assertions are designed in a way that they describe the expectations that need to be eventually met."}),"\n",(0,n.jsx)(t.p,{children:"That's it! These design choices allow Playwright users to forget about flaky timeouts and racy checks in their tests altogether."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"You will learn"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/writing-tests#first-test",children:"How to write the first test"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/writing-tests#actions",children:"How to perform actions"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/writing-tests#assertions",children:"How to use assertions"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/writing-tests#test-isolation",children:"How tests run in isolation"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/writing-tests#using-test-hooks",children:"How to use test hooks"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"first-test",children:"First test"}),"\n",(0,n.jsx)(t.p,{children:"Take a look at the following example to see how to write a test."}),"\n",(0,n.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,n.jsx)(l.A,{value:"nunit",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();\n    } \n}\n'})})}),(0,n.jsx)(l.A,{value:"mstest",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();\n    } \n}\n'})})})]}),"\n",(0,n.jsx)(t.h2,{id:"actions",children:"Actions"}),"\n",(0,n.jsx)(t.h3,{id:"navigation",children:"Navigation"}),"\n",(0,n.jsx)(t.p,{children:"Most of the tests will start by navigating the page to a URL. After that, the test will be able to interact with the page elements."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'await Page.GotoAsync("https://playwright.dev");\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Playwright will wait for the page to reach the load state prior to moving forward. Learn more about the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page#page-goto",children:"Page.GotoAsync()"})," options."]}),"\n",(0,n.jsx)(t.h3,{id:"interactions",children:"Interactions"}),"\n",(0,n.jsxs)(t.p,{children:["Performing actions starts with locating the elements. Playwright uses ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/locators",children:"Locators API"})," for that. Locators represent a way to find element(s) on the page at any moment, learn more about the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/locators",children:"different types"})," of locators available. Playwright will wait for the element to be ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/actionability",children:"actionable"})," prior to performing the action, so there is no need to wait for it to become available."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'// Create a locator.\nvar getStarted = Page.GetByRole(AriaRole.Link, new() { Name = "Get started" });\n\n// Click it.\nawait getStarted.ClickAsync();\n'})}),"\n",(0,n.jsx)(t.p,{children:"In most cases, it'll be written in one line:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();\n'})}),"\n",(0,n.jsx)(t.h3,{id:"basic-actions",children:"Basic actions"}),"\n",(0,n.jsxs)(t.p,{children:["This is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator",children:"Locator API"})," section to learn more about them."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-check",children:"Locator.CheckAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Check the input checkbox"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-click",children:"Locator.ClickAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Click the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-uncheck",children:"Locator.UncheckAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Uncheck the input checkbox"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-hover",children:"Locator.HoverAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Hover mouse over the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-fill",children:"Locator.FillAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Fill the form field, input text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-focus",children:"Locator.FocusAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Focus the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-press",children:"Locator.PressAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Press single key"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-set-input-files",children:"Locator.SetInputFilesAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Pick files to upload"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locator#locator-select-option",children:"Locator.SelectOptionAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Select option in the drop down"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"assertions",children:"Assertions"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright provides an async function called ",(0,n.jsx)(t.a,{href:"./test-assertions",children:"Expect"})," to assert and wait until the expected condition is met."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Here is the list of the most popular async assertions. Note that there are ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/test-assertions",children:"many more"})," to get familiar with:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Assertion"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-be-checked",children:"Expect(Locator).ToBeCheckedAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Checkbox is checked"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-be-enabled",children:"Expect(Locator).ToBeEnabledAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Control is enabled"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-be-visible",children:"Expect(Locator).ToBeVisibleAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element is visible"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-contain-text",children:"Expect(Locator).ToContainTextAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element contains text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-have-attribute",children:"Expect(Locator).ToHaveAttributeAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element has attribute"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-have-count",children:"Expect(Locator).ToHaveCountAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"List of elements has given length"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-have-text",children:"Expect(Locator).ToHaveTextAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element matches text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-locatorassertions#locator-assertions-to-have-value",children:"Expect(Locator).ToHaveValueAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Input element has value"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-pageassertions#page-assertions-to-have-title",children:"Expect(Page).ToHaveTitleAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Page has title"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-pageassertions#page-assertions-to-have-url",children:"Expect(Page).ToHaveURLAsync()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Page has URL"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"test-isolation",children:"Test Isolation"}),"\n",(0,n.jsxs)(t.p,{children:["The Playwright NUnit and MSTest test framework base classes will isolate each test from each other by providing a separate ",(0,n.jsx)(t.code,{children:"Page"})," instance. Pages are isolated between tests due to the Browser Context, which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser."]}),"\n",(0,n.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,n.jsx)(l.A,{value:"nunit",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'})})}),(0,n.jsx)(l.A,{value:"mstest",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'})})})]}),"\n",(0,n.jsx)(t.h2,{id:"using-test-hooks",children:"Using Test Hooks"}),"\n",(0,n.jsxs)(t.p,{children:["You can use ",(0,n.jsx)(t.code,{children:"SetUp"}),"/",(0,n.jsx)(t.code,{children:"TearDown"})," in NUnit or ",(0,n.jsx)(t.code,{children:"TestInitialize"}),"/",(0,n.jsx)(t.code,{children:"TestCleanup"})," in MSTest to prepare and clean up your test environment:"]}),"\n",(0,n.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,n.jsx)(l.A,{value:"nunit",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");\n    }\n\n    [SetUp]\n    public async Task SetUp()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'})})}),(0,n.jsx)(l.A,{value:"mstest",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Threading.Tasks;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");\n    }\n\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'})})})]}),"\n",(0,n.jsx)(t.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/running-tests",children:"Run single test, multiple tests, headed mode"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/codegen-intro",children:"Generate tests with Codegen"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/ci-intro",children:"Run tests on CI"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/dotnet/docs/next/test-runners",children:"Learn more about the MSTest and NUnit base classes"})}),"\n"]})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}}}]);