"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7707],{5347:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=s(4848),a=s(8453);s(4235),s(8328),s(3078);const i={id:"api-testing",title:"API \u6e2c\u8a66"},r=void 0,o={id:"api-testing",title:"API \u6e2c\u8a66",description:"\u7c21\u4ecb",source:"@site/versioned_docs/version-stable/api-testing.mdx",sourceDirName:".",slug:"/api-testing",permalink:"/dotnet/docs/api-testing",draft:!1,unlisted:!1,tags:[],version:"stable",frontMatter:{id:"api-testing",title:"API \u6e2c\u8a66"},sidebar:"docs",previous:{title:"\u81ea\u52d5\u7b49\u5f85",permalink:"/dotnet/docs/actionability"},next:{title:"\u65b7\u8a00",permalink:"/dotnet/docs/test-assertions"}},c={},l=[{value:"\u7c21\u4ecb",id:"\u7c21\u4ecb",level:2},{value:"\u64b0\u5beb API \u6e2c\u8a66",id:"\u64b0\u5beb-api-\u6e2c\u8a66",level:2},{value:"\u8a2d\u5b9a",id:"\u8a2d\u5b9a",level:3},{value:"\u64b0\u5beb\u6e2c\u8a66",id:"\u64b0\u5beb\u6e2c\u8a66",level:3},{value:"\u8a2d\u5b9a\u548c\u62c6\u5378",id:"\u8a2d\u5b9a\u548c\u62c6\u5378",level:3},{value:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",id:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",level:3},{value:"\u901a\u904e API \u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",id:"\u901a\u904e-api-\u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",level:2},{value:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",id:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",level:2},{value:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",id:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\u7c21\u4ecb",children:"\u7c21\u4ecb"}),"\n",(0,t.jsxs)(n.p,{children:["Playwright \u53ef\u4ee5\u7528\u4f86\u5b58\u53d6\u4f60\u7684\u61c9\u7528\u7a0b\u5f0f\u7684 ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Representational_state_transfer",children:"REST"})," API\u3002"]}),"\n",(0,t.jsx)(n.p,{children:"\u6709\u6642\u4f60\u53ef\u80fd\u60f3\u76f4\u63a5\u5f9e .NET \u767c\u9001\u8acb\u6c42\u5230\u4f3a\u670d\u5668\uff0c\u800c\u4e0d\u9700\u8981\u8f09\u5165\u9801\u9762\u4e26\u5728\u5176\u4e2d\u57f7\u884c js \u7a0b\u5f0f\u78bc\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u80fd\u6703\u6d3e\u4e0a\u7528\u5834\u7684\u7bc4\u4f8b:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u6e2c\u8a66\u4f60\u7684\u4f3a\u670d\u5668 API\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u5728\u6e2c\u8a66\u4e2d\u8a2a\u554f web \u61c9\u7528\u7a0b\u5f0f\u4e4b\u524d\u6e96\u5099\u4f3a\u670d\u5668\u7aef\u72c0\u614b\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u5728\u700f\u89bd\u5668\u4e2d\u57f7\u884c\u4e00\u4e9b\u64cd\u4f5c\u5f8c\u9a57\u8b49\u4f3a\u670d\u5668\u7aef\u5f8c\u7f6e\u689d\u4ef6\u3002"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u6240\u6709\u9019\u4e9b\u90fd\u53ef\u4ee5\u901a\u904e ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u65b9\u6cd5\u5be6\u73fe\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u4ee5\u4e0b\u7bc4\u4f8b\u4f9d\u8cf4 ",(0,t.jsx)(n.a,{href:"/dotnet/docs/test-runners",children:(0,t.jsx)(n.code,{children:"Microsoft.Playwright.MSTest"})})," \u5957\u4ef6\uff0c\u5b83\u70ba\u6bcf\u500b\u6e2c\u8a66\u5efa\u7acb\u4e00\u500b Playwright \u548c Page \u5be6\u4f8b\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u64b0\u5beb-api-\u6e2c\u8a66",children:"\u64b0\u5beb API \u6e2c\u8a66"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u53ef\u4ee5\u900f\u904e\u7db2\u8def\u767c\u9001\u5404\u7a2e HTTP(S) \u8acb\u6c42\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u4ee5\u4e0b\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Playwright \u6e2c\u8a66\u901a\u904e ",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/rest",children:"GitHub API"})," \u5efa\u7acb\u554f\u984c\u3002\u6e2c\u8a66\u5957\u4ef6\u5c07\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u5132\u5b58\u5eab\u5f8c\u57f7\u884c\u6e2c\u8a66\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u5efa\u7acb\u4e00\u4e9b\u554f\u984c\u4e26\u9a57\u8b49\u4f3a\u670d\u5668\u72c0\u614b\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u57f7\u884c\u6e2c\u8a66\u5f8c\u522a\u9664\u5132\u5b58\u5eab\u3002"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\u8a2d\u5b9a",children:"\u8a2d\u5b9a"}),"\n",(0,t.jsxs)(n.p,{children:["GitHub API \u9700\u8981\u6388\u6b0a\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u70ba\u6240\u6709\u6e2c\u8a66\u8a2d\u5b9a\u4e00\u6b21 token\u3002\u5728\u6b64\u540c\u6642\uff0c\u6211\u5011\u4e5f\u6703\u8a2d\u5b9a ",(0,t.jsx)(n.code,{children:"baseURL"})," \u4f86\u7c21\u5316\u6e2c\u8a66\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>();\n        // We set this header per GitHub guidelines.\n        headers.Add("Accept", "application/vnd.github.v3+json");\n        // Add authorization token to all requests.\n        // Assuming personal access token available in the environment.\n        headers.Add("Authorization", "token " + API_TOKEN);\n\n        Request = await this.Playwright.APIRequest.NewContextAsync(new() {\n            // All requests we send go to this API endpoint.\n            BaseURL = "https://api.github.com",\n            ExtraHTTPHeaders = headers,\n        });\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await Request.DisposeAsync();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u64b0\u5beb\u6e2c\u8a66",children:"\u64b0\u5beb\u6e2c\u8a66"}),"\n",(0,t.jsx)(n.p,{children:"\u73fe\u5728\u6211\u5011\u5df2\u7d93\u521d\u59cb\u5316\u4e86\u8acb\u6c42\u7269\u4ef6\uff0c\u6211\u5011\u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u6e2c\u8a66\uff0c\u9019\u4e9b\u6e2c\u8a66\u5c07\u5728\u5b58\u653e\u5eab\u4e2d\u5efa\u7acb\u65b0\u7684\u554f\u984c\u3002"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = "test";\n    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { "title", "[Bug] report 1" },\n            { "body", "Bug description" }\n        };\n        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty("title", out var title) == true)\n            {\n                if (title.GetString() == "[Bug] report 1")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());\n    }\n\n    [TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { "title", "[Feature] request 1" },\n            { "body", "Feature description" }\n        };\n        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty("title", out var title) == true)\n            {\n                if (title.GetString() == "[Feature] request 1")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());\n    }\n\n    // ...\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u8a2d\u5b9a\u548c\u62c6\u5378",children:"\u8a2d\u5b9a\u548c\u62c6\u5378"}),"\n",(0,t.jsxs)(n.p,{children:["\u9019\u4e9b\u6e2c\u8a66\u5047\u8a2d\u8cc7\u6e90\u5eab\u5df2\u5b58\u5728\u3002\u60a8\u53ef\u80fd\u9700\u8981\u5728\u57f7\u884c\u6e2c\u8a66\u4e4b\u524d\u5efa\u7acb\u4e00\u500b\u65b0\u7684\uff0c\u4e26\u5728\u4e4b\u5f8c\u522a\u9664\u5b83\u3002\u70ba\u6b64\uff0c\u8acb\u4f7f\u7528",(0,t.jsx)(n.code,{children:"[SetUp]"}),"\u548c",(0,t.jsx)(n.code,{children:"[TearDown]"}),"\u9264\u5b50\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    // ...\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync("/user/repos", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                ["name"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b",children:"\u5b8c\u6574\u6e2c\u8a66\u7bc4\u4f8b"}),"\n",(0,t.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u4e00\u500b API \u6e2c\u8a66\u7684\u5b8c\u6574\u7bc4\u4f8b:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System.Text.Json;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class TestGitHubAPI : PlaywrightTest\n{\n    static string REPO = "test-repo-2";\n    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");\n    static string? API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");\n\n    private IAPIRequestContext Request = null!;\n\n    [TestMethod]\n    public async Task ShouldCreateBugReport()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { "title", "[Bug] report 1" },\n            { "body", "Bug description" }\n        };\n        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty("title", out var title) == true)\n            {\n                if (title.GetString() == "[Bug] report 1")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());\n    }\n\n    [TestMethod]\n    public async Task ShouldCreateFeatureRequests()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { "title", "[Feature] request 1" },\n            { "body", "Feature description" }\n        };\n        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");\n        await Expect(newIssue).ToBeOKAsync();\n        var issuesJsonResponse = await issues.JsonAsync();\n\n        JsonElement? issue = null;\n        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())\n        {\n            if (issueObj.TryGetProperty("title", out var title) == true)\n            {\n                if (title.GetString() == "[Feature] request 1")\n                {\n                    issue = issueObj;\n                }\n            }\n        }\n        Assert.IsNotNull(issue);\n        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());\n    }\n\n    [TestInitialize]\n    public async Task SetUpAPITesting()\n    {\n        await CreateAPIRequestContext();\n        await CreateTestRepository();\n    }\n\n    private async Task CreateAPIRequestContext()\n    {\n        var headers = new Dictionary<string, string>\n        {\n            // We set this header per GitHub guidelines.\n            { "Accept", "application/vnd.github.v3+json" },\n            // Add authorization token to all requests.\n            // Assuming personal access token available in the environment.\n            { "Authorization", "token " + API_TOKEN }\n        };\n\n        Request = await Playwright.APIRequest.NewContextAsync(new()\n        {\n            // All requests we send go to this API endpoint.\n            BaseURL = "https://api.github.com",\n            ExtraHTTPHeaders = headers,\n        });\n    }\n\n    private async Task CreateTestRepository()\n    {\n        var resp = await Request.PostAsync("/user/repos", new()\n        {\n            DataObject = new Dictionary<string, string>()\n            {\n                ["name"] = REPO,\n            },\n        });\n        await Expect(resp).ToBeOKAsync();\n    }\n\n    [TestCleanup]\n    public async Task TearDownAPITesting()\n    {\n        await DeleteTestRepository();\n        await Request.DisposeAsync();\n    }\n\n    private async Task DeleteTestRepository()\n    {\n        var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);\n        await Expect(resp).ToBeOKAsync();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u901a\u904e-api-\u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b",children:"\u901a\u904e API \u547c\u53eb\u6e96\u5099\u4f3a\u670d\u5668\u72c0\u614b"}),"\n",(0,t.jsxs)(n.p,{children:["\u4ee5\u4e0b\u6e2c\u8a66\u901a\u904e API \u5efa\u7acb\u4e00\u500b\u65b0\u554f\u984c\uff0c\u7136\u5f8c\u5c0e\u822a\u5230\u5c08\u6848\u4e2d\u6240\u6709\u554f\u984c\u7684\u5217\u8868\uff0c\u4ee5\u6aa2\u67e5\u5b83\u662f\u5426\u51fa\u73fe\u5728\u5217\u8868\u7684\u9802\u90e8\u3002\u6aa2\u67e5\u662f\u4f7f\u7528 ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-locatorassertions",children:"LocatorAssertions"})," \u9032\u884c\u7684\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class TestGitHubAPI : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeFirstInTheList()\n    {\n        var data = new Dictionary<string, string>\n        {\n            { "title", "[Feature] request 1" },\n            { "body", "Feature description" }\n        };\n        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });\n        await Expect(newIssue).ToBeOKAsync();\n\n        // When inheriting from \'PlaywrightTest\' it only gives you a Playwright instance. To get a Page instance, either start\n        // a browser, context, and page manually or inherit from \'PageTest\' which will launch it for you.\n        await Page.GotoAsync("https://github.com/" + USER + "/" + REPO + "/issues");\n        var firstIssue = Page.Locator("a[data-hovercard-type=\'issue\']").First;\n        await Expect(firstIssue).ToHaveTextAsync("[Feature] request 1");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b",children:"\u57f7\u884c\u7528\u6236\u64cd\u4f5c\u5f8c\u6aa2\u67e5\u4f3a\u670d\u5668\u72c0\u614b"}),"\n",(0,t.jsx)(n.p,{children:"\u4ee5\u4e0b\u6e2c\u8a66\u901a\u904e\u700f\u89bd\u5668\u4e2d\u7684\u4f7f\u7528\u8005\u4ecb\u9762\u5efa\u7acb\u4e00\u500b\u65b0\u554f\u984c\uff0c\u7136\u5f8c\u901a\u904e API \u6aa2\u67e5\u662f\u5426\u5df2\u5efa\u7acb:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Make sure to extend from PageTest if you want to use the Page class.\nclass GitHubTests : PageTest\n{\n    [TestMethod]\n    public async Task LastCreatedIssueShouldBeOnTheServer()\n    {\n        await Page.GotoAsync("https://github.com/" + USER + "/" + REPO + "/issues");\n        await Page.Locator("text=New Issue").ClickAsync();\n        await Page.Locator("[aria-label=\'Title\']").FillAsync("Bug report 1");\n        await Page.Locator("[aria-label=\'Comment body\']").FillAsync("Bug description");\n        await Page.Locator("text=Submit new issue").ClickAsync();\n        var issueId = Page.Url.Substring(Page.Url.LastIndexOf(\'/\'));\n\n        var newIssue = await Request.GetAsync("https://github.com/" + USER + "/" + REPO + "/issues/" + issueId);\n        await Expect(newIssue).ToBeOKAsync();\n        StringAssert.Contains(await newIssue.TextAsync(), "Bug report 1");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b",children:"\u91cd\u7528\u8eab\u4efd\u9a57\u8b49\u72c0\u614b"}),"\n",(0,t.jsxs)(n.p,{children:["Web apps \u4f7f\u7528\u57fa\u65bc cookie \u6216\u57fa\u65bc token \u7684\u8eab\u4efd\u9a57\u8b49\uff0c\u5df2\u9a57\u8b49\u7684\u72c0\u614b\u6703\u5132\u5b58\u70ba ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",children:"cookies"}),"\u3002Playwright \u63d0\u4f9b ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-apirequestcontext#api-request-context-storage-state",children:"ApiRequestContext.StorageStateAsync()"})," \u65b9\u6cd5\uff0c\u53ef\u7528\u65bc\u5f9e\u5df2\u9a57\u8b49\u7684 context \u4e2d\u6aa2\u7d22\u5132\u5b58\u72c0\u614b\uff0c\u7136\u5f8c\u4f7f\u7528\u8a72\u72c0\u614b\u5efa\u7acb\u65b0\u7684 context\u3002"]}),"\n",(0,t.jsxs)(n.p,{children:["\u5132\u5b58\u72c0\u614b\u5728 ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," \u548c ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u4e4b\u9593\u662f\u53ef\u4e92\u63db\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u901a\u904e API \u547c\u53eb\u767b\u5165\uff0c\u7136\u5f8c\u5efa\u7acb\u4e00\u500b\u5df2\u7d93\u5305\u542b cookies \u7684\u65b0 context\u3002\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u7247\u6bb5\u5f9e\u5df2\u9a57\u8b49\u7684 ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," \u4e2d\u6aa2\u7d22\u72c0\u614b\uff0c\u4e26\u4f7f\u7528\u8a72\u72c0\u614b\u5efa\u7acb\u4e00\u500b\u65b0\u7684 ",(0,t.jsx)(n.a,{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),"\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'var requestContext = await Playwright.APIRequest.NewContextAsync(new()\n{\n    HttpCredentials = new()\n    {\n        Username = "user",\n        Password = "passwd"\n    },\n});\nawait requestContext.GetAsync("https://api.example.com/login");\n// Save storage state into a variable.\nvar state = await requestContext.StorageStateAsync();\n\n// Create a new context with the saved storage state.\nvar context = await Browser.NewContextAsync(new() { StorageState = state });\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);