"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9630],{2138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(4848),a=t(8453);t(4235),t(8328),t(3078);const s={id:"library",title:"Getting started - Library"},i=void 0,o={id:"library",title:"Getting started - Library",description:"Introduction",source:"@site/docs/library.mdx",sourceDirName:".",slug:"/library",permalink:"/dotnet/docs/next/library",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"library",title:"Getting started - Library"},sidebar:"docs",previous:{title:"Test Runners",permalink:"/dotnet/docs/next/test-runners"},next:{title:"Release notes",permalink:"/dotnet/docs/next/release-notes"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Usage",id:"usage",level:2},{value:"Using Assertions",id:"using-assertions",level:2},{value:"Bundle drivers for different platforms",id:"bundle-drivers-for-different-platforms",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Playwright can either be used with the ",(0,r.jsx)(n.a,{href:"/dotnet/docs/next/test-runners#mstest",children:"MSTest"})," or ",(0,r.jsx)(n.a,{href:"/dotnet/docs/next/test-runners#nunit",children:"NUnit"}),", or as a Playwright Library (this guide). If you are working on an application that utilizes Playwright capabilities or you are using Playwright with another test runner, read on."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"Create a console project and add the Playwright dependency."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create project\ndotnet new console -n PlaywrightDemo\ncd PlaywrightDemo\n\n# Add project dependency\ndotnet add package Microsoft.Playwright\n# Build the project\ndotnet build\n# Install required browsers - replace netX with actual output folder name, e.g. net8.0.\npwsh bin/Debug/netX/playwright.ps1 install\n\n# If the pwsh command does not work (throws TypeNotFound), make sure to use an up-to-date version of PowerShell.\ndotnet tool update --global PowerShell\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"Program.cs"})," that will navigate to ",(0,r.jsx)(n.code,{children:"https://playwright.dev/dotnet"})," and take a screenshot in Chromium."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Playwright;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync("https://playwright.dev/dotnet");\nawait page.ScreenshotAsync(new()\n{\n    Path = "screenshot.png"\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now run it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"dotnet run\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default, Playwright runs the browsers in headless mode. To see the browser UI, pass the ",(0,r.jsx)(n.code,{children:"Headless = false"})," flag while launching the browser. You can also use ",(0,r.jsx)(n.code,{children:"slowMo"})," to slow down execution. Learn more in the debugging tools ",(0,r.jsx)(n.a,{href:"/dotnet/docs/next/debug",children:"section"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"await using var browser = await playwright.Firefox.LaunchAsync(new()\n{\n    Headless = false,\n    SlowMo = 50,\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-assertions",children:"Using Assertions"}),"\n",(0,r.jsx)(n.p,{children:"You can do the following to leverage Playwright's web-first assertions when you are using your own test framework. These will automatically retry until the condition is met, e.g. an element has a certain text or the timeout is reached:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Playwright;\nusing static Microsoft.Playwright.Assertions;\n\n// Change the default 5 seconds timeout if you\'d like.\nSetDefaultExpectTimeout(10_000);\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync();\nvar page = await browser.NewPageAsync();\nawait page.GotoAsync("https://playwright.dev/dotnet");\nawait Expect(page.GetByRole(AriaRole.Link, new() { Name = "Get started" })).ToBeVisibleAsync();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"bundle-drivers-for-different-platforms",children:"Bundle drivers for different platforms"}),"\n",(0,r.jsxs)(n.p,{children:["Playwright by default does bundle only the driver for the .NET publish target runtime. If you want to bundle for additional platforms, you can override this behavior by using either ",(0,r.jsx)(n.code,{children:"all"}),", ",(0,r.jsx)(n.code,{children:"none"})," or ",(0,r.jsx)(n.code,{children:"linux"}),", ",(0,r.jsx)(n.code,{children:"win"}),", ",(0,r.jsx)(n.code,{children:"osx"})," in your project file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n  <PlaywrightPlatform>all</PlaywrightPlatform>\n</PropertyGroup>\n"})}),"\n",(0,r.jsx)(n.p,{children:"or:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n  <PlaywrightPlatform>osx;linux</PlaywrightPlatform>\n</PropertyGroup>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);