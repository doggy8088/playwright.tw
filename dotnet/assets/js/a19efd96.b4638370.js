"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9364],{9027:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=i(4848),t=i(8453);i(4235),i(8328),i(3078);const s={id:"emulation",title:"Emulation"},r=void 0,o={id:"emulation",title:"Emulation",description:"Introduction",source:"@site/docs/emulation.mdx",sourceDirName:".",slug:"/emulation",permalink:"/dotnet/docs/next/emulation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"emulation",title:"Emulation"},sidebar:"docs",previous:{title:"Downloads",permalink:"/dotnet/docs/next/downloads"},next:{title:"Evaluating JavaScript",permalink:"/dotnet/docs/next/evaluating"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Devices",id:"devices",level:2},{value:"Viewport",id:"viewport",level:2},{value:"isMobile",id:"ismobile",level:2},{value:"Locale &amp; Timezone",id:"locale--timezone",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Geolocation",id:"geolocation",level:2},{value:"Color Scheme and Media",id:"color-scheme-and-media",level:2},{value:"User Agent",id:"user-agent",level:2},{value:"Offline",id:"offline",level:2},{value:"JavaScript Enabled",id:"javascript-enabled",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as ",(0,a.jsx)(n.code,{children:'"userAgent"'}),", ",(0,a.jsx)(n.code,{children:'"screenSize"'}),", ",(0,a.jsx)(n.code,{children:'"viewport"'})," and if it ",(0,a.jsx)(n.code,{children:'"hasTouch"'})," enabled. You can also emulate the ",(0,a.jsx)(n.code,{children:'"geolocation"'}),", ",(0,a.jsx)(n.code,{children:'"locale"'})," and ",(0,a.jsx)(n.code,{children:'"timezone"'})," for all tests or for a specific test as well as set the ",(0,a.jsx)(n.code,{children:'"permissions"'})," to show notifications or change the ",(0,a.jsx)(n.code,{children:'"colorScheme"'}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"devices",children:"Devices"}),"\n",(0,a.jsxs)(n.p,{children:["Playwright comes with a ",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json",children:"registry of device parameters"})," using ",(0,a.jsx)(n.a,{href:"/dotnet/docs/next/api/class-playwright#playwright-devices",children:"Playwright.Devices"})," for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.Playwright;\nusing System.Threading.Tasks;\n\nusing var playwright = await Playwright.CreateAsync();\nawait using var browser = await playwright.Chromium.LaunchAsync(new()\n{\n    Headless = false\n});\nvar iphone13 = playwright.Devices["iPhone 13"];\nawait using var context = await browser.NewContextAsync(iphone13);\n'})}),"\n",(0,a.jsx)("img",{width:"458",alt:"playwright.dev website emulated for iPhone 13",src:"https://user-images.githubusercontent.com/13063165/220411073-76fe59f9-9a2d-463d-8e30-c19a7deca133.png"}),"\n",(0,a.jsx)(n.h2,{id:"viewport",children:"Viewport"}),"\n",(0,a.jsxs)(n.p,{children:["The viewport is included in the device but you can override it for some tests with ",(0,a.jsx)(n.a,{href:"/dotnet/docs/next/api/class-page#page-set-viewport-size",children:"Page.SetViewportSizeAsync()"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Test file:"}),"\n",(0,a.jsx)(n.p,{children:"The same works inside a test file."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Create context with given viewport\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 1280, Height = 1024 }\n});\n\n// Resize viewport for individual page\nawait page.SetViewportSizeAsync(1600, 1200);\n\n// Emulate high-DPI\nawait using var context = await browser.NewContextAsync(new()\n{\n    ViewportSize = new ViewportSize() { Width = 2560, Height = 1440 },\n    DeviceScaleFactor = 2\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"ismobile",children:"isMobile"}),"\n",(0,a.jsx)(n.p,{children:"Whether the meta viewport tag is taken into account and touch events are enabled."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"await using var context = await browser.NewContextAsync(new()\n{\n    IsMobile = false\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"locale--timezone",children:"Locale & Timezone"}),"\n",(0,a.jsx)(n.p,{children:"Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'await using var context = await browser.NewContextAsync(new()\n{\n    Locale = "de-DE",\n    TimezoneId = "Europe/Berlin"\n});\n'})}),"\n",(0,a.jsx)("img",{width:"1394",alt:"Bing in german lang and timezone",src:"https://user-images.githubusercontent.com/13063165/220416571-ccc96ab1-44bb-4579-8430-64502fc24a15.png"}),"\n",(0,a.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,a.jsx)(n.p,{children:"Allow app to show system notifications."}),"\n",(0,a.jsx)(n.p,{children:"Allow notifications for a specific domain."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'await context.GrantPermissionsAsync(new[] { "notifications" }, origin: "https://skype.com");\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Revoke all permissions with ",(0,a.jsx)(n.a,{href:"/dotnet/docs/next/api/class-browsercontext#browser-context-clear-permissions",children:"BrowserContext.ClearPermissionsAsync()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"await context.ClearPermissionsAsync();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"geolocation",children:"Geolocation"}),"\n",(0,a.jsxs)(n.p,{children:["Grant ",(0,a.jsx)(n.code,{children:'"geolocation"'})," permissions and set geolocation to a specific area."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'await using var context = await browser.NewContextAsync(new()\n{\n    Permissions = new[] { "geolocation" },\n    Geolocation = new Geolocation() { Longitude = 41.890221, Latitude = 12.492348 }\n});\n'})}),"\n",(0,a.jsx)("img",{width:"1394",alt:"geolocation for italy on bing maps",src:"https://user-images.githubusercontent.com/13063165/220417670-bb22d815-f5cd-47c4-8562-0b88165eac27.png"}),"\n",(0,a.jsx)(n.p,{children:"Change the location later:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"await context.SetGeolocationAsync(new Geolocation() { Longitude = 48.858455, Latitude = 2.294474 });\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note"})," you can only change geolocation for all pages in the context."]}),"\n",(0,a.jsx)(n.h2,{id:"color-scheme-and-media",children:"Color Scheme and Media"}),"\n",(0,a.jsxs)(n.p,{children:["Emulate the users ",(0,a.jsx)(n.code,{children:'"colorScheme"'}),". Supported values are 'light', 'dark', 'no-preference'. You can also emulate the media type with ",(0,a.jsx)(n.a,{href:"/dotnet/docs/next/api/class-page#page-emulate-media",children:"Page.EmulateMediaAsync()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Create context with dark mode\nawait using var context = await browser.NewContextAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Create page with dark mode\nvar page = await browser.NewPageAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change color scheme for the page\nawait page.EmulateMediaAsync(new()\n{\n    ColorScheme = ColorScheme.Dark\n});\n\n// Change media for page\nawait page.EmulateMediaAsync(new()\n{\n    Media = Media.Print\n});\n"})}),"\n",(0,a.jsx)("img",{width:"1394",alt:"playwright web in dark mode",src:"https://user-images.githubusercontent.com/13063165/220411638-55d2b051-4678-4da7-9f0b-ed22f5a3c47c.png"}),"\n",(0,a.jsx)(n.h2,{id:"user-agent",children:"User Agent"}),"\n",(0,a.jsxs)(n.p,{children:["The User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the ",(0,a.jsx)(n.code,{children:"userAgent"})," property."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var context = await browser.NewContextAsync(new() { UserAgent = "My User Agent" });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"offline",children:"Offline"}),"\n",(0,a.jsx)(n.p,{children:"Emulate the network being offline."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"var context = await browser.NewContextAsync(new() { Offline = true });\n"})}),"\n",(0,a.jsx)(n.h2,{id:"javascript-enabled",children:"JavaScript Enabled"}),"\n",(0,a.jsx)(n.p,{children:"Emulate a user scenario where JavaScript is disabled."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"var context = await browser.NewContextAsync(new() { JavaScriptEnabled = false });\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);