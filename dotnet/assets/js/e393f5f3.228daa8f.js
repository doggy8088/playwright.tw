"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[641],{3458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(4848),s=n(8453);n(4235),n(8328),n(3078);const o={id:"ci-intro",title:"Setting up CI"},r=void 0,a={id:"ci-intro",title:"Setting up CI",description:"Introduction",source:"@site/docs/ci-intro.mdx",sourceDirName:".",slug:"/ci-intro",permalink:"/dotnet/docs/next/ci-intro",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"ci-intro",title:"Setting up CI"},sidebar:"docs",previous:{title:"Trace viewer",permalink:"/dotnet/docs/next/trace-viewer-intro"},next:{title:"Test Runners",permalink:"/dotnet/docs/next/test-runners"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"You will learn",id:"you-will-learn",level:4},{value:"Setting up GitHub Actions",id:"setting-up-github-actions",level:2},{value:"Create a Repo and Push to GitHub",id:"create-a-repo-and-push-to-github",level:2},{value:"Opening the Workflows",id:"opening-the-workflows",level:2},{value:"Viewing Test Logs",id:"viewing-test-logs",level:2},{value:"Viewing the Trace",id:"viewing-the-trace",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",h6:"h6",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"Playwright tests can be ran on any CI provider. In this section we will cover running tests on GitHub using GitHub actions. If you would like to see how to configure other CI providers check out our detailed doc on Continuous Integration."}),"\n",(0,i.jsx)(t.h4,{id:"you-will-learn",children:"You will learn"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/ci-intro#setting-up-github-actions",children:"How to set up GitHub Actions"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/ci-intro#viewing-test-logs",children:"How to view test logs"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/ci-intro#viewing-the-trace",children:"How to view the trace"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"setting-up-github-actions",children:"Setting up GitHub Actions"}),"\n",(0,i.jsxs)(t.p,{children:["To add a ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/actions",children:"GitHub Actions"})," file first create ",(0,i.jsx)(t.code,{children:".github/workflows"})," folder and inside it add a ",(0,i.jsx)(t.code,{children:"playwright.yml"})," file containing the example code below so that your tests will run on each push and pull request for the main/master branch."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yml",metastring:'title=".github/workflows/playwright.yml"',children:"name: Playwright Tests\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\njobs:\n  test:\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v4\n      with:\n        dotnet-version: 8.0.x\n    - name: Build & Install\n      run: dotnet build\n    - name: Ensure browsers are installed\n      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps\n    - name: Run your tests\n      run: dotnet test\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To learn more about this, see ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions",children:'"Understanding GitHub Actions"'}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Looking at the list of steps in ",(0,i.jsx)(t.code,{children:"jobs.test.steps"}),", you can see that the workflow performs these steps:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Clone your repository 2. Install language dependencies 3. Install project dependencies and build 4. Install Playwright Browsers 5. Run tests"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"create-a-repo-and-push-to-github",children:"Create a Repo and Push to GitHub"}),"\n",(0,i.jsxs)(t.p,{children:["Once you have your ",(0,i.jsx)(t.a,{href:"#setting-up-github-actions",children:"GitHub actions workflow"})," setup then all you need to do is ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/get-started/quickstart/create-a-repo",children:"Create a repo on GitHub"})," or push your code to an existing repository. Follow the instructions on GitHub and don't forget to ",(0,i.jsx)(t.a,{href:"https://github.com/git-guides/git-init",children:"initialize a git repository"})," using the ",(0,i.jsx)(t.code,{children:"git init"})," command so you can ",(0,i.jsx)(t.a,{href:"https://github.com/git-guides/git-add",children:"add"}),", ",(0,i.jsx)(t.a,{href:"https://github.com/git-guides/git-commit",children:"commit"})," and ",(0,i.jsx)(t.a,{href:"https://github.com/git-guides/git-push",children:"push"})," your code."]}),"\n",(0,i.jsx)(t.h6,{id:""}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/microsoft/playwright/assets/13063165/4f1b4cc3-b850-4d60-a99e-24057eaf91ad",alt:"dotnet repo on github"})}),"\n",(0,i.jsx)(t.h2,{id:"opening-the-workflows",children:"Opening the Workflows"}),"\n",(0,i.jsxs)(t.p,{children:["Click on the ",(0,i.jsx)(t.strong,{children:"Actions"})," tab to see the workflows. Here you will see if your tests have passed or failed."]}),"\n",(0,i.jsx)(t.h6,{id:"-1"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/microsoft/playwright/assets/13063165/71793c09-0815-4faa-866b-85684a1f87e5",alt:"opening the workflow"})}),"\n",(0,i.jsxs)(t.p,{children:["On Pull Requests you can also click on the ",(0,i.jsx)(t.strong,{children:"Details"})," link in the ",(0,i.jsx)(t.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks",children:"PR status check"}),"."]}),"\n",(0,i.jsx)("img",{width:"645",alt:"pr status checked",src:"https://user-images.githubusercontent.com/13063165/183722462-17a985db-0e10-4205-b16c-8aaac36117b9.png"}),"\n",(0,i.jsx)(t.h2,{id:"viewing-test-logs",children:"Viewing Test Logs"}),"\n",(0,i.jsxs)(t.p,{children:["Clicking on the workflow run will show you the all the actions that GitHub performed and clicking on ",(0,i.jsx)(t.strong,{children:"Run Playwright tests"})," will show the error messages, what was expected and what was received as well as the call log."]}),"\n",(0,i.jsx)(t.h6,{id:"-2"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/microsoft/playwright/assets/13063165/ba2d8d7b-ffce-42de-95e0-bcb35c421975",alt:"viewing the test logs"})}),"\n",(0,i.jsx)(t.h2,{id:"viewing-the-trace",children:"Viewing the Trace"}),"\n",(0,i.jsxs)(t.p,{children:["You can upload Traces which get created on your CI like GitHub Actions as artifacts. This requires ",(0,i.jsx)(t.a,{href:"./trace-viewer-intro#recording-a-trace",children:"starting and stopping the trace"}),". We recommend only recording traces for failing tests. Once your traces have been uploaded to CI, they can then be downloaded and opened using ",(0,i.jsx)(t.a,{href:"https://trace.playwright.dev",children:"trace.playwright.dev"}),", which is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop."]}),"\n",(0,i.jsx)(t.h6,{id:"-3"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/microsoft/playwright/assets/13063165/84150084-5019-470a-8449-b61d206bfbb0",alt:"playwright trace viewer"})}),"\n",(0,i.jsx)(t.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/locators",children:"Learn how to use Locators"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/input",children:"Learn how to perform Actions"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/test-assertions",children:"Learn how to write Assertions"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/trace-viewer",children:"Learn more about the Trace Viewer"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/dotnet/docs/next/ci",children:"Learn more ways of running tests on GitHub Actions"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/dotnet/docs/next/ci#github-actions",children:"Learn more about running tests on other CI providers"})," // TODO: is this link correct?"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);