"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6],{9945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(4848),s=n(8453);n(4235),n(8328),n(3078);const r={id:"webview2",title:"WebView2"},o=void 0,a={id:"webview2",title:"WebView2",description:"Introduction",source:"@site/docs/webview2.mdx",sourceDirName:".",slug:"/webview2",permalink:"/dotnet/docs/next/webview2",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"webview2",title:"WebView2"},sidebar:"docs",previous:{title:"Videos",permalink:"/dotnet/docs/next/videos"},next:{title:"Docker",permalink:"/dotnet/docs/next/docker"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Overview",id:"overview",level:2},{value:"Writing and running tests",id:"writing-and-running-tests",level:2},{value:"Debugging",id:"debugging",level:2}];function w(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["The following will explain how to use Playwright with ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/microsoft-edge/webview2/",children:"Microsoft Edge WebView2"}),". WebView2 is a WinForms control, which will use Microsoft Edge under the hood to render web content. It is a part of the Microsoft Edge browser and is available on Windows 10 and Windows 11. Playwright can be used to automate WebView2 applications and can be used to test web content in WebView2. For connecting to WebView2, Playwright uses ",(0,i.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsertype#browser-type-connect-over-cdp",children:"BrowserType.ConnectOverCDPAsync()"})," which connects to it via the Chrome DevTools Protocol (CDP)."]}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["A WebView2 control can be instructed to listen to incoming CDP connections by setting either the ",(0,i.jsx)(t.code,{children:"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS"})," environment variable with ",(0,i.jsx)(t.code,{children:"--remote-debugging-port=9222"})," or calling ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22",children:"EnsureCoreWebView2Async"})," with the ",(0,i.jsx)(t.code,{children:"--remote-debugging-port=9222"})," argument. This will start the WebView2 process with the Chrome DevTools Protocol enabled which allows the automation by Playwright. 9222 is an example port in this case, but any other unused port can be used as well."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()\n{\n  AdditionalBrowserArguments = "--remote-debugging-port=9222",\n})).ConfigureAwait(false);\n'})}),"\n",(0,i.jsx)(t.p,{children:"Once your application with the WebView2 control is running, you can connect to it via Playwright:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'var browser = await playwright.Chromium.ConnectOverCDPAsync("http://localhost:9222");\nvar context = browser.Contexts[0];\nvar page = context.Pages[0];\n'})}),"\n",(0,i.jsxs)(t.p,{children:["To ensure that the WebView2 control is ready, you can wait for the ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.corewebview2initializationcompleted?view=webview2-dotnet-1.0.1343.22",children:(0,i.jsx)(t.code,{children:"CoreWebView2InitializationCompleted"})})," event:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'this.webView.CoreWebView2InitializationCompleted += (_, e) =>\n{\n    if (e.IsSuccess)\n    {\n        Console.WriteLine("WebView2 initialized");\n    }\n};\n'})}),"\n",(0,i.jsx)(t.h2,{id:"writing-and-running-tests",children:"Writing and running tests"}),"\n",(0,i.jsxs)(t.p,{children:["By default, the WebView2 control will use the same user data directory for all instances. This means that if you run multiple tests in parallel, they will interfere with each other. To avoid this, you should set the ",(0,i.jsx)(t.code,{children:"WEBVIEW2_USER_DATA_FOLDER"})," environment variable (or use ",(0,i.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.wpf.webview2.ensurecorewebview2async?view=webview2-dotnet-1.0.1343.22",children:"WebView2.EnsureCoreWebView2Async Method"}),") to a different folder for each test. This will make sure that each test runs in its own user data directory."]}),"\n",(0,i.jsxs)(t.p,{children:["Using the following, Playwright will run your WebView2 application as a sub-process, assign a unique user data directory to it and provide the ",(0,i.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page",title:"Page",children:"Page"})," instance to your test:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// WebView2Test.cs\nusing System.Diagnostics;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PlaywrightTest\n{\n    public IBrowser Browser { get; internal set; } = null!;\n    public IBrowserContext Context { get; internal set; } = null!;\n    public IPage Page { get; internal set; } = null!;\n    private Process? _webView2Process = null;\n    private string _userDataDir = null!;\n    private string _executablePath = Path.Join(Directory.GetCurrentDirectory(), @"..\\..\\..\\..\\webview2-app\\bin\\Debug\\net8.0-windows\\webview2.exe");\n\n    [TestInitialize]\n    public async Task BrowserTestInitialize()\n    {\n        var cdpPort = 10000 + WorkerIndex;\n        Assert.IsTrue(File.Exists(_executablePath), "Make sure that the executable exists");\n        _userDataDir = Path.Join(Path.GetTempPath(), $"playwright-webview2-tests/user-data-dir-{WorkerIndex}");\n        // WebView2 does some lazy cleanups on shutdown so we can\'t clean it up after each test\n        if (Directory.Exists(_userDataDir))\n        {\n            Directory.Delete(_userDataDir, true);\n        }\n        _webView2Process = Process.Start(new ProcessStartInfo(_executablePath)\n        {\n            EnvironmentVariables =\n        {\n            ["WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS"] = $"--remote-debugging-port={cdpPort}",\n            ["WEBVIEW2_USER_DATA_FOLDER"] = _userDataDir,\n        },\n            RedirectStandardOutput = true,\n        });\n        while (!_webView2Process!.HasExited)\n        {\n            var output = await _webView2Process!.StandardOutput.ReadLineAsync();\n            if (_webView2Process!.HasExited)\n            {\n                throw new Exception("WebView2 process exited unexpectedly");\n            }\n            if (output != null && output.Contains("WebView2 initialized"))\n            {\n                break;\n            }\n        }\n        var cdpAddress = $"http://127.0.0.1:{cdpPort}";\n        Browser = await Playwright.Chromium.ConnectOverCDPAsync(cdpAddress);\n        Context = Browser.Contexts[0];\n        Page = Context.Pages[0];\n    }\n\n    [TestCleanup]\n    public async Task BrowserTestCleanup()\n    {\n        _webView2Process!.Kill(true);\n        await Browser.CloseAsync();\n    }\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// UnitTest1.cs\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : WebView2Test\n{\n    [TestMethod]\n    public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n        var getStarted = Page.GetByText("Get Started");\n        await Expect(getStarted).ToBeVisibleAsync();\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsxs)(t.p,{children:['Inside your webview2 control, you can just right-click to open the context menu and select "Inspect" to open the DevTools or press ',(0,i.jsx)("kbd",{children:"F12"}),". You can also use the ",(0,i.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.opendevtoolswindow?view=webview2-dotnet-1.0.1462.37",children:"WebView2.CoreWebView2.OpenDevToolsWindow"})," method to open the DevTools programmatically."]}),"\n",(0,i.jsxs)(t.p,{children:["For debugging tests, see the Playwright ",(0,i.jsx)(t.a,{href:"./debug",children:"Debugging guide"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}}}]);