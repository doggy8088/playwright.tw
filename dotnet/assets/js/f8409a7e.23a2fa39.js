"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6903],{4505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var s=t(4848),i=t(8453),a=t(4235),l=t(8328);t(3078);const r={id:"intro",title:"Installation"},o=void 0,d={id:"intro",title:"Installation",description:"Introduction",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/dotnet/docs/next/intro",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"intro",title:"Installation"},sidebar:"docs",next:{title:"Writing tests",permalink:"/dotnet/docs/next/writing-tests"}},c={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Add Example Tests",id:"add-example-tests",level:2},{value:"Running the Example Tests",id:"running-the-example-tests",level:2},{value:"System requirements",id:"system-requirements",level:2},{value:"What&#39;s next",id:"whats-next",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation."}),"\n",(0,s.jsxs)(n.p,{children:["You can choose to use ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/test-runners#mstest",children:"MSTest base classes"})," or ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/test-runners#nunit",children:"NUnit base classes"})," that Playwright provides to write end-to-end tests. These classes support running tests on multiple browser engines, parallelizing tests, adjusting launch/context options and getting a ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/api/class-page",title:"Page",children:"Page"}),"/",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," instance per test out of the box. Alternatively you can use the ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/library",children:"library"})," to manually write the testing infrastructure."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Start by creating a new project with ",(0,s.jsx)(n.code,{children:"dotnet new"}),". This will create the ",(0,s.jsx)(n.code,{children:"PlaywrightTests"})," directory which includes a ",(0,s.jsx)(n.code,{children:"UnitTest1.cs"})," file:"]}),"\n"]}),"\n",(0,s.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,s.jsx)(l.A,{value:"nunit",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet new nunit -n PlaywrightTests\ncd PlaywrightTests\n"})})}),(0,s.jsx)(l.A,{value:"mstest",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet new mstest -n PlaywrightTests\ncd PlaywrightTests\n"})})})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Install the necessary Playwright dependencies:"}),"\n"]}),"\n",(0,s.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,s.jsx)(l.A,{value:"nunit",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package Microsoft.Playwright.NUnit\n"})})}),(0,s.jsx)(l.A,{value:"mstest",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package Microsoft.Playwright.MSTest\n"})})})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Build the project so the ",(0,s.jsx)(n.code,{children:"playwright.ps1"})," is available inside the ",(0,s.jsx)(n.code,{children:"bin"})," directory:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet build\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Install required browsers. This example uses ",(0,s.jsx)(n.code,{children:"net8.0"}),", if you are using a different version of .NET you will need to adjust the command and change ",(0,s.jsx)(n.code,{children:"net8.0"})," to your version."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pwsh bin/Debug/net8.0/playwright.ps1 install\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"pwsh"})," is not available, you will have to ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/powershell/scripting/install/installing-powershell",children:"install PowerShell"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"add-example-tests",children:"Add Example Tests"}),"\n",(0,s.jsxs)(n.p,{children:["Edit the ",(0,s.jsx)(n.code,{children:"UnitTest1.cs"})," file with the code below to create an example end-to-end test:"]}),"\n",(0,s.jsxs)(a.A,{groupId:"test-runners",defaultValue:"mstest",values:[{label:"MSTest",value:"mstest"},{label:"NUnit",value:"nunit"}],children:[(0,s.jsx)(l.A,{value:"nunit",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class ExampleTest : PageTest\n{\n    [Test]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n    }\n\n    [Test]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();\n    } \n}\n'})})}),(0,s.jsx)(l.A,{value:"mstest",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="UnitTest1.cs"',children:'using System.Text.RegularExpressions;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task HasTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n    }\n\n    [TestMethod]\n    public async Task GetStartedLink()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Click the get started link.\n        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();\n\n        // Expects page to have a heading with the name of Installation.\n        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();\n    } \n}\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"running-the-example-tests",children:"Running the Example Tests"}),"\n",(0,s.jsxs)(n.p,{children:["By default tests will be run on Chromium. This can be configured via the ",(0,s.jsx)(n.code,{children:"BROWSER"})," environment variable, or by adjusting the ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/running-tests",children:"launch configuration options"}),". Tests are run in headless mode meaning no browser will open up when running the tests. Results of the tests and test logs will be shown in the terminal."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet test\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See our doc on ",(0,s.jsx)(n.a,{href:"/dotnet/docs/next/running-tests",children:"Running and Debugging Tests"})," to learn more about running tests in headed mode, running multiple tests, running specific configurations etc."]}),"\n",(0,s.jsx)(n.h2,{id:"system-requirements",children:"System requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Playwright is distributed as a .NET Standard 2.0 library. We recommend .NET 8."}),"\n",(0,s.jsx)(n.li,{children:"Windows 10+, Windows Server 2016+ or Windows Subsystem for Linux (WSL)."}),"\n",(0,s.jsx)(n.li,{children:"macOS 13 Ventura, or macOS 14 Sonoma."}),"\n",(0,s.jsx)(n.li,{children:"Debian 11, Debian 12, Ubuntu 20.04 or Ubuntu 22.04, Ubuntu 24.04, on x86-64 and arm64 architecture."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"whats-next",children:"What's next"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/writing-tests",children:"Write tests using web first assertions, page fixtures and locators"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/running-tests",children:"Run single test, multiple tests, headed mode"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/codegen-intro",children:"Generate tests with Codegen"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/ci-intro",children:"Run tests on CI"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dotnet/docs/next/test-runners",children:"Learn more about the MSTest and NUnit base classes"})}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);