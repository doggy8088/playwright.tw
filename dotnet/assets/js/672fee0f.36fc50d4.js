"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2910],{5453:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=s(4848),i=s(8453);s(4235),s(8328),s(3078);const r={id:"test-runners",title:"Test Runners"},o=void 0,a={id:"test-runners",title:"Test Runners",description:"Introduction",source:"@site/docs/test-runners.mdx",sourceDirName:".",slug:"/test-runners",permalink:"/dotnet/docs/next/test-runners",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"test-runners",title:"Test Runners"},sidebar:"docs",previous:{title:"Setting up CI",permalink:"/dotnet/docs/next/ci-intro"},next:{title:"Getting started - Library",permalink:"/dotnet/docs/next/library"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"MSTest",id:"mstest",level:2},{value:"Running MSTest tests in Parallel",id:"running-mstest-tests-in-parallel",level:3},{value:"Customizing BrowserContext options",id:"customizing-browsercontext-options",level:3},{value:"Customizing Browser/launch options",id:"customizing-browserlaunch-options",level:3},{value:"Using Verbose API Logs",id:"using-verbose-api-logs",level:3},{value:"Using the .runsettings file",id:"using-the-runsettings-file",level:3},{value:"Base MSTest classes for Playwright",id:"base-mstest-classes-for-playwright",level:3},{value:"NUnit",id:"nunit",level:2},{value:"Running NUnit tests in Parallel",id:"running-nunit-tests-in-parallel",level:3},{value:"Customizing BrowserContext options",id:"customizing-browsercontext-options-1",level:3},{value:"Customizing Browser/launch options",id:"customizing-browserlaunch-options-1",level:3},{value:"Using Verbose API Logs",id:"using-verbose-api-logs-1",level:3},{value:"Using the .runsettings file",id:"using-the-runsettings-file-1",level:3},{value:"Base NUnit classes for Playwright",id:"base-nunit-classes-for-playwright",level:3},{value:"xUnit support",id:"xunit-support",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["While Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience the easiest way of getting started is by using the base classes we provide for ",(0,n.jsx)(t.a,{href:"#mstest",children:"MSTest"})," and ",(0,n.jsx)(t.a,{href:"#nunit",children:"NUnit"}),". These classes support running tests on multiple browser engines, adjusting launch/context options and getting a ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page",title:"Page",children:"Page"}),"/",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," instance per test out of the box."]}),"\n",(0,n.jsx)(t.p,{children:"Playwright and Browser instances will be reused between tests for better performance. We recommend running each test case in a new BrowserContext, this way browser state will be isolated between the tests."}),"\n",(0,n.jsx)(t.h2,{id:"mstest",children:"MSTest"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright provides base classes to write tests with MSTest via the ",(0,n.jsx)(t.a,{href:"https://www.nuget.org/packages/Microsoft.Playwright.MSTest",children:(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest"})})," package."]}),"\n",(0,n.jsxs)(t.p,{children:["Check out the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/intro",children:"installation guide"})," to get started."]}),"\n",(0,n.jsx)(t.h3,{id:"running-mstest-tests-in-parallel",children:"Running MSTest tests in Parallel"}),"\n",(0,n.jsxs)(t.p,{children:["By default MSTest will run all classes in parallel, while running tests inside each class sequentially (",(0,n.jsx)(t.code,{children:"ExecutionScope.ClassLevel"}),"). It will create as many processes as there are cores on the host system. You can adjust this behavior by using the following CLI parameter or using a ",(0,n.jsx)(t.code,{children:".runsettings"})," file, see below. Running tests in parallel at the method level (",(0,n.jsx)(t.code,{children:"ExecutionScope.MethodLevel"}),") is not supported."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"dotnet test --settings:.runsettings -- MSTest.Parallelize.Workers=4\n"})}),"\n",(0,n.jsxs)(t.h3,{id:"customizing-browsercontext-options",children:["Customizing ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," options"]}),"\n",(0,n.jsxs)(t.p,{children:["To customize context options, you can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method of your test class derived from ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest.PageTest"})," or ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest.ContextTest"}),". See the following example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class ExampleTest : PageTest\n{\n    [TestMethod]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync("/login");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = "https://github.com",\n        };\n    }\n}\n\n'})}),"\n",(0,n.jsxs)(t.h3,{id:"customizing-browserlaunch-options",children:["Customizing ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser",title:"Browser",children:"Browser"}),"/launch options"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser",title:"Browser",children:"Browser"}),"/launch options can be overridden either using a run settings file or by setting the run settings options directly via the CLI. See the following example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"dotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge\n"})}),"\n",(0,n.jsx)(t.h3,{id:"using-verbose-api-logs",children:"Using Verbose API Logs"}),"\n",(0,n.jsxs)(t.p,{children:["When you have enabled the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/debug#verbose-api-logs",children:"verbose API log"}),", via the ",(0,n.jsx)(t.code,{children:"DEBUG"})," environment variable, you will see the messages in the standard error stream. In MSTest, within Visual Studio, that will be the ",(0,n.jsx)(t.code,{children:"Tests"})," pane of the ",(0,n.jsx)(t.code,{children:"Output"})," window. It will also be displayed in the ",(0,n.jsx)(t.code,{children:"Test Log"})," for each test."]}),"\n",(0,n.jsx)(t.h3,{id:"using-the-runsettings-file",children:"Using the .runsettings file"}),"\n",(0,n.jsxs)(t.p,{children:["When running tests from Visual Studio, you can take advantage of the ",(0,n.jsx)(t.code,{children:".runsettings"})," file. The following shows a reference of the supported values."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, to specify the number of workers, you can use ",(0,n.jsx)(t.code,{children:"MSTest.Parallelize.Workers"}),". You can also enable ",(0,n.jsx)(t.code,{children:"DEBUG"})," logs using ",(0,n.jsx)(t.code,{children:"RunConfiguration.EnvironmentVariables"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"<RunSettings>\n  \x3c!-- MSTest adapter --\x3e  \n  <MSTest>\n    <Parallelize>\n      <Workers>4</Workers>\n      <Scope>ClassLevel</Scope>\n    </Parallelize>\n  </MSTest>\n  \x3c!-- General run configuration --\x3e\n  <RunConfiguration>\n    <EnvironmentVariables>\n      \x3c!-- For debugging selectors, it's recommend to set the following environment variable --\x3e\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  \x3c!-- Playwright --\x3e  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n"})}),"\n",(0,n.jsx)(t.h3,{id:"base-mstest-classes-for-playwright",children:"Base MSTest classes for Playwright"}),"\n",(0,n.jsxs)(t.p,{children:["There are a few base classes available to you in ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest"})," namespace:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Test"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PageTest"}),(0,n.jsxs)(t.td,{children:["Each test gets a fresh copy of a web ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page",title:"Page",children:"Page"})," created in its own unique ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),". Extending this class is the simplest way of writing a fully-functional Playwright test.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note: You can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method in each test file to control context options, the ones typically passed into the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser#browser-new-context",children:"Browser.NewContextAsync()"})," method. That way you can specify all kinds of emulation options for your test file individually."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ContextTest"}),(0,n.jsxs)(t.td,{children:["Each test will get a fresh copy of a ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),". You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note: You can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method in each test file to control context options, the ones typically passed into the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser#browser-new-context",children:"Browser.NewContextAsync()"})," method. That way you can specify all kinds of emulation options for your test file individually."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BrowserTest"}),(0,n.jsx)(t.td,{children:"Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PlaywrightTest"}),(0,n.jsx)(t.td,{children:"This gives each test a Playwright object so that the test could start and stop as many browsers as it likes."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"nunit",children:"NUnit"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright provides base classes to write tests with NUnit via the ",(0,n.jsx)(t.a,{href:"https://www.nuget.org/packages/Microsoft.Playwright.NUnit",children:(0,n.jsx)(t.code,{children:"Microsoft.Playwright.NUnit"})})," package."]}),"\n",(0,n.jsxs)(t.p,{children:["Check out the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/intro",children:"installation guide"})," to get started."]}),"\n",(0,n.jsx)(t.h3,{id:"running-nunit-tests-in-parallel",children:"Running NUnit tests in Parallel"}),"\n",(0,n.jsxs)(t.p,{children:["By default NUnit will run all test files in parallel, while running tests inside each file sequentially (",(0,n.jsx)(t.code,{children:"ParallelScope.Self"}),"). It will create as many processes as there are cores on the host system. You can adjust this behavior using the NUnit.NumberOfTestWorkers parameter. Only ",(0,n.jsx)(t.code,{children:"ParallelScope.Self"})," is supported."]}),"\n",(0,n.jsx)(t.p,{children:"For CPU-bound tests, we recommend using as many workers as there are cores on your system, divided by 2. For IO-bound tests you can use as many workers as you have cores."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"dotnet test -- NUnit.NumberOfTestWorkers=5\n"})}),"\n",(0,n.jsxs)(t.h3,{id:"customizing-browsercontext-options-1",children:["Customizing ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"})," options"]}),"\n",(0,n.jsxs)(t.p,{children:["To customize context options, you can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method of your test class derived from ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest.PageTest"})," or ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.MSTest.ContextTest"}),". See the following example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class MyTest : PageTest\n{\n    [Test]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync("/login");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = "https://github.com",\n        };\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.h3,{id:"customizing-browserlaunch-options-1",children:["Customizing ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser",title:"Browser",children:"Browser"}),"/launch options"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser",title:"Browser",children:"Browser"}),"/launch options can be overridden either using a run settings file or by setting the run settings options directly via the CLI. See the following example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"dotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge\n"})}),"\n",(0,n.jsx)(t.h3,{id:"using-verbose-api-logs-1",children:"Using Verbose API Logs"}),"\n",(0,n.jsxs)(t.p,{children:["When you have enabled the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/debug#verbose-api-logs",children:"verbose API log"}),", via the ",(0,n.jsx)(t.code,{children:"DEBUG"})," environment variable, you will see the messages in the standard error stream. In NUnit, within Visual Studio, that will be the ",(0,n.jsx)(t.code,{children:"Tests"})," pane of the ",(0,n.jsx)(t.code,{children:"Output"})," window. It will also be displayed in the ",(0,n.jsx)(t.code,{children:"Test Log"})," for each test."]}),"\n",(0,n.jsx)(t.h3,{id:"using-the-runsettings-file-1",children:"Using the .runsettings file"}),"\n",(0,n.jsxs)(t.p,{children:["When running tests from Visual Studio, you can take advantage of the ",(0,n.jsx)(t.code,{children:".runsettings"})," file. The following shows a reference of the supported values."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, to specify the amount of workers you can use ",(0,n.jsx)(t.code,{children:"NUnit.NumberOfTestWorkers"})," or to enable ",(0,n.jsx)(t.code,{children:"DEBUG"})," logs ",(0,n.jsx)(t.code,{children:"RunConfiguration.EnvironmentVariables"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  \x3c!-- NUnit adapter --\x3e  \n  <NUnit>\n    <NumberOfTestWorkers>24</NumberOfTestWorkers>\n  </NUnit>\n  \x3c!-- General run configuration --\x3e\n  <RunConfiguration>\n    <EnvironmentVariables>\n      \x3c!-- For debugging selectors, it\'s recommend to set the following environment variable --\x3e\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n  \x3c!-- Playwright --\x3e  \n  <Playwright>\n    <BrowserName>chromium</BrowserName>\n    <ExpectTimeout>5000</ExpectTimeout>\n    <LaunchOptions>\n      <Headless>false</Headless>\n      <Channel>msedge</Channel>\n    </LaunchOptions>\n  </Playwright>\n</RunSettings>\n'})}),"\n",(0,n.jsx)(t.h3,{id:"base-nunit-classes-for-playwright",children:"Base NUnit classes for Playwright"}),"\n",(0,n.jsxs)(t.p,{children:["There are a few base classes available to you in ",(0,n.jsx)(t.code,{children:"Microsoft.Playwright.NUnit"})," namespace:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Test"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PageTest"}),(0,n.jsxs)(t.td,{children:["Each test gets a fresh copy of a web ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-page",title:"Page",children:"Page"})," created in its own unique ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),". Extending this class is the simplest way of writing a fully-functional Playwright test.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note: You can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method in each test file to control context options, the ones typically passed into the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser#browser-new-context",children:"Browser.NewContextAsync()"})," method. That way you can specify all kinds of emulation options for your test file individually."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ContextTest"}),(0,n.jsxs)(t.td,{children:["Each test will get a fresh copy of a ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browsercontext",title:"BrowserContext",children:"BrowserContext"}),". You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"Note: You can override the ",(0,n.jsx)(t.code,{children:"ContextOptions"})," method in each test file to control context options, the ones typically passed into the ",(0,n.jsx)(t.a,{href:"/dotnet/docs/next/api/class-browser#browser-new-context",children:"Browser.NewContextAsync()"})," method. That way you can specify all kinds of emulation options for your test file individually."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BrowserTest"}),(0,n.jsx)(t.td,{children:"Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PlaywrightTest"}),(0,n.jsx)(t.td,{children:"This gives each test a Playwright object so that the test could start and stop as many browsers as it likes."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"xunit-support",children:"xUnit support"}),"\n",(0,n.jsxs)(t.p,{children:["While using xUnit is also supported, we do not support running parallel tests. This is a well known problem/design limitation outlined by the maintainers across ",(0,n.jsx)(t.a,{href:"https://github.com/xunit/xunit/issues/2003",children:"several"})," ",(0,n.jsx)(t.a,{href:"https://github.com/xunit/xunit/issues/2111#issuecomment-650004247",children:"issues"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);