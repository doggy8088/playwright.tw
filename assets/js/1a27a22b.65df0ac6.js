"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1153],{2802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>x,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=t(4848),s=t(8453);t(4235),t(8328),t(3078);const a={id:"chrome-extensions",title:"Chrome extensions"},i=void 0,r={id:"chrome-extensions",title:"Chrome extensions",description:"Introduction",source:"@site/docs/chrome-extensions.mdx",sourceDirName:".",slug:"/chrome-extensions",permalink:"/docs/next/chrome-extensions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"chrome-extensions",title:"Chrome extensions"},sidebar:"docs",previous:{title:"Browsers",permalink:"/docs/next/browsers"},next:{title:"Clock",permalink:"/docs/next/clock"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Testing",id:"testing",level:2},{value:"Headless mode",id:"headless-mode",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality."})}),"\n",(0,o.jsxs)(n.p,{children:["The following is code for getting a handle to the ",(0,o.jsx)(n.a,{href:"https://developer.chrome.com/extensions/background_pages",children:"background page"})," of a ",(0,o.jsx)(n.a,{href:"https://developer.chrome.com/docs/extensions/mv2/",children:"Manifest v2"})," extension whose source is located in ",(0,o.jsx)(n.code,{children:"./my-extension"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const { chromium } = require('playwright');\n\n(async () => {\n  const pathToExtension = require('path').join(__dirname, 'my-extension');\n  const userDataDir = '/tmp/test-user-data-dir';\n  const browserContext = await chromium.launchPersistentContext(userDataDir, {\n    headless: false,\n    args: [\n      `--disable-extensions-except=${pathToExtension}`,\n      `--load-extension=${pathToExtension}`\n    ]\n  });\n  let [backgroundPage] = browserContext.backgroundPages();\n  if (!backgroundPage)\n    backgroundPage = await browserContext.waitForEvent('backgroundpage');\n\n  // Test the background page as you would any other page.\n  await browserContext.close();\n})();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.p,{children:"To have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it to load and test the popup page for example."}),"\n",(0,o.jsx)(n.p,{children:"First, add fixtures that will load the extension:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="fixtures.ts"',children:"import { test as base, chromium, type BrowserContext } from '@playwright/test';\nimport path from 'path';\n\nexport const test = base.extend<{\n  context: BrowserContext;\n  extensionId: string;\n}>({\n  context: async ({ }, use) => {\n    const pathToExtension = path.join(__dirname, 'my-extension');\n    const context = await chromium.launchPersistentContext('', {\n      headless: false,\n      args: [\n        `--disable-extensions-except=${pathToExtension}`,\n        `--load-extension=${pathToExtension}`,\n      ],\n    });\n    await use(context);\n    await context.close();\n  },\n  extensionId: async ({ context }, use) => {\n    /*\n    // for manifest v2:\n    let [background] = context.backgroundPages()\n    if (!background)\n      background = await context.waitForEvent('backgroundpage')\n    */\n\n    // for manifest v3:\n    let [background] = context.serviceWorkers();\n    if (!background)\n      background = await context.waitForEvent('serviceworker');\n\n    const extensionId = background.url().split('/')[2];\n    await use(extensionId);\n  },\n});\nexport const expect = test.expect;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then use these fixtures in a test:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { test, expect } from './fixtures';\n\ntest('example test', async ({ page }) => {\n  await page.goto('https://example.com');\n  await expect(page.locator('body')).toHaveText('Changed by my-extension');\n});\n\ntest('popup page', async ({ page, extensionId }) => {\n  await page.goto(`chrome-extension://${extensionId}/popup.html`);\n  await expect(page.locator('body')).toHaveText('my-extension popup');\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"headless-mode",children:"Headless mode"}),"\n",(0,o.jsx)(n.admonition,{type:"danger",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"headless=new"})," mode is not officially supported by Playwright and might result in unexpected behavior."]})}),"\n",(0,o.jsx)(n.p,{children:"By default, Chrome's headless mode in Playwright does not support Chrome extensions. To overcome this limitation, you can run Chrome's persistent context with a new headless mode by using the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="fixtures.ts"',children:"// ...\n\nconst pathToExtension = path.join(__dirname, 'my-extension');\nconst context = await chromium.launchPersistentContext('', {\n  headless: false,\n  args: [\n    `--headless=new`,\n    `--disable-extensions-except=${pathToExtension}`,\n    `--load-extension=${pathToExtension}`,\n  ],\n});\n// ...\n"})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);