"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2362],{2106:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=s(4848),r=s(8453);s(4235),s(8328),s(3078);const i={id:"class-genericassertions",title:"GenericAssertions"},c=void 0,a={id:"api/class-genericassertions",title:"GenericAssertions",description:"The GenericAssertions] class provides assertion methods that can be used to make assertions about any values in the tests. A new instance of [GenericAssertions] is created by calling [expect():",source:"@site/versioned_docs/version-stable/api/class-genericassertions.mdx",sourceDirName:"api",slug:"/api/class-genericassertions",permalink:"/docs/api/class-genericassertions",draft:!1,unlisted:!1,tags:[],version:"stable",frontMatter:{id:"class-genericassertions",title:"GenericAssertions"},sidebar:"api",previous:{title:"APIResponseAssertions",permalink:"/docs/api/class-apiresponseassertions"},next:{title:"LocatorAssertions",permalink:"/docs/api/class-locatorassertions"}},o={},l=[{value:"Methods",id:"methods",level:2},{value:"any",id:"generic-assertions-any",level:3},{value:"anything",id:"generic-assertions-anything",level:3},{value:"arrayContaining",id:"generic-assertions-array-containing",level:3},{value:"closeTo",id:"generic-assertions-close-to",level:3},{value:"objectContaining",id:"generic-assertions-object-containing",level:3},{value:"stringContaining",id:"generic-assertions-string-containing",level:3},{value:"stringMatching",id:"generic-assertions-string-matching",level:3},{value:"toBe",id:"generic-assertions-to-be",level:3},{value:"toBeCloseTo",id:"generic-assertions-to-be-close-to",level:3},{value:"toBeDefined",id:"generic-assertions-to-be-defined",level:3},{value:"toBeFalsy",id:"generic-assertions-to-be-falsy",level:3},{value:"toBeGreaterThan",id:"generic-assertions-to-be-greater-than",level:3},{value:"toBeGreaterThanOrEqual",id:"generic-assertions-to-be-greater-than-or-equal",level:3},{value:"toBeInstanceOf",id:"generic-assertions-to-be-instance-of",level:3},{value:"toBeLessThan",id:"generic-assertions-to-be-less-than",level:3},{value:"toBeLessThanOrEqual",id:"generic-assertions-to-be-less-than-or-equal",level:3},{value:"toBeNaN",id:"generic-assertions-to-be-na-n",level:3},{value:"toBeNull",id:"generic-assertions-to-be-null",level:3},{value:"toBeTruthy",id:"generic-assertions-to-be-truthy",level:3},{value:"toBeUndefined",id:"generic-assertions-to-be-undefined",level:3},{value:"toContain(expected)",id:"generic-assertions-to-contain-1",level:3},{value:"toContain(expected)",id:"generic-assertions-to-contain-2",level:3},{value:"toContainEqual",id:"generic-assertions-to-contain-equal",level:3},{value:"toEqual",id:"generic-assertions-to-equal",level:3},{value:"toHaveLength",id:"generic-assertions-to-have-length",level:3},{value:"toHaveProperty",id:"generic-assertions-to-have-property",level:3},{value:"toMatch",id:"generic-assertions-to-match",level:3},{value:"toMatchObject",id:"generic-assertions-to-match-object",level:3},{value:"toStrictEqual",id:"generic-assertions-to-strict-equal",level:3},{value:"toThrow",id:"generic-assertions-to-throw",level:3},{value:"toThrowError",id:"generic-assertions-to-throw-error",level:3},{value:"Properties",id:"properties",level:2},{value:"not",id:"generic-assertions-not",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions",title:"GenericAssertions",children:"GenericAssertions"})," class provides assertion methods that can be used to make assertions about any values in the tests. A new instance of ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions",title:"GenericAssertions",children:"GenericAssertions"})," is created by calling ",(0,t.jsx)(n.a,{href:"/docs/api/class-playwrightassertions#playwright-assertions-expect-generic",children:"expect()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { test, expect } from '@playwright/test';\n\ntest('assert a value', async ({ page }) => {\n  const value = 1;\n  expect(value).toBe(2);\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-any",children:"any"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.any"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.any()"})," matches any object instance created from the ",(0,t.jsx)(n.code,{children:"constructor"})," or a corresponding primitive type. Use it inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Match instance of a class.\nclass Example {}\nexpect(new Example()).toEqual(expect.any(Example));\n\n// Match any number.\nexpect({ prop: 1 }).toEqual({ prop: expect.any(Number) });\n\n// Match any string.\nexpect('abc').toEqual(expect.any(String));\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"constructor"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",title:"Function",children:"Function"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-any-option-constructor"}),(0,t.jsx)("a",{href:"#generic-assertions-any-option-constructor",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Constructor of the expected object like ",(0,t.jsx)(n.code,{children:"ExampleClass"}),", or a primitive boxed type like ",(0,t.jsx)(n.code,{children:"Number"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-anything",children:"anything"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.anything"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.anything()"})," matches everything except ",(0,t.jsx)(n.code,{children:"null"})," and ",(0,t.jsx)(n.code,{children:"undefined"}),". Use it inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = { prop: 1 };\nexpect(value).toEqual({ prop: expect.anything() });\nexpect(value).not.toEqual({ otherProp: expect.anything() });\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-array-containing",children:"arrayContaining"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.arrayContaining"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.arrayContaining()"})," matches an array that contains all of the elements in the expected array, in any order. Note that received array may be a superset of the expected array and contain some extra elements."]}),"\n",(0,t.jsxs)(n.p,{children:["Use this method inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));\nexpect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array",children:"Array"}),"<",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),">",(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-array-containing-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-array-containing-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected array that is a subset of the received value."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-close-to",children:"closeTo"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.closeTo"}),"\n",(0,t.jsxs)(n.p,{children:["Compares floating point numbers for approximate equality. Use this method inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching. When just comparing two numbers, prefer ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-be-close-to",children:"expect(value).toBeCloseTo()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });\nexpect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-close-to-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-close-to-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"numDigits"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," ",(0,t.jsx)(n.em,{children:"(optional)"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-close-to-option-num-digits"}),(0,t.jsx)("a",{href:"#generic-assertions-close-to-option-num-digits",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The number of decimal digits after the decimal point that must be equal."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-object-containing",children:"objectContaining"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.objectContaining"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.objectContaining()"})," matches an object that contains and matches all of the properties in the expected object. Note that received object may be a superset of the expected object and contain some extra properties."]}),"\n",(0,t.jsxs)(n.p,{children:["Use this method inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching. Object properties can be matchers to further relax the expectation. See examples."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Assert some of the properties.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));\n\n// Matchers can be used on the properties as well.\nexpect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));\n\n// Complex matching of sub-properties.\nexpect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-object-containing-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-object-containing-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected object pattern that contains a subset of the properties."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-string-containing",children:"stringContaining"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.stringContaining"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.stringContaining()"})," matches a string that contains the expected substring. Use this method inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect('Hello world!').toEqual(expect.stringContaining('Hello'));\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string",children:"string"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-string-containing-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-string-containing-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected substring."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-string-matching",children:"stringMatching"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.stringMatching"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expect.stringMatching()"})," matches a received string that in turn matches the expected pattern. Use this method inside ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," to perform pattern matching."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect('123ms').toEqual(expect.stringMatching(/\\d+m?s/));\n\n// Inside another matcher.\nexpect({\n  status: 'passed',\n  time: '123ms',\n}).toEqual({\n  status: expect.stringMatching(/passed|failed/),\n  time: expect.stringMatching(/\\d+m?s/),\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string",children:"string"})," | ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",title:"RegExp",children:"RegExp"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-string-matching-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-string-matching-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Pattern that expected string should match."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be",children:"toBe"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBe"}),"\n",(0,t.jsxs)(n.p,{children:["Compares value with ",(0,t.jsx)(n.code,{children:"expected"})," by calling ",(0,t.jsx)(n.code,{children:"Object.is"}),". This method compares objects by reference instead of their contents, similarly to the strict equality operator ",(0,t.jsx)(n.code,{children:"==="}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = { prop: 1 };\nexpect(value).toBe(value);\nexpect(value).not.toBe({});\nexpect(value.prop).toBe(1);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-close-to",children:"toBeCloseTo"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeCloseTo"}),"\n",(0,t.jsxs)(n.p,{children:["Compares floating point numbers for approximate equality. Use this method instead of ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-be",children:"expect(value).toBe()"})," when comparing floating point numbers."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect(0.1 + 0.2).not.toBe(0.3);\nexpect(0.1 + 0.2).toBeCloseTo(0.3, 5);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-close-to-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-close-to-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"numDigits"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," ",(0,t.jsx)(n.em,{children:"(optional)"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-close-to-option-num-digits"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-close-to-option-num-digits",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The number of decimal digits after the decimal point that must be equal."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-defined",children:"toBeDefined"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeDefined"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is not ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = null;\nexpect(value).toBeDefined();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-falsy",children:"toBeFalsy"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeFalsy"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is false in a boolean context, one of ",(0,t.jsx)(n.code,{children:"false"}),", ",(0,t.jsx)(n.code,{children:"0"}),", ",(0,t.jsx)(n.code,{children:"''"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ",(0,t.jsx)(n.code,{children:"undefined"})," or ",(0,t.jsx)(n.code,{children:"NaN"}),". Use this method when you don't care about the specific value."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = null;\nexpect(value).toBeFalsy();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-greater-than",children:"toBeGreaterThan"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeGreaterThan"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that ",(0,t.jsx)(n.code,{children:"value > expected"})," for number or big integer values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 42;\nexpect(value).toBeGreaterThan(1);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," | [bigint]",(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-greater-than-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-greater-than-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The value to compare to."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-greater-than-or-equal",children:"toBeGreaterThanOrEqual"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeGreaterThanOrEqual"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that ",(0,t.jsx)(n.code,{children:"value >= expected"})," for number or big integer values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 42;\nexpect(value).toBeGreaterThanOrEqual(42);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," | [bigint]",(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-greater-than-or-equal-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-greater-than-or-equal-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The value to compare to."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-instance-of",children:"toBeInstanceOf"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeInstanceOf"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is an instance of a class. Uses ",(0,t.jsx)(n.code,{children:"instanceof"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect(page).toBeInstanceOf(Page);\n\nclass Example {}\nexpect(new Example()).toBeInstanceOf(Example);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",title:"Function",children:"Function"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-instance-of-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-instance-of-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The class or constructor function."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-less-than",children:"toBeLessThan"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeLessThan"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that ",(0,t.jsx)(n.code,{children:"value < expected"})," for number or big integer values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 42;\nexpect(value).toBeLessThan(100);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," | [bigint]",(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-less-than-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-less-than-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The value to compare to."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-less-than-or-equal",children:"toBeLessThanOrEqual"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeLessThanOrEqual"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that ",(0,t.jsx)(n.code,{children:"value <= expected"})," for number or big integer values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 42;\nexpect(value).toBeLessThanOrEqual(42);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"})," | [bigint]",(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-be-less-than-or-equal-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-be-less-than-or-equal-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The value to compare to."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-na-n",children:"toBeNaN"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeNaN"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is ",(0,t.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = NaN;\nexpect(value).toBeNaN();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-null",children:"toBeNull"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeNull"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is ",(0,t.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = null;\nexpect(value).toBeNull();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-truthy",children:"toBeTruthy"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeTruthy"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is true in a boolean context, ",(0,t.jsx)(n.strong,{children:"anything but"})," ",(0,t.jsx)(n.code,{children:"false"}),", ",(0,t.jsx)(n.code,{children:"0"}),", ",(0,t.jsx)(n.code,{children:"''"}),", ",(0,t.jsx)(n.code,{children:"null"}),", ",(0,t.jsx)(n.code,{children:"undefined"})," or ",(0,t.jsx)(n.code,{children:"NaN"}),". Use this method when you don't care about the specific value."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = { example: 'value' };\nexpect(value).toBeTruthy();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-be-undefined",children:"toBeUndefined"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toBeUndefined"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = undefined;\nexpect(value).toBeUndefined();\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-contain-1",children:"toContain(expected)"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toContain(expected)"}),"\n",(0,t.jsx)(n.p,{children:"Ensures that string value contains an expected substring. Comparison is case-sensitive."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 'Hello, World';\nexpect(value).toContain('World');\nexpect(value).toContain(',');\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string",children:"string"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-contain-1-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-contain-1-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected substring."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-contain-2",children:"toContain(expected)"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toContain(expected)"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is an ",(0,t.jsx)(n.code,{children:"Array"})," or ",(0,t.jsx)(n.code,{children:"Set"})," and contains an expected item."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = [1, 2, 3];\nexpect(value).toContain(2);\nexpect(new Set(value)).toContain(2);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-contain-2-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-contain-2-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value in the collection."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-contain-equal",children:"toContainEqual"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toContainEqual"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value is an ",(0,t.jsx)(n.code,{children:"Array"})," or ",(0,t.jsx)(n.code,{children:"Set"})," and contains an item equal to the expected."]}),"\n",(0,t.jsxs)(n.p,{children:["For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-contain-2",children:"expect(value).toContain()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For primitive values, this method is equivalent to ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-contain-2",children:"expect(value).toContain()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = [\n  { example: 1 },\n  { another: 2 },\n  { more: 3 },\n];\nexpect(value).toContainEqual({ another: 2 });\nexpect(new Set(value)).toContainEqual({ another: 2 });\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-contain-equal-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-contain-equal-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value in the collection."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-equal",children:"toEqual"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toEqual"}),"\n",(0,t.jsxs)(n.p,{children:["Compares contents of the value with contents of ",(0,t.jsx)(n.code,{children:"expected"}),', performing "deep equality" check.']}),"\n",(0,t.jsxs)(n.p,{children:["For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-be",children:"expect(value).toBe()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For primitive values, this method is equivalent to ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-be",children:"expect(value).toBe()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = { prop: 1 };\nexpect(value).toEqual({ prop: 1 });\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Non-strict equality"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," performs deep equality check that compares contents of the received and expected values. To ensure two objects reference the same instance, use ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-be",children:"expect(value).toBe()"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," ignores ",(0,t.jsx)(n.code,{children:"undefined"})," properties and array items, and does not insist on object types being equal. For stricter matching, use ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-strict-equal",children:"expect(value).toStrictEqual()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Pattern matching"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"})," can be also used to perform pattern matching on objects, arrays and primitive types, with the help of the following matchers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-any",children:"expect(value).any()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-anything",children:"expect(value).anything()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-array-containing",children:"expect(value).arrayContaining()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-close-to",children:"expect(value).closeTo()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-object-containing",children:"expect(value).objectContaining()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-string-containing",children:"expect(value).stringContaining()"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-string-matching",children:"expect(value).stringMatching()"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here is an example that asserts some of the values inside a complex object:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect({\n  list: [1, 2, 3],\n  obj: { prop: 'Hello world!', another: 'some other value' },\n  extra: 'extra',\n}).toEqual(expect.objectContaining({\n  list: expect.arrayContaining([2, 3]),\n  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),\n}));\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-equal-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-equal-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-have-length",children:"toHaveLength"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toHaveLength"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that value has a ",(0,t.jsx)(n.code,{children:".length"})," property equal to ",(0,t.jsx)(n.code,{children:"expected"}),". Useful for arrays and strings."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect('Hello, World').toHaveLength(12);\nexpect([1, 2, 3]).toHaveLength(3);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number",children:"number"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-have-length-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-have-length-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected length."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-have-property",children:"toHaveProperty"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toHaveProperty"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that property at provided ",(0,t.jsx)(n.code,{children:"keyPath"})," exists on the object and optionally checks that property is equal to the ",(0,t.jsx)(n.code,{children:"expected"}),". Equality is checked recursively, similarly to ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = {\n  a: {\n    b: [42],\n  },\n  c: true,\n};\nexpect(value).toHaveProperty('a.b');\nexpect(value).toHaveProperty('a.b', [42]);\nexpect(value).toHaveProperty('a.b[0]', 42);\nexpect(value).toHaveProperty('c');\nexpect(value).toHaveProperty('c', true);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"keyPath"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string",children:"string"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-have-property-option-key-path"}),(0,t.jsx)("a",{href:"#generic-assertions-to-have-property-option-key-path",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["Path to the property. Use dot notation ",(0,t.jsx)(n.code,{children:"a.b"})," to check nested properties and indexed ",(0,t.jsx)(n.code,{children:"a[2]"})," notation to check nested array items."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"})," ",(0,t.jsx)(n.em,{children:"(optional)"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-have-property-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-have-property-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Optional expected value to compare the property to."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-match",children:"toMatch"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toMatch"}),"\n",(0,t.jsx)(n.p,{children:"Ensures that string value matches a regular expression."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 'Is 42 enough?';\nexpect(value).toMatch(/Is \\d+ enough/);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",title:"RegExp",children:"RegExp"})," | ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string",children:"string"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-match-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-match-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Regular expression to match against."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-match-object",children:"toMatchObject"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toMatchObject"}),"\n",(0,t.jsxs)(n.p,{children:["Compares contents of the value with contents of ",(0,t.jsx)(n.code,{children:"expected"}),', performing "deep equality" check. Allows extra properties to be present in the value, unlike ',(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"}),", so you can check just a subset of object properties."]}),"\n",(0,t.jsx)(n.p,{children:"When comparing arrays, the number of items must match, and each item is checked recursively."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = {\n  a: 1,\n  b: 2,\n  c: true,\n};\nexpect(value).toMatchObject({ a: 1, c: true });\nexpect(value).toMatchObject({ b: 2, c: true });\n\nexpect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"})," | ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array",children:"Array"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-match-object-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-match-object-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The expected object value to match against."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-strict-equal",children:"toStrictEqual"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toStrictEqual"}),"\n",(0,t.jsxs)(n.p,{children:["Compares contents of the value with contents of ",(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.strong,{children:"and"})," their types."]}),"\n",(0,t.jsxs)(n.p,{children:["Differences from ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-equal",children:"expect(value).toEqual()"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Keys with undefined properties are checked. For example, ",(0,t.jsx)(n.code,{children:"{ a: undefined, b: 2 }"})," does not match ",(0,t.jsx)(n.code,{children:"{ b: 2 }"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Array sparseness is checked. For example, ",(0,t.jsx)(n.code,{children:"[, 1]"})," does not match ",(0,t.jsx)(n.code,{children:"[undefined, 1]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Object types are checked to be equal. For example, a class instance with fields ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," will not equal a literal object with fields ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = { prop: 1 };\nexpect(value).toStrictEqual({ prop: 1 });\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-strict-equal-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-strict-equal-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected value."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-throw",children:"toThrow"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toThrow"}),"\n",(0,t.jsx)(n.p,{children:"Calls the function and ensures it throws an error."}),"\n",(0,t.jsxs)(n.p,{children:["Optionally compares the error with ",(0,t.jsx)(n.code,{children:"expected"}),". Allowed expected values:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Regular expression - error message should ",(0,t.jsx)(n.strong,{children:"match"})," the pattern."]}),"\n",(0,t.jsxs)(n.li,{children:["String - error message should ",(0,t.jsx)(n.strong,{children:"include"})," the substring."]}),"\n",(0,t.jsxs)(n.li,{children:["Error object - error message should be ",(0,t.jsx)(n.strong,{children:"equal to"})," the message property of the object."]}),"\n",(0,t.jsxs)(n.li,{children:["Error class - error object should be an ",(0,t.jsx)(n.strong,{children:"instance of"})," the class."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect(() => {\n  throw new Error('Something bad');\n}).toThrow();\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(/something/);\n\nexpect(() => {\n  throw new Error('Something bad');\n}).toThrow(Error);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"})," ",(0,t.jsx)(n.em,{children:"(optional)"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-throw-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-throw-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected error message or error object."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-to-throw-error",children:"toThrowError"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.toThrowError"}),"\n",(0,t.jsxs)(n.p,{children:["An alias for ",(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions#generic-assertions-to-throw",children:"expect(value).toThrow()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect(() => {\n  throw new Error('Something bad');\n}).toThrowError();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expected"})," ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object",children:"Object"})," ",(0,t.jsx)(n.em,{children:"(optional)"}),(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",class:"list-anchor-link",id:"generic-assertions-to-throw-error-option-expected"}),(0,t.jsx)("a",{href:"#generic-assertions-to-throw-error-option-expected",class:"list-anchor",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"Expected error message or error object."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"generic-assertions-not",children:"not"}),"\n",(0,t.jsx)("font",{size:"2",style:{position:"relative",top:"-20px"},children:"Added in: v1.9"}),"\n",(0,t.jsx)("x-search",{children:"genericAssertions.not"}),"\n",(0,t.jsx)(n.p,{children:"Makes the assertion check for the opposite condition. For example, the following code passes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const value = 1;\nexpect(value).not.toBe(2);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"expect(value).not\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Type"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api/class-genericassertions",title:"GenericAssertions",children:"GenericAssertions"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);