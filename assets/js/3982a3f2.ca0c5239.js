"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6889],{4701:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=s(4848),r=s(8453),o=s(4235),a=s(8328);s(3078);const i={id:"network",title:"Network"},l=void 0,c={id:"network",title:"Network",description:"Introduction",source:"@site/docs/network.mdx",sourceDirName:".",slug:"/network",permalink:"/docs/next/network",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"network",title:"Network"},sidebar:"docs",previous:{title:"Navigations",permalink:"/docs/next/navigations"},next:{title:"Other locators",permalink:"/docs/next/other-locators"}},d={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Mock APIs",id:"mock-apis",level:2},{value:"Network mocking",id:"network-mocking",level:2},{value:"HTTP Authentication",id:"http-authentication",level:2},{value:"HTTP Proxy",id:"http-proxy",level:2},{value:"Network events",id:"network-events",level:2},{value:"Variations",id:"variations",level:4},{value:"Handle requests",id:"handle-requests",level:2},{value:"Variations",id:"variations-1",level:4},{value:"Modify requests",id:"modify-requests",level:2},{value:"Abort requests",id:"abort-requests",level:2},{value:"Modify responses",id:"modify-responses",level:2},{value:"WebSockets",id:"websockets",level:2},{value:"Missing Network Events and Service Workers",id:"missing-network-events-and-service-workers",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright provides APIs to ",(0,n.jsx)(t.strong,{children:"monitor"})," and ",(0,n.jsx)(t.strong,{children:"modify"})," browser network traffic, both HTTP and HTTPS. Any requests that a page does, including ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",children:"XHRs"})," and ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"fetch"})," requests, can be tracked, modified and handled."]}),"\n",(0,n.jsx)(t.h2,{id:"mock-apis",children:"Mock APIs"}),"\n",(0,n.jsxs)(t.p,{children:["Check out our ",(0,n.jsx)(t.a,{href:"/docs/next/mock",children:"API mocking guide"})," to learn more on how to"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"mock API requests and never hit the API"}),"\n",(0,n.jsx)(t.li,{children:"perform the API request and modify the response"}),"\n",(0,n.jsx)(t.li,{children:"use HAR files to mock network requests."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"network-mocking",children:"Network mocking"}),"\n",(0,n.jsxs)(t.p,{children:["You don't have to configure anything to mock network requests. Just define a custom ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-route",title:"Route",children:"Route"})," that mocks network for a browser context."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="example.spec.ts"',children:"import { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ context }) => {\n  // Block any css requests for each test in this file.\n  await context.route(/.css$/, route => route.abort());\n});\n\ntest('loads page without css', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively, you can use ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"})," to mock network in a single page."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="example.spec.ts"',children:"import { test, expect } from '@playwright/test';\n\ntest('loads page without images', async ({ page }) => {\n  // Block png and jpeg images.\n  await page.route(/(png|jpeg)$/, route => route.abort());\n\n  await page.goto('https://playwright.dev');\n  // ... test goes here\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"http-authentication",children:"HTTP Authentication"}),"\n",(0,n.jsx)(t.p,{children:"Perform HTTP Authentication."}),"\n",(0,n.jsxs)(o.A,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],children:[(0,n.jsx)(a.A,{value:"test",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    httpCredentials: {\n      username: 'bill',\n      password: 'pa55w0rd',\n    }\n  }\n});\n"})})}),(0,n.jsx)(a.A,{value:"library",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const context = await browser.newContext({\n  httpCredentials: {\n    username: 'bill',\n    password: 'pa55w0rd',\n  },\n});\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n"})})})]}),"\n",(0,n.jsx)(t.h2,{id:"http-proxy",children:"HTTP Proxy"}),"\n",(0,n.jsx)(t.p,{children:"You can configure pages to load over the HTTP(S) proxy or SOCKSv5. Proxy can be either set globally for the entire browser, or for each browser context individually."}),"\n",(0,n.jsx)(t.p,{children:"You can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass proxy for."}),"\n",(0,n.jsx)(t.p,{children:"Here is an example of a global proxy:"}),"\n",(0,n.jsxs)(o.A,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],children:[(0,n.jsx)(a.A,{value:"test",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\nexport default defineConfig({\n  use: {\n    proxy: {\n      server: 'http://myproxy.com:3128',\n      username: 'usr',\n      password: 'pwd'\n    }\n  }\n});\n"})})}),(0,n.jsx)(a.A,{value:"library",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const browser = await chromium.launch({\n  proxy: {\n    server: 'http://myproxy.com:3128',\n    username: 'usr',\n    password: 'pwd'\n  }\n});\n"})})})]}),"\n",(0,n.jsx)(t.p,{children:"Its also possible to specify it per context:"}),"\n",(0,n.jsxs)(o.A,{groupId:"js-flavor",defaultValue:"test",values:[{label:"Test",value:"test"},{label:"Library",value:"library"}],children:[(0,n.jsx)(a.A,{value:"test",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="example.spec.ts"',children:"import { test, expect } from '@playwright/test';\n\ntest('should use custom proxy on a new context', async ({ browser }) => {\n  const context = await browser.newContext({\n    proxy: {\n      server: 'http://myproxy.com:3128',\n    }\n  });\n  const page = await context.newPage();\n\n  await context.close();\n});\n"})})}),(0,n.jsx)(a.A,{value:"library",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const browser = await chromium.launch();\nconst context = await browser.newContext({\n  proxy: { server: 'http://myproxy.com:3128' }\n});\n"})})})]}),"\n",(0,n.jsx)(t.h2,{id:"network-events",children:"Network events"}),"\n",(0,n.jsxs)(t.p,{children:["You can monitor all the ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-request",title:"Request",children:"Request"}),"s and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-response",title:"Response",children:"Response"}),"s:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"// Subscribe to 'request' and 'response' events.\npage.on('request', request => console.log('>>', request.method(), request.url()));\npage.on('response', response => console.log('<<', response.status(), response.url()));\n\nawait page.goto('https://example.com');\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Or wait for a network response after the button click with ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-wait-for-response",children:"page.waitForResponse()"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"// Use a glob URL pattern. Note no await.\nconst responsePromise = page.waitForResponse('**/api/fetch_data');\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n"})}),"\n",(0,n.jsx)(t.h4,{id:"variations",children:"Variations"}),"\n",(0,n.jsxs)(t.p,{children:["Wait for ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-response",title:"Response",children:"Response"}),"s with ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-wait-for-response",children:"page.waitForResponse()"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"// Use a RegExp. Note no await.\nconst responsePromise = page.waitForResponse(/\\.jpeg$/);\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n\n// Use a predicate taking a Response object. Note no await.\nconst responsePromise = page.waitForResponse(response => response.url().includes(token));\nawait page.getByText('Update').click();\nconst response = await responsePromise;\n"})}),"\n",(0,n.jsx)(t.h2,{id:"handle-requests",children:"Handle requests"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"await page.route('**/api/fetch_data', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can mock API endpoints via handling the network requests in your Playwright script."}),"\n",(0,n.jsx)(t.h4,{id:"variations-1",children:"Variations"}),"\n",(0,n.jsxs)(t.p,{children:["Set up route on the entire browser context with ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-browsercontext#browser-context-route",children:"browserContext.route()"})," or page with ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"}),". It will apply to popup windows and opened links."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"await browserContext.route('**/api/login', route => route.fulfill({\n  status: 200,\n  body: 'accept',\n}));\nawait page.goto('https://example.com');\n"})}),"\n",(0,n.jsx)(t.h2,{id:"modify-requests",children:"Modify requests"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"// Delete header\nawait page.route('**/*', async route => {\n  const headers = route.request().headers();\n  delete headers['X-Secret'];\n  await route.continue({ headers });\n});\n\n// Continue requests as POST.\nawait page.route('**/*', route => route.continue({ method: 'POST' }));\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can continue requests with modifications. Example above removes an HTTP header from the outgoing requests."}),"\n",(0,n.jsx)(t.h2,{id:"abort-requests",children:"Abort requests"}),"\n",(0,n.jsxs)(t.p,{children:["You can abort requests using ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"})," and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-route#route-abort",children:"route.abort()"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"await page.route('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// Abort based on the request type\nawait page.route('**/*', route => {\n  return route.request().resourceType() === 'image' ? route.abort() : route.continue();\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"modify-responses",children:"Modify responses"}),"\n",(0,n.jsxs)(t.p,{children:["To modify a response use ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," to get the original response and then pass the response to ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-route#route-fulfill",children:"route.fulfill()"}),". You can override individual fields on the response via options:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"await page.route('**/title.html', async route => {\n  // Fetch original response.\n  const response = await route.fetch();\n  // Add a prefix to the title.\n  let body = await response.text();\n  body = body.replace('<title>', '<title>My prefix:');\n  await route.fulfill({\n    // Pass all fields from the response.\n    response,\n    // Override response body.\n    body,\n    // Force content type to be html.\n    headers: {\n      ...response.headers(),\n      'content-type': 'text/html'\n    }\n  });\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"websockets",children:"WebSockets"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright supports ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",children:"WebSockets"})," inspection out of the box. Every time a WebSocket is created, the ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-event-web-socket",children:"page.on('websocket')"})," event is fired. This event contains the ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-websocket",title:"WebSocket",children:"WebSocket"})," instance for further web socket frames inspection:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"page.on('websocket', ws => {\n  console.log(`WebSocket opened: ${ws.url()}>`);\n  ws.on('framesent', event => console.log(event.payload));\n  ws.on('framereceived', event => console.log(event.payload));\n  ws.on('close', () => console.log('WebSocket closed'));\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"missing-network-events-and-service-workers",children:"Missing Network Events and Service Workers"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright's built-in ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-browsercontext#browser-context-route",children:"browserContext.route()"})," and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"})," allow your tests to natively route requests and perform mocking and interception."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["If you're using Playwright's native ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-browsercontext#browser-context-route",children:"browserContext.route()"})," and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"}),", and it appears network events are missing, disable Service Workers by setting ",(0,n.jsx)(t.code,{children:"Browser.newContext.serviceWorkers"})," to ",(0,n.jsx)(t.code,{children:"'block'"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["It might be that you are using a mock tool such as Mock Service Worker (MSW). While this tool works out of the box for mocking responses, it adds its own Service Worker that takes over the network requests, hence making them invisible to ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-browsercontext#browser-context-route",children:"browserContext.route()"})," and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"}),". If you are interested in both network testing and mocking, consider using built-in ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-browsercontext#browser-context-route",children:"browserContext.route()"})," and ",(0,n.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"})," for ",(0,n.jsx)(t.a,{href:"#handle-requests",children:"response mocking"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["If you're interested in not solely using Service Workers for testing and network mocking, but in routing and listening for requests made by Service Workers themselves, please see ",(0,n.jsx)(t.a,{href:"https://github.com/microsoft/playwright/issues/15684",children:"this experimental feature"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);