"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[3363],{406:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var n=s(4848),l=s(8453);s(4235),s(8328),s(3078);const r={id:"test-cli",title:"Command line"},i=void 0,d={id:"test-cli",title:"Command line",description:"Introduction",source:"@site/docs/test-cli.mdx",sourceDirName:".",slug:"/test-cli",permalink:"/docs/next/test-cli",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"test-cli",title:"Command line"},sidebar:"docs",previous:{title:"Annotations",permalink:"/docs/next/test-annotations"},next:{title:"Emulation",permalink:"/docs/next/emulation"}},c={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Reference",id:"reference",level:2}];function o(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"Here are the most common options available in the command line."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run all the tests"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run a single test file"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test tests/todo-page.spec.ts\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run a set of test files"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test tests/todo-page/ tests/landing-page/\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Run files that have ",(0,n.jsx)(t.code,{children:"my-spec"})," or ",(0,n.jsx)(t.code,{children:"my-spec-2"})," in the file name"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test my-spec my-spec-2\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run tests that are in line 42 in my-spec.ts"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test my-spec.ts:42\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run the test with the title"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'npx playwright test -g "add a todo item"\n'})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run tests in headed browsers"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --headed\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run all the tests against a specific project"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --project=chromium\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Disable ",(0,n.jsx)(t.a,{href:"/docs/next/test-parallel",children:"parallelization"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --workers=1\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Choose a ",(0,n.jsx)(t.a,{href:"/docs/next/test-reporters",children:"reporter"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --reporter=dot\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Run in debug mode with ",(0,n.jsx)(t.a,{href:"/docs/next/debug",children:"Playwright Inspector"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --debug\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Run tests in interactive UI mode, with a built-in watch mode (Preview)"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --ui\n"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Ask for help"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --help\n"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,n.jsxs)(t.p,{children:["Complete set of Playwright Test options is available in the ",(0,n.jsx)(t.a,{href:"/docs/next/test-use-options",children:"configuration file"}),". Following options can be passed to a command line and take priority over the configuration file:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Option"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Non-option arguments"}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Each argument is treated as a regular expression matched against the full test file path. Only tests from the files matching the pattern will be executed. Special symbols like ",(0,n.jsx)(t.code,{children:"$"})," or ",(0,n.jsx)(t.code,{children:"*"})," should be escaped with ",(0,n.jsx)(t.code,{children:"\\"}),". In many shells/terminals you may need to quote the arguments."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.code,{children:"-c <file>"})," or ",(0,n.jsx)(t.code,{children:"--config <file>"})]}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Configuration file. If not passed, defaults to ",(0,n.jsx)(t.code,{children:"playwright.config.ts"})," or ",(0,n.jsx)(t.code,{children:"playwright.config.js"})," in the current directory."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--debug"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Run tests with Playwright Inspector. Shortcut for ",(0,n.jsx)(t.code,{children:"PWDEBUG=1"})," environment variable and ",(0,n.jsx)(t.code,{children:"--timeout=0 --max-failures=1 --headed --workers=1"})," options."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--fail-on-flaky-tests"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Fails test runs that contain flaky tests. By default flaky tests count as successes."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--forbid-only"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Whether to disallow ",(0,n.jsx)(t.code,{children:"test.only"}),". Useful on CI."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--global-timeout <number>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Total timeout for the whole test run in milliseconds. By default, there is no global timeout. Learn more about ",(0,n.jsx)(t.a,{href:"/docs/next/test-timeouts",children:"various timeouts"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.code,{children:"-g <grep>"})," or ",(0,n.jsx)(t.code,{children:"--grep <grep>"})]}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Only run tests matching this regular expression. For example, this will run ",(0,n.jsx)(t.code,{children:"'should add to cart'"})," when passed ",(0,n.jsx)(t.code,{children:'-g "add to cart"'}),".  The regular expression will be tested against the string that consists of the project name, test file name, ",(0,n.jsx)(t.code,{children:"test.describe"})," titles if any, test title and all test tags, separated by spaces, e.g. ",(0,n.jsx)(t.code,{children:"chromium my-test.spec.ts my-suite my-test @smoke"}),". The filter does not apply to the tests from dependency projects, i.e. Playwright will still run all tests from ",(0,n.jsx)(t.a,{href:"/docs/next/test-projects#dependencies",children:"project dependencies"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--grep-invert <grep>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Only run tests ",(0,n.jsx)(t.strong,{children:"not"})," matching this regular expression. The opposite of ",(0,n.jsx)(t.code,{children:"--grep"}),". The filter does not apply to the tests from dependency projects, i.e. Playwright will still run all tests from ",(0,n.jsx)(t.a,{href:"/docs/next/test-projects#dependencies",children:"project dependencies"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--headed"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Run tests in headed browsers. Useful for debugging."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--ignore-snapshots"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Whether to ignore ",(0,n.jsx)(t.a,{href:"/docs/next/test-snapshots",children:"snapshots"}),". Use this when snapshot expectations are known to be different, e.g. running tests on Linux against Windows screenshots."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--last-failed"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Only re-run the failures."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--list"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"list all the tests, but do not run them."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.code,{children:"--max-failures <N>"})," or ",(0,n.jsx)(t.code,{children:"-x"})]}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Stop after the first ",(0,n.jsx)(t.code,{children:"N"})," test failures. Passing ",(0,n.jsx)(t.code,{children:"-x"})," stops after the first failure."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--no-deps"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Ignore the dependencies between projects and behave as if they were not specified."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--output <dir>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Directory for artifacts produced by tests, defaults to ",(0,n.jsx)(t.code,{children:"test-results"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--only-changed [ref]"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:'Only run test files that have been changed between working tree and "ref". Defaults to running all uncommitted changes with ref=HEAD. Only supports Git.'})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--pass-with-no-tests"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Allows the test suite to pass when no files are found."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--project <name>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Only run tests from the specified ",(0,n.jsx)(t.a,{href:"/docs/next/test-projects",children:"projects"}),", supports '*' wildcard. Defaults to running all projects defined in the configuration file."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--quiet"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Whether to suppress stdout and stderr from the tests."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--repeat-each <N>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Run each test ",(0,n.jsx)(t.code,{children:"N"})," times, defaults to one."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--reporter <reporter>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Choose a reporter: minimalist ",(0,n.jsx)(t.code,{children:"dot"}),", concise ",(0,n.jsx)(t.code,{children:"line"})," or detailed ",(0,n.jsx)(t.code,{children:"list"}),". See ",(0,n.jsx)(t.a,{href:"/docs/next/test-reporters",children:"reporters"})," for more information. You can also pass a path to a ",(0,n.jsx)(t.a,{href:"/docs/next/test-reporters#custom-reporters",children:"custom reporter"})," file."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--retries <number>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The maximum number of ",(0,n.jsx)(t.a,{href:"/docs/next/test-retries#retries",children:"retries"})," for flaky tests, defaults to zero (no retries)."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--shard <shard>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.a,{href:"/docs/next/test-parallel#shard-tests-between-multiple-machines",children:"Shard"})," tests and execute only selected shard, specified in the form ",(0,n.jsx)(t.code,{children:"current/all"}),", 1-based, for example ",(0,n.jsx)(t.code,{children:"3/5"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--timeout <number>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Maximum timeout in milliseconds for each test, defaults to 30 seconds. Learn more about ",(0,n.jsx)(t.a,{href:"/docs/next/test-timeouts",children:"various timeouts"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--trace <mode>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Force tracing mode, can be ",(0,n.jsx)(t.code,{children:"on"}),", ",(0,n.jsx)(t.code,{children:"off"}),", ",(0,n.jsx)(t.code,{children:"on-first-retry"}),", ",(0,n.jsx)(t.code,{children:"on-all-retries"}),", ",(0,n.jsx)(t.code,{children:"retain-on-failure"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"--tsconfig <path>"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Path to a single tsconfig applicable to all imported files. See ",(0,n.jsx)(t.a,{href:"/docs/next/test-typescript#tsconfig-resolution",children:"tsconfig resolution"})," for more details."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.code,{children:"--update-snapshots"})," or ",(0,n.jsx)(t.code,{children:"-u"})]}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Whether to update ",(0,n.jsx)(t.a,{href:"/docs/next/test-snapshots",children:"snapshots"})," with actual results instead of comparing them. Use this when snapshot expectations have changed."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.code,{children:"--workers <number>"})," or ",(0,n.jsx)(t.code,{children:"-j <number>"})]}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The maximum number of concurrent worker processes that run in ",(0,n.jsx)(t.a,{href:"/docs/next/test-parallel",children:"parallel"}),"."]})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);