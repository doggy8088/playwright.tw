"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6983],{8960:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>r,contentTitle:()=>t,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var o=a(4848),n=a(8453);a(4235),a(8328),a(3078);const l={id:"dialogs",title:"Dialogs"},t=void 0,s={id:"dialogs",title:"Dialogs",description:"Introduction",source:"@site/docs/dialogs.mdx",sourceDirName:".",slug:"/dialogs",permalink:"/docs/next/dialogs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"dialogs",title:"Dialogs"},sidebar:"docs",previous:{title:"Debugging Tests",permalink:"/docs/next/debug"},next:{title:"Downloads",permalink:"/docs/next/downloads"}},r={},d=[{value:"Introduction",id:"introduction",level:2},{value:"alert(), confirm(), prompt() dialogs",id:"alert-confirm-prompt-dialogs",level:2},{value:"beforeunload dialog",id:"beforeunload-dialog",level:2},{value:"Print dialogs",id:"print-dialogs",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(i.p,{children:["Playwright can interact with the web page dialogs such as ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert",children:(0,o.jsx)(i.code,{children:"alert"})}),", ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",children:(0,o.jsx)(i.code,{children:"confirm"})}),", ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",children:(0,o.jsx)(i.code,{children:"prompt"})})," as well as ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",children:(0,o.jsx)(i.code,{children:"beforeunload"})})," confirmation. For print dialogs, see ",(0,o.jsx)(i.a,{href:"#print-dialogs",children:"Print"}),"."]}),"\n",(0,o.jsx)(i.h2,{id:"alert-confirm-prompt-dialogs",children:"alert(), confirm(), prompt() dialogs"}),"\n",(0,o.jsxs)(i.p,{children:["By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-dialog#dialog-accept",children:"dialog.accept()"})," or ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-dialog#dialog-dismiss",children:"dialog.dismiss()"})," it."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"page.on('dialog', dialog => dialog.accept());\nawait page.getByRole('button').click();\n"})}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.a,{href:"/docs/next/api/class-page#page-event-dialog",children:"page.on('dialog')"})," listener ",(0,o.jsx)(i.strong,{children:"must handle"})," the dialog. Otherwise your action will stall, be it ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-locator#locator-click",children:"locator.click()"})," or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled."]})}),"\n",(0,o.jsx)(i.p,{children:"As a result, the following snippet will never resolve:"}),"\n",(0,o.jsx)(i.admonition,{type:"warning",children:(0,o.jsx)(i.p,{children:"WRONG!"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"page.on('dialog', dialog => console.log(dialog.message()));\nawait page.getByRole('button').click(); // Will hang here\n"})}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsxs)(i.p,{children:["If there is no listener for ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-page#page-event-dialog",children:"page.on('dialog')"}),", all dialogs are automatically dismissed."]})}),"\n",(0,o.jsx)(i.h2,{id:"beforeunload-dialog",children:"beforeunload dialog"}),"\n",(0,o.jsxs)(i.p,{children:["When ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-page#page-close",children:"page.close()"})," is invoked with the truthy ",(0,o.jsx)(i.code,{children:"runBeforeUnload"})," value, the page runs its unload handlers. This is the only case when ",(0,o.jsx)(i.a,{href:"/docs/next/api/class-page#page-close",children:"page.close()"})," does not wait for the page to actually close, because it might be that the page stays open in the end of the operation."]}),"\n",(0,o.jsxs)(i.p,{children:["You can register a dialog handler to handle the ",(0,o.jsx)(i.code,{children:"beforeunload"})," dialog yourself:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"page.on('dialog', async dialog => {\n  assert(dialog.type() === 'beforeunload');\n  await dialog.dismiss();\n});\nawait page.close({ runBeforeUnload: true });\n"})}),"\n",(0,o.jsx)(i.h2,{id:"print-dialogs",children:"Print dialogs"}),"\n",(0,o.jsxs)(i.p,{children:["In order to assert that a print dialog via ",(0,o.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/print",children:(0,o.jsx)(i.code,{children:"window.print"})})," was triggered, you can use the following snippet:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"await page.goto('<url>');\n\nawait page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');\nawait page.getByText('Print it!').click();\n\nawait page.waitForFunction('window.waitForPrintDialog');\n"})}),"\n",(0,o.jsx)(i.p,{children:"This will wait for the print dialog to be opened after the button is clicked. Make sure to evaluate the script before clicking the button / after the page is loaded."})]})}function g(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);