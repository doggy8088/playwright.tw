"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[280],{3799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=n(4848),s=n(8453);n(4235),n(8328),n(3078);const i={id:"test-webserver",title:"Web server"},o=void 0,l={id:"test-webserver",title:"Web server",description:"Introduction",source:"@site/docs/test-webserver.mdx",sourceDirName:".",slug:"/test-webserver",permalink:"/docs/next/test-webserver",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"test-webserver",title:"Web server"},sidebar:"docs",previous:{title:"UI Mode",permalink:"/docs/next/test-ui-mode"},next:{title:"Library",permalink:"/docs/next/library"}},d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Configuring a web server",id:"configuring-a-web-server",level:2},{value:"Adding a server timeout",id:"adding-a-server-timeout",level:2},{value:"Adding a baseURL",id:"adding-a-baseurl",level:2},{value:"Multiple web servers",id:"multiple-web-servers",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["Playwright comes with a ",(0,r.jsx)(t.code,{children:"webserver"})," option in the config file which gives you the ability to launch a local dev server before running your tests. This is ideal for when writing your tests during development and when you don't have a staging or production url to test against."]}),"\n",(0,r.jsx)(t.h2,{id:"configuring-a-web-server",children:"Configuring a web server"}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"webserver"})," property in your Playwright config to launch a development web server during the tests."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'ignore',\n    stderr: 'pipe',\n  },\n});\n"})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"/docs/next/api/class-testconfig#test-config-web-server",children:"testConfig.webServer"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Launch a development web server (or multiple) during the tests."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"command"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Shell command to start the local dev server of your app."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"url"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"URL of your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the server is ready to accept connections."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"reuseExistingServer"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["If ",(0,r.jsx)(t.code,{children:"true"}),", it will re-use an existing server on the url when available. If no server is running on that url, it will run the command to start a new server. If ",(0,r.jsx)(t.code,{children:"false"}),", it will throw if an existing process is listening on the url. To see the stdout, you can set the ",(0,r.jsx)(t.code,{children:"DEBUG=pw:webserver"})," environment variable."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"ignoreHTTPSErrors"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Whether to ignore HTTPS errors when fetching the ",(0,r.jsx)(t.code,{children:"url"}),". Defaults to ",(0,r.jsx)(t.code,{children:"false"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"cwd"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Current working directory of the spawned process, defaults to the directory of the configuration file."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"stdout"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["If ",(0,r.jsx)(t.code,{children:'"pipe"'}),", it will pipe the stdout of the command to the process stdout. If ",(0,r.jsx)(t.code,{children:'"ignore"'}),", it will ignore the stdout of the command. Default to ",(0,r.jsx)(t.code,{children:'"ignore"'}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"stderr"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to ",(0,r.jsx)(t.code,{children:'"pipe"'}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"timeout"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"`How long to wait for the process to start up and be available in milliseconds. Defaults to 60000."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"adding-a-server-timeout",children:"Adding a server timeout"}),"\n",(0,r.jsx)(t.p,{children:"Webservers can sometimes take longer to boot up. In this case, you can increase the timeout to wait for the server to start."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120 * 1000,\n  },\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"adding-a-baseurl",children:"Adding a baseURL"}),"\n",(0,r.jsxs)(t.p,{children:["It is also recommended to specify the ",(0,r.jsx)(t.code,{children:"baseURL"})," in the ",(0,r.jsx)(t.code,{children:"use: {}"})," section of your config, so that tests can use relative urls and you don't have to specify the full URL over and over again."]}),"\n",(0,r.jsxs)(t.p,{children:["When using ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-page#page-goto",children:"page.goto()"}),", ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-page#page-route",children:"page.route()"}),", ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-page#page-wait-for-url",children:"page.waitForURL()"}),", ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-page#page-wait-for-request",children:"page.waitForRequest()"}),", or ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-page#page-wait-for-response",children:"page.waitForResponse()"})," it takes the base URL in consideration by using the ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL/URL",children:(0,r.jsx)(t.code,{children:"URL()"})})," constructor for building the corresponding URL. For Example, by setting the baseURL to ",(0,r.jsx)(t.code,{children:"http://127.0.0.1:3000"})," and navigating to ",(0,r.jsx)(t.code,{children:"/login"})," in your tests, Playwright will run the test using ",(0,r.jsx)(t.code,{children:"http://127.0.0.1:3000/login"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://127.0.0.1:3000',\n  },\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Now you can use a relative path when navigating the page:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="test.spec.ts"',children:"import { test } from '@playwright/test';\n\ntest('test', async ({ page }) => {\n  // This will navigate to http://127.0.0.1:3000/login\n  await page.goto('./login');\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"multiple-web-servers",children:"Multiple web servers"}),"\n",(0,r.jsxs)(t.p,{children:["Multiple web servers (or background processes) can be launched simultaneously by providing an array of ",(0,r.jsx)(t.code,{children:"webServer"})," configurations. See ",(0,r.jsx)(t.a,{href:"/docs/next/api/class-testconfig#test-config-web-server",children:"testConfig.webServer"})," for more info."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  webServer: [\n    {\n      command: 'npm run start',\n      url: 'http://127.0.0.1:3000',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    },\n    {\n      command: 'npm run backend',\n      url: 'http://127.0.0.1:3333',\n      timeout: 120 * 1000,\n      reuseExistingServer: !process.env.CI,\n    }\n  ],\n  use: {\n    baseURL: 'http://127.0.0.1:3000',\n  },\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);