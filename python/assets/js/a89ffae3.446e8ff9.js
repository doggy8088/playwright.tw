"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1846],{7087:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=s(4848),i=s(8453);s(4235),s(8328),s(3078);const l={id:"writing-tests",title:"Writing tests"},r=void 0,o={id:"writing-tests",title:"Writing tests",description:"Introduction",source:"@site/docs/writing-tests.mdx",sourceDirName:".",slug:"/writing-tests",permalink:"/python/docs/next/writing-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"writing-tests",title:"Writing tests"},sidebar:"docs",previous:{title:"Installation",permalink:"/python/docs/next/intro"},next:{title:"Generating tests",permalink:"/python/docs/next/codegen-intro"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"First test",id:"first-test",level:2},{value:"Actions",id:"actions",level:2},{value:"Navigation",id:"navigation",level:3},{value:"Interactions",id:"interactions",level:3},{value:"Basic actions",id:"basic-actions",level:3},{value:"Assertions",id:"assertions",level:2},{value:"Test isolation",id:"test-isolation",level:3},{value:"Using fixtures",id:"using-fixtures",level:3},{value:"What&#39;s next",id:"whats-next",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"Playwright tests are simple, they"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"perform actions"}),", and"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"assert the state"})," against expectations."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["There is no need to wait for anything prior to performing an action: Playwright automatically waits for the wide range of ",(0,n.jsx)(t.a,{href:"/python/docs/next/actionability",children:"actionability"})," checks to pass prior to performing each action."]}),"\n",(0,n.jsx)(t.p,{children:"There is also no need to deal with the race conditions when performing the checks - Playwright assertions are designed in a way that they describe the expectations that need to be eventually met."}),"\n",(0,n.jsx)(t.p,{children:"That's it! These design choices allow Playwright users to forget about flaky timeouts and racy checks in their tests altogether."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"You will learn"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/writing-tests#first-test",children:"How to write the first test"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/writing-tests#actions",children:"How to perform actions"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/writing-tests#assertions",children:"How to use assertions"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/writing-tests#test-isolation",children:"How tests run in isolation"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/writing-tests#using-fixtures",children:"How to use test hooks"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"first-test",children:"First test"}),"\n",(0,n.jsxs)(t.p,{children:["Take a look at the following example to see how to write a test. Note how the file name follows the ",(0,n.jsx)(t.code,{children:"test_"})," prefix convention as well as each test name."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:'title="test_example.py"',children:'import re\nfrom playwright.sync_api import Page, expect\n\ndef test_has_title(page: Page):\n    page.goto("https://playwright.dev/")\n\n    # Expect a title "to contain" a substring.\n    expect(page).to_have_title(re.compile("Playwright"))\n\ndef test_get_started_link(page: Page):\n    page.goto("https://playwright.dev/")\n\n    # Click the get started link.\n    page.get_by_role("link", name="Get started").click()\n\n    # Expects page to have a heading with the name of Installation.\n    expect(page.get_by_role("heading", name="Installation")).to_be_visible()\n'})}),"\n",(0,n.jsx)(t.h2,{id:"actions",children:"Actions"}),"\n",(0,n.jsx)(t.h3,{id:"navigation",children:"Navigation"}),"\n",(0,n.jsx)(t.p,{children:"Most of the tests will start with navigating page to the URL. After that, test will be able to interact with the page elements."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'page.goto("https://playwright.dev/")\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Playwright will wait for page to reach the load state prior to moving forward. Learn more about the ",(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-page#page-goto",children:"page.goto()"})," options."]}),"\n",(0,n.jsx)(t.h3,{id:"interactions",children:"Interactions"}),"\n",(0,n.jsxs)(t.p,{children:["Performing actions starts with locating the elements. Playwright uses ",(0,n.jsx)(t.a,{href:"/python/docs/next/locators",children:"Locators API"})," for that. Locators represent a way to find element(s) on the page at any moment, learn more about the ",(0,n.jsx)(t.a,{href:"/python/docs/next/locators",children:"different types"})," of locators available. Playwright will wait for the element to be ",(0,n.jsx)(t.a,{href:"/python/docs/next/actionability",children:"actionable"})," prior to performing the action, so there is no need to wait for it to become available."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'# Create a locator.\nget_started = page.get_by_role("link", name="Get started")\n\n# Click it.\nget_started.click()\n'})}),"\n",(0,n.jsx)(t.p,{children:"In most cases, it'll be written in one line:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'page.get_by_role("link", name="Get started").click()\n'})}),"\n",(0,n.jsx)(t.h3,{id:"basic-actions",children:"Basic actions"}),"\n",(0,n.jsxs)(t.p,{children:["This is the list of the most popular Playwright actions. Note that there are many more, so make sure to check the ",(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator",children:"Locator API"})," section to learn more about them."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Action"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-check",children:"locator.check()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Check the input checkbox"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-click",children:"locator.click()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Click the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-uncheck",children:"locator.uncheck()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Uncheck the input checkbox"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-hover",children:"locator.hover()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Hover mouse over the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-fill",children:"locator.fill()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Fill the form field, input text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-focus",children:"locator.focus()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Focus the element"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-press",children:"locator.press()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Press single key"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-set-input-files",children:"locator.set_input_files()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Pick files to upload"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locator#locator-select-option",children:"locator.select_option()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Select option in the drop down"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"assertions",children:"Assertions"}),"\n",(0,n.jsxs)(t.p,{children:["Playwright includes ",(0,n.jsx)(t.a,{href:"/python/docs/next/test-assertions",children:"assertions"}),' that will wait until the expected condition is met. Using these assertions allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing "Playwright":']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import re\nfrom playwright.sync_api import expect\n\nexpect(page).to_have_title(re.compile("Playwright"))\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Here is the list of the most popular async assertions. Note that there are ",(0,n.jsx)(t.a,{href:"/python/docs/next/test-assertions",children:"many more"})," to get familiar with:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Assertion"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-be-checked",children:"expect(locator).to_be_checked()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Checkbox is checked"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-be-enabled",children:"expect(locator).to_be_enabled()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Control is enabled"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-be-visible",children:"expect(locator).to_be_visible()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element is visible"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-contain-text",children:"expect(locator).to_contain_text()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element contains text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-have-attribute",children:"expect(locator).to_have_attribute()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element has attribute"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-have-count",children:"expect(locator).to_have_count()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"List of elements has given length"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-have-text",children:"expect(locator).to_have_text()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Element matches text"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-locatorassertions#locator-assertions-to-have-value",children:"expect(locator).to_have_value()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Input element has value"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-pageassertions#page-assertions-to-have-title",children:"expect(page).to_have_title()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Page has title"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/python/docs/next/api/class-pageassertions#page-assertions-to-have-url",children:"expect(page).to_have_url()"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Page has URL"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"test-isolation",children:"Test isolation"}),"\n",(0,n.jsxs)(t.p,{children:["The Playwright Pytest plugin is based on the concept of test fixtures such as the ",(0,n.jsx)(t.a,{href:"/python/docs/next/test-runners",children:"built in page fixture"}),", which is passed into your test. Pages are ",(0,n.jsx)(t.a,{href:"./browser-contexts",children:"isolated between tests due to the Browser Context"}),", which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:'title="test_example.py"',children:'from playwright.sync_api import Page\n\ndef test_example_test(page: Page):\n  pass\n  # "page" belongs to an isolated BrowserContext, created for this specific test.\n\ndef test_another_test(page: Page):\n  pass\n  # "page" in this second test is completely isolated from the first test.\n'})}),"\n",(0,n.jsx)(t.h3,{id:"using-fixtures",children:"Using fixtures"}),"\n",(0,n.jsxs)(t.p,{children:["You can use various ",(0,n.jsx)(t.a,{href:"https://docs.pytest.org/en/6.2.x/fixture.html#autouse-fixtures-fixtures-you-don-t-have-to-request",children:"fixtures"})," to execute code before or after your tests and to share objects between them. A ",(0,n.jsx)(t.code,{children:"function"})," scoped fixture e.g. with autouse behaves like a beforeEach/afterEach. And a ",(0,n.jsx)(t.code,{children:"module"})," scoped fixture with autouse behaves like a beforeAll/afterAll which runs before all and after all the tests."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:'title="test_example.py"',children:'import pytest\nfrom playwright.sync_api import Page, expect\n\n@pytest.fixture(scope="function", autouse=True)\ndef before_each_after_each(page: Page):\n    \n    print("before the test runs")\n\n    # Go to the starting url before each test.\n    page.goto("https://playwright.dev/")\n    yield\n    \n    print("after the test runs")\n\ndef test_main_navigation(page: Page):\n    # Assertions use the expect API.\n    expect(page).to_have_url("https://playwright.dev/")\n'})}),"\n",(0,n.jsx)(t.h2,{id:"whats-next",children:"What's next"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/running-tests",children:"Run single test, multiple tests, headed mode"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/codegen-intro",children:"Generate tests with Codegen"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/python/docs/next/ci-intro",children:"Run tests on CI with GitHub Actions"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);