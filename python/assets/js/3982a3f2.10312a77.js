"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6889],{4701:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=s(4848),t=s(8453),a=s(4235),o=s(8328);s(3078);const l={id:"network",title:"Network"},i=void 0,c={id:"network",title:"Network",description:"Introduction",source:"@site/docs/network.mdx",sourceDirName:".",slug:"/network",permalink:"/python/docs/next/network",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"network",title:"Network"},sidebar:"docs",previous:{title:"Navigations",permalink:"/python/docs/next/navigations"},next:{title:"Other locators",permalink:"/python/docs/next/other-locators"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Mock APIs",id:"mock-apis",level:2},{value:"HTTP Authentication",id:"http-authentication",level:2},{value:"HTTP Proxy",id:"http-proxy",level:2},{value:"Network events",id:"network-events",level:2},{value:"Variations",id:"variations",level:4},{value:"Handle requests",id:"handle-requests",level:2},{value:"Variations",id:"variations-1",level:4},{value:"Modify requests",id:"modify-requests",level:2},{value:"Abort requests",id:"abort-requests",level:2},{value:"Modify responses",id:"modify-responses",level:2},{value:"WebSockets",id:"websockets",level:2},{value:"Missing Network Events and Service Workers",id:"missing-network-events-and-service-workers",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Playwright provides APIs to ",(0,r.jsx)(n.strong,{children:"monitor"})," and ",(0,r.jsx)(n.strong,{children:"modify"})," browser network traffic, both HTTP and HTTPS. Any requests that a page does, including ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",children:"XHRs"})," and ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"fetch"})," requests, can be tracked, modified and handled."]}),"\n",(0,r.jsx)(n.h2,{id:"mock-apis",children:"Mock APIs"}),"\n",(0,r.jsxs)(n.p,{children:["Check out our ",(0,r.jsx)(n.a,{href:"/python/docs/next/mock",children:"API mocking guide"})," to learn more on how to"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"mock API requests and never hit the API"}),"\n",(0,r.jsx)(n.li,{children:"perform the API request and modify the response"}),"\n",(0,r.jsx)(n.li,{children:"use HAR files to mock network requests."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"http-authentication",children:"HTTP Authentication"}),"\n",(0,r.jsx)(n.p,{children:"Perform HTTP Authentication."}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'context = browser.new_context(\n    http_credentials={"username": "bill", "password": "pa55w0rd"}\n)\npage = context.new_page()\npage.goto("https://example.com")\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'context = await browser.new_context(\n    http_credentials={"username": "bill", "password": "pa55w0rd"}\n)\npage = await context.new_page()\nawait page.goto("https://example.com")\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"http-proxy",children:"HTTP Proxy"}),"\n",(0,r.jsx)(n.p,{children:"You can configure pages to load over the HTTP(S) proxy or SOCKSv5. Proxy can be either set globally for the entire browser, or for each browser context individually."}),"\n",(0,r.jsx)(n.p,{children:"You can optionally specify username and password for HTTP(S) proxy, you can also specify hosts to bypass proxy for."}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of a global proxy:"}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'browser = chromium.launch(proxy={\n  "server": "http://myproxy.com:3128",\n  "username": "usr",\n  "password": "pwd"\n})\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'browser = await chromium.launch(proxy={\n  "server": "http://myproxy.com:3128",\n  "username": "usr",\n  "password": "pwd"\n})\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Its also possible to specify it per context:"}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'browser = chromium.launch()\ncontext = browser.new_context(proxy={"server": "http://myproxy.com:3128"})\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'browser = await chromium.launch()\ncontext = await browser.new_context(proxy={"server": "http://myproxy.com:3128"})\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"network-events",children:"Network events"}),"\n",(0,r.jsxs)(n.p,{children:["You can monitor all the ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-request",title:"Request",children:"Request"}),"s and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-response",title:"Response",children:"Response"}),"s:"]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'from playwright.sync_api import sync_playwright, Playwright\n\ndef run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = chromium.launch()\n    page = browser.new_page()\n    # Subscribe to "request" and "response" events.\n    page.on("request", lambda request: print(">>", request.method, request.url))\n    page.on("response", lambda response: print("<<", response.status, response.url))\n    page.goto("https://example.com")\n    browser.close()\n\nwith sync_playwright() as playwright:\n    run(playwright)\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\nasync def run(playwright: Playwright):\n    chromium = playwright.chromium\n    browser = await chromium.launch()\n    page = await browser.new_page()\n    # Subscribe to "request" and "response" events.\n    page.on("request", lambda request: print(">>", request.method, request.url))\n    page.on("response", lambda response: print("<<", response.status, response.url))\n    await page.goto("https://example.com")\n    await browser.close()\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Or wait for a network response after the button click with ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-wait-for-response",children:"page.expect_response()"}),":"]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Use a glob url pattern\nwith page.expect_response("**/api/fetch_data") as response_info:\n    page.get_by_text("Update").click()\nresponse = response_info.value\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Use a glob url pattern\nasync with page.expect_response("**/api/fetch_data") as response_info:\n    await page.get_by_text("Update").click()\nresponse = await response_info.value\n'})})})]}),"\n",(0,r.jsx)(n.h4,{id:"variations",children:"Variations"}),"\n",(0,r.jsxs)(n.p,{children:["Wait for ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-response",title:"Response",children:"Response"}),"s with ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-wait-for-response",children:"page.expect_response()"})]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Use a regular expression\nwith page.expect_response(re.compile(r"\\.jpeg$")) as response_info:\n    page.get_by_text("Update").click()\nresponse = response_info.value\n\n# Use a predicate taking a response object\nwith page.expect_response(lambda response: token in response.url) as response_info:\n    page.get_by_text("Update").click()\nresponse = response_info.value\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Use a regular expression\nasync with page.expect_response(re.compile(r"\\.jpeg$")) as response_info:\n    await page.get_by_text("Update").click()\nresponse = await response_info.value\n\n# Use a predicate taking a response object\nasync with page.expect_response(lambda response: token in response.url) as response_info:\n    await page.get_by_text("Update").click()\nresponse = await response_info.value\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"handle-requests",children:"Handle requests"}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'page.route(\n    "**/api/fetch_data",\n    lambda route: route.fulfill(status=200, body=test_data))\npage.goto("https://example.com")\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'await page.route(\n    "**/api/fetch_data",\n    lambda route: route.fulfill(status=200, body=test_data))\nawait page.goto("https://example.com")\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"You can mock API endpoints via handling the network requests in your Playwright script."}),"\n",(0,r.jsx)(n.h4,{id:"variations-1",children:"Variations"}),"\n",(0,r.jsxs)(n.p,{children:["Set up route on the entire browser context with ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-browsercontext#browser-context-route",children:"browser_context.route()"})," or page with ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"}),". It will apply to popup windows and opened links."]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'context.route(\n    "**/api/login",\n    lambda route: route.fulfill(status=200, body="accept"))\npage.goto("https://example.com")\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'await context.route(\n    "**/api/login",\n    lambda route: route.fulfill(status=200, body="accept"))\nawait page.goto("https://example.com")\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"modify-requests",children:"Modify requests"}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Delete header\ndef handle_route(route):\n    headers = route.request.headers\n    del headers["x-secret"]\n    route.continue_(headers=headers)\npage.route("**/*", handle_route)\n\n# Continue requests as POST.\npage.route("**/*", lambda route: route.continue_(method="POST"))\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'# Delete header\nasync def handle_route(route):\n    headers = route.request.headers\n    del headers["x-secret"]\n    await route.continue_(headers=headers)\nawait page.route("**/*", handle_route)\n\n# Continue requests as POST.\nawait page.route("**/*", lambda route: route.continue_(method="POST"))\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"You can continue requests with modifications. Example above removes an HTTP header from the outgoing requests."}),"\n",(0,r.jsx)(n.h2,{id:"abort-requests",children:"Abort requests"}),"\n",(0,r.jsxs)(n.p,{children:["You can abort requests using ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"})," and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-route#route-abort",children:"route.abort()"}),"."]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())\n\n# Abort based on the request type\npage.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'await page.route("**/*.{png,jpg,jpeg}", lambda route: route.abort())\n\n# Abort based on the request type\nawait page.route("**/*", lambda route: route.abort() if route.request.resource_type == "image"  else route.continue_())\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"modify-responses",children:"Modify responses"}),"\n",(0,r.jsxs)(n.p,{children:["To modify a response use ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-apirequestcontext",title:"APIRequestContext",children:"APIRequestContext"})," to get the original response and then pass the response to ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-route#route-fulfill",children:"route.fulfill()"}),". You can override individual fields on the response via options:"]}),"\n",(0,r.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'def handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = route.fetch()\n    # Add a prefix to the title.\n    body = response.text()\n    body = body.replace("<title>", "<title>My prefix:")\n    route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, "content-type": "text/html"},\n    )\n\npage.route("**/title.html", handle_route)\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'async def handle_route(route: Route) -> None:\n    # Fetch original response.\n    response = await route.fetch()\n    # Add a prefix to the title.\n    body = await response.text()\n    body = body.replace("<title>", "<title>My prefix:")\n    await route.fulfill(\n        # Pass all fields from the response.\n        response=response,\n        # Override response body.\n        body=body,\n        # Force content type to be html.\n        headers={**response.headers, "content-type": "text/html"},\n    )\n\nawait page.route("**/title.html", handle_route)\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"websockets",children:"WebSockets"}),"\n",(0,r.jsxs)(n.p,{children:["Playwright supports ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",children:"WebSockets"})," inspection out of the box. Every time a WebSocket is created, the ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-event-web-socket",children:'page.on("websocket")'})," event is fired. This event contains the ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-websocket",title:"WebSocket",children:"WebSocket"})," instance for further web socket frames inspection:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def on_web_socket(ws):\n    print(f"WebSocket opened: {ws.url}")\n    ws.on("framesent", lambda payload: print(payload))\n    ws.on("framereceived", lambda payload: print(payload))\n    ws.on("close", lambda payload: print("WebSocket closed"))\n\npage.on("websocket", on_web_socket)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"missing-network-events-and-service-workers",children:"Missing Network Events and Service Workers"}),"\n",(0,r.jsxs)(n.p,{children:["Playwright's built-in ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-browsercontext#browser-context-route",children:"browser_context.route()"})," and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"})," allow your tests to natively route requests and perform mocking and interception."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["If you're using Playwright's native ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-browsercontext#browser-context-route",children:"browser_context.route()"})," and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"}),", and it appears network events are missing, disable Service Workers by setting ",(0,r.jsx)(n.code,{children:"browser.new_context.service_workers"})," to ",(0,r.jsx)(n.code,{children:"'block'"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["It might be that you are using a mock tool such as Mock Service Worker (MSW). While this tool works out of the box for mocking responses, it adds its own Service Worker that takes over the network requests, hence making them invisible to ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-browsercontext#browser-context-route",children:"browser_context.route()"})," and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"}),". If you are interested in both network testing and mocking, consider using built-in ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-browsercontext#browser-context-route",children:"browser_context.route()"})," and ",(0,r.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-route",children:"page.route()"})," for ",(0,r.jsx)(n.a,{href:"#handle-requests",children:"response mocking"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If you're interested in not solely using Service Workers for testing and network mocking, but in routing and listening for requests made by Service Workers themselves, please see ",(0,r.jsx)(n.a,{href:"https://github.com/microsoft/playwright/issues/15684",children:"this experimental feature"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);