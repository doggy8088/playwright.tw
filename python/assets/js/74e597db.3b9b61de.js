"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9630],{2138:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>h,toc:()=>d});var a=s(4848),i=s(8453),t=s(4235),r=s(8328);s(3078);const l={id:"library",title:"Getting started - Library"},o=void 0,h={id:"library",title:"Getting started - Library",description:"Installation",source:"@site/docs/library.mdx",sourceDirName:".",slug:"/library",permalink:"/python/docs/next/library",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"library",title:"Getting started - Library"},sidebar:"docs",previous:{title:"Pytest Plugin Reference",permalink:"/python/docs/next/test-runners"},next:{title:"Release notes",permalink:"/python/docs/next/release-notes"}},c={},d=[{value:"Installation",id:"installation",level:2},{value:"Pip",id:"pip",level:3},{value:"Conda",id:"conda",level:3},{value:"Usage",id:"usage",level:2},{value:"First script",id:"first-script",level:2},{value:"Interactive mode (REPL)",id:"interactive-mode-repl",level:2},{value:"Pyinstaller",id:"pyinstaller",level:2},{value:"Known issues",id:"known-issues",level:2},{value:"<code>time.sleep()</code> leads to outdated state",id:"timesleep-leads-to-outdated-state",level:3},{value:"incompatible with <code>SelectorEventLoop</code> of <code>asyncio</code> on Windows",id:"incompatible-with-selectoreventloop-of-asyncio-on-windows",level:3},{value:"Threading",id:"threading",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.h3,{id:"pip",children:"Pip"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://pypi.python.org/pypi/playwright/",children:(0,a.jsx)(n.img,{src:"https://badge.fury.io/py/playwright.svg",alt:"PyPI version"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install --upgrade pip\npip install playwright\nplaywright install\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conda",children:"Conda"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://anaconda.org/Microsoft/playwright",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/conda/v/microsoft/playwright",alt:"Anaconda version"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"conda config --add channels conda-forge\nconda config --add channels microsoft\nconda install playwright\nplaywright install\n"})}),"\n",(0,a.jsxs)(n.p,{children:["These commands download the Playwright package and install browser binaries for Chromium, Firefox and WebKit. To modify this behavior see ",(0,a.jsx)(n.a,{href:"/python/docs/next/browsers#install-browsers",children:"installation parameters"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(n.p,{children:["Once installed, you can ",(0,a.jsx)(n.code,{children:"import"})," Playwright in a Python script, and launch any of the 3 browsers (",(0,a.jsx)(n.code,{children:"chromium"}),", ",(0,a.jsx)(n.code,{children:"firefox"})," and ",(0,a.jsx)(n.code,{children:"webkit"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'from playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto("http://playwright.dev")\n    print(page.title())\n    browser.close()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Playwright supports two variations of the API: synchronous and asynchronous. If your modern project uses ",(0,a.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:"asyncio"}),", you should use async API:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        browser = await p.chromium.launch()\n        page = await browser.new_page()\n        await page.goto("http://playwright.dev")\n        print(await page.title())\n        await browser.close()\n\nasyncio.run(main())\n'})}),"\n",(0,a.jsx)(n.h2,{id:"first-script",children:"First script"}),"\n",(0,a.jsxs)(n.p,{children:["In our first script, we will navigate to ",(0,a.jsx)(n.code,{children:"https://playwright.dev/"})," and take a screenshot in WebKit."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'from playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.webkit.launch()\n    page = browser.new_page()\n    page.goto("https://playwright.dev/")\n    page.screenshot(path="example.png")\n    browser.close()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["By default, Playwright runs the browsers in headless mode. To see the browser UI, pass the ",(0,a.jsx)(n.code,{children:"headless=False"})," flag while launching the browser. You can also use ",(0,a.jsx)(n.code,{children:"slow_mo"})," to slow down execution. Learn more in the debugging tools ",(0,a.jsx)(n.a,{href:"/python/docs/next/debug",children:"section"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:"firefox.launch(headless=False, slow_mo=50)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"interactive-mode-repl",children:"Interactive mode (REPL)"}),"\n",(0,a.jsx)(n.p,{children:"You can launch the interactive python REPL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python\n"})}),"\n",(0,a.jsx)(n.p,{children:"and then launch Playwright within it for quick experimentation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'from playwright.sync_api import sync_playwright\nplaywright = sync_playwright().start()\n# Use playwright.chromium, playwright.firefox or playwright.webkit\n# Pass headless=False to launch() to see the browser UI\nbrowser = playwright.chromium.launch()\npage = browser.new_page()\npage.goto("https://playwright.dev/")\npage.screenshot(path="example.png")\nbrowser.close()\nplaywright.stop()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Async REPL such as ",(0,a.jsx)(n.code,{children:"asyncio"})," REPL:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python -m asyncio\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",children:'from playwright.async_api import async_playwright\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch()\npage = await browser.new_page()\nawait page.goto("https://playwright.dev/")\nawait page.screenshot(path="example.png")\nawait browser.close()\nawait playwright.stop()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"pyinstaller",children:"Pyinstaller"}),"\n",(0,a.jsxs)(n.p,{children:["You can use Playwright with ",(0,a.jsx)(n.a,{href:"https://www.pyinstaller.org/",children:"Pyinstaller"})," to create standalone executables."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-py",metastring:'title="main.py"',children:'from playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto("https://playwright.dev/")\n    page.screenshot(path="example.png")\n    browser.close()\n'})}),"\n",(0,a.jsx)(n.p,{children:"If you want to bundle browsers with the executables:"}),"\n",(0,a.jsxs)(t.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,a.jsx)(r.A,{value:"bash",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"PLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium\npyinstaller -F main.py\n"})})}),(0,a.jsx)(r.A,{value:"powershell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-powershell",children:'$env:PLAYWRIGHT_BROWSERS_PATH="0"\nplaywright install chromium\npyinstaller -F main.py\n'})})}),(0,a.jsx)(r.A,{value:"batch",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-batch",children:"set PLAYWRIGHT_BROWSERS_PATH=0\nplaywright install chromium\npyinstaller -F main.py\n"})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Bundling the browsers with the executables will generate bigger binaries. It is recommended to only bundle the browsers you use."})}),"\n",(0,a.jsx)(n.h2,{id:"known-issues",children:"Known issues"}),"\n",(0,a.jsxs)(n.h3,{id:"timesleep-leads-to-outdated-state",children:[(0,a.jsx)(n.code,{children:"time.sleep()"})," leads to outdated state"]}),"\n",(0,a.jsxs)(n.p,{children:["Most likely you don't need to wait manually, since Playwright has ",(0,a.jsx)(n.a,{href:"/python/docs/next/actionability",children:"auto-waiting"}),". If you still rely on it, you should use ",(0,a.jsx)(n.code,{children:"page.wait_for_timeout(5000)"})," instead of ",(0,a.jsx)(n.code,{children:"time.sleep(5)"})," and it is better to not wait for a timeout at all, but sometimes it is useful for debugging. In these cases, use our wait (",(0,a.jsx)(n.code,{children:"wait_for_timeout"}),") method instead of the ",(0,a.jsx)(n.code,{children:"time"})," module. This is because we internally rely on asynchronous operations and when using ",(0,a.jsx)(n.code,{children:"time.sleep(5)"})," they can't get processed correctly."]}),"\n",(0,a.jsxs)(n.h3,{id:"incompatible-with-selectoreventloop-of-asyncio-on-windows",children:["incompatible with ",(0,a.jsx)(n.code,{children:"SelectorEventLoop"})," of ",(0,a.jsx)(n.code,{children:"asyncio"})," on Windows"]}),"\n",(0,a.jsxs)(n.p,{children:["Playwright runs the driver in a subprocess, so it requires ",(0,a.jsx)(n.code,{children:"ProactorEventLoop"})," of ",(0,a.jsx)(n.code,{children:"asyncio"})," on Windows because ",(0,a.jsx)(n.code,{children:"SelectorEventLoop"})," does not supports async subprocesses."]}),"\n",(0,a.jsxs)(n.p,{children:["On Windows Python 3.7, Playwright sets the default event loop to ",(0,a.jsx)(n.code,{children:"ProactorEventLoop"})," as it is default on Python 3.8+."]}),"\n",(0,a.jsx)(n.h3,{id:"threading",children:"Threading"}),"\n",(0,a.jsxs)(n.p,{children:["Playwright's API is not thread-safe. If you are using Playwright in a multi-threaded environment, you should create a playwright instance per thread. See ",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/playwright-python/issues/623",children:"threading issue"})," for more details."]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);