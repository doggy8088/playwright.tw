"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9566],{3664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>g});var r=n(4848),s=n(8453),i=n(4235),o=n(8328);n(3078);const l={id:"extensibility",title:"Extensibility"},c=void 0,a={id:"extensibility",title:"Extensibility",description:"Custom selector engines",source:"@site/docs/extensibility.mdx",sourceDirName:".",slug:"/extensibility",permalink:"/python/docs/next/extensibility",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"extensibility",title:"Extensibility"},sidebar:"docs",previous:{title:"Events",permalink:"/python/docs/next/events"},next:{title:"Frames",permalink:"/python/docs/next/frames"}},u={},g=[{value:"Custom selector engines",id:"custom-selector-engines",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"custom-selector-engines",children:"Custom selector engines"}),"\n",(0,r.jsxs)(t.p,{children:["Playwright supports custom selector engines, registered with ",(0,r.jsx)(t.a,{href:"/python/docs/next/api/class-selectors#selectors-register",children:"selectors.register()"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Selector engine should have the following properties:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"query"})," function to query first element matching ",(0,r.jsx)(t.code,{children:"selector"})," relative to the ",(0,r.jsx)(t.code,{children:"root"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"queryAll"})," function to query all elements matching ",(0,r.jsx)(t.code,{children:"selector"})," relative to the ",(0,r.jsx)(t.code,{children:"root"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["By default the engine is run directly in the frame's JavaScript context and, for example, can call an application-defined function. To isolate the engine from any JavaScript in the frame, but leave access to the DOM, register the engine with ",(0,r.jsx)(t.code,{children:"{contentScript: true}"})," option. Content script engine is safer because it is protected from any tampering with the global objects, for example altering ",(0,r.jsx)(t.code,{children:"Node.prototype"})," methods. All built-in selector engines run as content scripts. Note that running as a content script is not guaranteed when the engine is used together with other custom engines."]}),"\n",(0,r.jsx)(t.p,{children:"Selectors must be registered before creating the page."}),"\n",(0,r.jsx)(t.p,{children:"An example of registering selector engine that queries elements based on a tag name:"}),"\n",(0,r.jsxs)(i.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,r.jsx)(o.A,{value:"sync",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'tag_selector = """\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root\'s subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },\n\n      // Returns all elements matching given selector in the root\'s subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }"""\n\n# register the engine. selectors will be prefixed with "tag=".\nplaywright.selectors.register("tag", tag_selector)\n\n# now we can use "tag=" selectors.\nbutton = page.locator("tag=button")\nbutton.click()\n\n# we can combine it with built-in locators.\npage.locator("tag=div").get_by_text("click me").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = page.locator("tag=button").count()\n'})})}),(0,r.jsx)(o.A,{value:"async",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'tag_selector = """\n    // Must evaluate to a selector engine instance.\n    {\n      // Returns the first element matching given selector in the root\'s subtree.\n      query(root, selector) {\n        return root.querySelector(selector);\n      },\n\n      // Returns all elements matching given selector in the root\'s subtree.\n      queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n      }\n    }"""\n\n# register the engine. selectors will be prefixed with "tag=".\nawait playwright.selectors.register("tag", tag_selector)\n\n# now we can use "tag=" selectors.\nbutton = page.locator("tag=button")\nawait button.click()\n\n# we can combine it with built-in locators.\nawait page.locator("tag=div").get_by_text("click me").click()\n\n# we can use it in any methods supporting selectors.\nbutton_count = await page.locator("tag=button").count()\n'})})})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);