"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[1153],{2802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var o=t(4848),s=t(8453),a=t(4235),i=t(8328);t(3078);const r={id:"chrome-extensions",title:"Chrome extensions"},c=void 0,l={id:"chrome-extensions",title:"Chrome extensions",description:"Introduction",source:"@site/docs/chrome-extensions.mdx",sourceDirName:".",slug:"/chrome-extensions",permalink:"/python/docs/next/chrome-extensions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"chrome-extensions",title:"Chrome extensions"},sidebar:"docs",previous:{title:"Browsers",permalink:"/python/docs/next/browsers"},next:{title:"Clock",permalink:"/python/docs/next/clock"}},d={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Testing",id:"testing",level:2},{value:"Headless mode",id:"headless-mode",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality."})}),"\n",(0,o.jsxs)(n.p,{children:["The following is code for getting a handle to the ",(0,o.jsx)(n.a,{href:"https://developer.chrome.com/extensions/background_pages",children:"background page"})," of a ",(0,o.jsx)(n.a,{href:"https://developer.chrome.com/docs/extensions/mv2/",children:"Manifest v2"})," extension whose source is located in ",(0,o.jsx)(n.code,{children:"./my-extension"}),":"]}),"\n",(0,o.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,o.jsx)(i.A,{value:"sync",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:'from playwright.sync_api import sync_playwright, Playwright\n\npath_to_extension = "./my-extension"\nuser_data_dir = "/tmp/test-user-data-dir"\n\n\ndef run(playwright: Playwright):\n    context = playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        headless=False,\n        args=[\n            f"--disable-extensions-except={path_to_extension}",\n            f"--load-extension={path_to_extension}",\n        ],\n    )\n    if len(context.background_pages) == 0:\n        background_page = context.wait_for_event(\'backgroundpage\')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    context.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n'})})}),(0,o.jsx)(i.A,{value:"async",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom playwright.async_api import async_playwright, Playwright\n\npath_to_extension = "./my-extension"\nuser_data_dir = "/tmp/test-user-data-dir"\n\n\nasync def run(playwright: Playwright):\n    context = await playwright.chromium.launch_persistent_context(\n        user_data_dir,\n        headless=False,\n        args=[\n            f"--disable-extensions-except={path_to_extension}",\n            f"--load-extension={path_to_extension}",\n        ],\n    )\n\n    if len(context.background_pages) == 0:\n        background_page = await context.wait_for_event(\'backgroundpage\')\n    else:\n        background_page = context.background_pages[0]\n\n    # Test the background page as you would any other page.\n    await context.close()\n\n\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\n\n\nasyncio.run(main())\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.p,{children:"To have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it to load and test the popup page for example."}),"\n",(0,o.jsx)(n.p,{children:"First, add fixtures that will load the extension:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="conftest.py"',children:'from typing import Generator\nfrom pathlib import Path\nfrom playwright.sync_api import Playwright, BrowserContext\nimport pytest\n\n\n@pytest.fixture()\ndef context(playwright: Playwright) -> Generator[BrowserContext, None, None]:\n    path_to_extension = Path(__file__).parent.joinpath("my-extension")\n    context = playwright.chromium.launch_persistent_context(\n        "",\n        headless=False,\n        args=[\n            f"--disable-extensions-except={path_to_extension}",\n            f"--load-extension={path_to_extension}",\n        ],\n    )\n    yield context\n    context.close()\n\n\n@pytest.fixture()\ndef extension_id(context) -> Generator[str, None, None]:\n    # for manifest v2:\n    # background = context.background_pages[0]\n    # if not background:\n    #     background = context.wait_for_event("backgroundpage")\n\n    # for manifest v3:\n    background = context.service_workers[0]\n    if not background:\n        background = context.wait_for_event("serviceworker")\n\n    extension_id = background.url.split("/")[2]\n    yield extension_id\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then use these fixtures in a test:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="test_foo.py"',children:'from playwright.sync_api import expect, Page\n\n\ndef test_example_test(page: Page) -> None:\n    page.goto("https://example.com")\n    expect(page.locator("body")).to_contain_text("Changed by my-extension")\n\n\ndef test_popup_page(page: Page, extension_id: str) -> None:\n    page.goto(f"chrome-extension://{extension_id}/popup.html")\n    expect(page.locator("body")).to_have_text("my-extension popup")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"headless-mode",children:"Headless mode"}),"\n",(0,o.jsx)(n.admonition,{type:"danger",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"headless=new"})," mode is not officially supported by Playwright and might result in unexpected behavior."]})}),"\n",(0,o.jsx)(n.p,{children:"By default, Chrome's headless mode in Playwright does not support Chrome extensions. To overcome this limitation, you can run Chrome's persistent context with a new headless mode by using the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="conftest.py"',children:'path_to_extension = Path(__file__).parent.joinpath("my-extension")\ncontext = playwright.chromium.launch_persistent_context(\n    "",\n    headless=False,\n    args=[\n        "--headless=new",\n        f"--disable-extensions-except={path_to_extension}",\n        f"--load-extension={path_to_extension}",\n    ],\n)\n'})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);