"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2910],{5453:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=n(4848),r=n(8453);n(4235),n(8328),n(3078);const i={id:"test-runners",title:"Pytest Plugin Reference"},o=void 0,l={id:"test-runners",title:"Pytest Plugin Reference",description:"Introduction",source:"@site/docs/test-runners.mdx",sourceDirName:".",slug:"/test-runners",permalink:"/python/docs/next/test-runners",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"test-runners",title:"Pytest Plugin Reference"},sidebar:"docs",previous:{title:"Setting up CI",permalink:"/python/docs/next/ci-intro"},next:{title:"Getting started - Library",permalink:"/python/docs/next/library"}},c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Usage",id:"usage",level:2},{value:"CLI arguments",id:"cli-arguments",level:2},{value:"Fixtures",id:"fixtures",level:2},{value:"Parallelism: Running Multiple Tests at Once",id:"parallelism-running-multiple-tests-at-once",level:2},{value:"Examples",id:"examples",level:2},{value:"Configure Mypy typings for auto-completion",id:"configure-mypy-typings-for-auto-completion",level:3},{value:"Configure slow mo",id:"configure-slow-mo",level:3},{value:"Skip test by browser",id:"skip-test-by-browser",level:3},{value:"Run on a specific browser",id:"run-on-a-specific-browser",level:3},{value:"Run with a custom browser channel like Google Chrome or Microsoft Edge",id:"run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge",level:3},{value:"Configure base-url",id:"configure-base-url",level:3},{value:"Ignore HTTPS errors",id:"ignore-https-errors",level:3},{value:"Use custom viewport size",id:"use-custom-viewport-size",level:3},{value:"Device emulation",id:"device-emulation",level:3},{value:"Using with <code>unittest.TestCase</code>",id:"using-with-unittesttestcase",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Use with pdb",id:"use-with-pdb",level:3},{value:"Deploy to CI",id:"deploy-to-ci",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(s.p,{children:["Playwright provides a ",(0,t.jsx)(s.a,{href:"https://docs.pytest.org/en/stable/",children:"Pytest"})," plugin to write end-to-end tests. To get started with it, refer to the ",(0,t.jsx)(s.a,{href:"/python/docs/next/intro",children:"getting started guide"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(s.p,{children:["To run your tests, use ",(0,t.jsx)(s.a,{href:"https://docs.pytest.org/en/stable/",children:"Pytest"})," CLI."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --browser webkit --headed\n"})}),"\n",(0,t.jsxs)(s.p,{children:["If you want to add the CLI arguments automatically without specifying them, you can use the ",(0,t.jsx)(s.a,{href:"https://docs.pytest.org/en/stable/reference.html#ini-options-ref",children:"pytest.ini"})," file:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ini",children:"# content of pytest.ini\n[pytest]\n# Run firefox with UI\naddopts = --headed --browser firefox\n"})}),"\n",(0,t.jsx)(s.h2,{id:"cli-arguments",children:"CLI arguments"}),"\n",(0,t.jsxs)(s.p,{children:["Note that CLI arguments are only applied to the default ",(0,t.jsx)(s.code,{children:"browser"}),", ",(0,t.jsx)(s.code,{children:"context"})," and ",(0,t.jsx)(s.code,{children:"page"})," fixtures. If you create a browser, a context or a page with the API call like ",(0,t.jsx)(s.a,{href:"/python/docs/next/api/class-browser#browser-new-context",children:"browser.new_context()"}),", the CLI arguments are not applied."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--headed"}),": Run tests in headed mode (default: headless)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--browser"}),": Run tests in a different browser ",(0,t.jsx)(s.code,{children:"chromium"}),", ",(0,t.jsx)(s.code,{children:"firefox"}),", or ",(0,t.jsx)(s.code,{children:"webkit"}),". It can be specified multiple times (default: ",(0,t.jsx)(s.code,{children:"chromium"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--browser-channel"})," ",(0,t.jsx)(s.a,{href:"/python/docs/next/browsers",children:"Browser channel"})," to be used."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--slowmo"})," Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on (default: 0)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--device"})," ",(0,t.jsx)(s.a,{href:"/python/docs/next/emulation",children:"Device"})," to be emulated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--output"})," Directory for artifacts produced by tests (default: ",(0,t.jsx)(s.code,{children:"test-results"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--tracing"})," Whether to record a ",(0,t.jsx)(s.a,{href:"/python/docs/next/trace-viewer",children:"trace"})," for each test. ",(0,t.jsx)(s.code,{children:"on"}),", ",(0,t.jsx)(s.code,{children:"off"}),", or ",(0,t.jsx)(s.code,{children:"retain-on-failure"})," (default: ",(0,t.jsx)(s.code,{children:"off"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--video"})," Whether to record video for each test. ",(0,t.jsx)(s.code,{children:"on"}),", ",(0,t.jsx)(s.code,{children:"off"}),", or ",(0,t.jsx)(s.code,{children:"retain-on-failure"})," (default: ",(0,t.jsx)(s.code,{children:"off"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--screenshot"})," Whether to automatically capture a screenshot after each test. ",(0,t.jsx)(s.code,{children:"on"}),", ",(0,t.jsx)(s.code,{children:"off"}),", or ",(0,t.jsx)(s.code,{children:"only-on-failure"})," (default: ",(0,t.jsx)(s.code,{children:"off"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--full-page-screenshot"})," Whether to take a full page screenshot on failure. By default, only the viewport is captured. Requires ",(0,t.jsx)(s.code,{children:"--screenshot"})," to be enabled (default: ",(0,t.jsx)(s.code,{children:"off"}),")."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"fixtures",children:"Fixtures"}),"\n",(0,t.jsxs)(s.p,{children:["This plugin configures Playwright-specific ",(0,t.jsx)(s.a,{href:"https://docs.pytest.org/en/latest/fixture.html",children:"fixtures for pytest"}),". To use these fixtures, use the fixture name as an argument to the test function."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",children:"def test_my_app_is_working(fixture_name):\n    pass\n    # Test using fixture_name\n    # ...\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Function scope"}),": These fixtures are created when requested in a test function and destroyed when the test ends."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"context"}),": New ",(0,t.jsx)(s.a,{href:"./browser-contexts",children:"browser context"})," for a test."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"page"}),": New ",(0,t.jsx)(s.a,{href:"./pages",children:"browser page"})," for a test."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"new_context"}),": Allows creating different ",(0,t.jsx)(s.a,{href:"./browser-contexts",children:"browser contexts"})," for a test. Useful for multi-user scenarios. Accepts the same parameters as ",(0,t.jsx)(s.a,{href:"/python/docs/next/api/class-browser#browser-new-context",children:"browser.new_context()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session scope"}),": These fixtures are created when requested in a test function and destroyed when all tests end."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"playwright"}),": ",(0,t.jsx)(s.a,{href:"./api/class-playwright",children:"Playwright"})," instance."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser_type"}),": ",(0,t.jsx)(s.a,{href:"./api/class-browsertype",children:"BrowserType"})," instance of the current browser."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser"}),": ",(0,t.jsx)(s.a,{href:"./api/class-browser",children:"Browser"})," instance launched by Playwright."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser_name"}),": Browser name as string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser_channel"}),": Browser channel as string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"is_chromium"}),", ",(0,t.jsx)(s.code,{children:"is_webkit"}),", ",(0,t.jsx)(s.code,{children:"is_firefox"}),": Booleans for the respective browser types."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Customizing fixture options"}),": For ",(0,t.jsx)(s.code,{children:"browser"})," and ",(0,t.jsx)(s.code,{children:"context"})," fixtures, use the following fixtures to define custom launch options."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser_type_launch_args"}),": Override launch arguments for ",(0,t.jsx)(s.a,{href:"/python/docs/next/api/class-browsertype#browser-type-launch",children:"browser_type.launch()"}),". It should return a Dict."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"browser_context_args"}),": Override the options for ",(0,t.jsx)(s.a,{href:"/python/docs/next/api/class-browser#browser-new-context",children:"browser.new_context()"}),". It should return a Dict."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Its also possible to override the context options (",(0,t.jsx)(s.a,{href:"/python/docs/next/api/class-browser#browser-new-context",children:"browser.new_context()"}),") for a single test by using the ",(0,t.jsx)(s.code,{children:"browser_context_args"})," marker:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'import pytest\n\n@pytest.mark.browser_context_args(timezone_id="Europe/Berlin", locale="en-GB")\ndef test_browser_context_args(page):\n    assert page.evaluate("window.navigator.userAgent") == "Europe/Berlin"\n    assert page.evaluate("window.navigator.languages") == ["de-DE"]\n'})}),"\n",(0,t.jsx)(s.h2,{id:"parallelism-running-multiple-tests-at-once",children:"Parallelism: Running Multiple Tests at Once"}),"\n",(0,t.jsxs)(s.p,{children:["If your tests are running on a machine with a lot of CPUs, you can speed up the overall execution time of your test suite by using ",(0,t.jsx)(s.a,{href:"https://pypi.org/project/pytest-xdist/",children:(0,t.jsx)(s.code,{children:"pytest-xdist"})})," to run multiple tests at once:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"# install dependency\npip install pytest-xdist\n# use the --numprocesses flag\npytest --numprocesses auto\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Depending on the hardware and nature of your tests, you can set ",(0,t.jsx)(s.code,{children:"numprocesses"})," to be anywhere from ",(0,t.jsx)(s.code,{children:"2"})," to the number of CPUs on the machine. If set too high, you may notice unexpected behavior."]}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.a,{href:"/python/docs/next/running-tests",children:"Running Tests"})," for general information on ",(0,t.jsx)(s.code,{children:"pytest"})," options."]}),"\n",(0,t.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(s.h3,{id:"configure-mypy-typings-for-auto-completion",children:"Configure Mypy typings for auto-completion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="test_my_application.py"',children:'from playwright.sync_api import Page\n\ndef test_visit_admin_dashboard(page: Page):\n    page.goto("/admin")\n    # ...\n'})}),"\n",(0,t.jsx)(s.h3,{id:"configure-slow-mo",children:"Configure slow mo"}),"\n",(0,t.jsxs)(s.p,{children:["Run tests with slow mo with the ",(0,t.jsx)(s.code,{children:"--slowmo"})," argument."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --slowmo 100\n"})}),"\n",(0,t.jsx)(s.p,{children:"Slows down Playwright operations by 100 milliseconds."}),"\n",(0,t.jsx)(s.h3,{id:"skip-test-by-browser",children:"Skip test by browser"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="test_my_application.py"',children:'import pytest\n\n@pytest.mark.skip_browser("firefox")\ndef test_visit_example(page):\n    page.goto("https://example.com")\n    # ...\n'})}),"\n",(0,t.jsx)(s.h3,{id:"run-on-a-specific-browser",children:"Run on a specific browser"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="conftest.py"',children:'import pytest\n\n@pytest.mark.only_browser("chromium")\ndef test_visit_example(page):\n    page.goto("https://example.com")\n    # ...\n'})}),"\n",(0,t.jsx)(s.h3,{id:"run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge",children:"Run with a custom browser channel like Google Chrome or Microsoft Edge"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --browser-channel chrome\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",metastring:'title="test_my_application.py"',children:'def test_example(page):\n    page.goto("https://example.com")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"configure-base-url",children:"Configure base-url"}),"\n",(0,t.jsxs)(s.p,{children:["Start Pytest with the ",(0,t.jsx)(s.code,{children:"base-url"})," argument. The ",(0,t.jsx)(s.a,{href:"https://github.com/pytest-dev/pytest-base-url",children:(0,t.jsx)(s.code,{children:"pytest-base-url"})})," plugin is used for that which allows you to set the base url from the config, CLI arg or as a fixture."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --base-url http://localhost:8080\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="test_my_application.py"',children:'def test_visit_example(page):\n    page.goto("/admin")\n    # -> Will result in http://localhost:8080/admin\n'})}),"\n",(0,t.jsx)(s.h3,{id:"ignore-https-errors",children:"Ignore HTTPS errors"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="conftest.py"',children:'import pytest\n\n@pytest.fixture(scope="session")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        "ignore_https_errors": True\n    }\n'})}),"\n",(0,t.jsx)(s.h3,{id:"use-custom-viewport-size",children:"Use custom viewport size"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="conftest.py"',children:'import pytest\n\n@pytest.fixture(scope="session")\ndef browser_context_args(browser_context_args):\n    return {\n        **browser_context_args,\n        "viewport": {\n            "width": 1920,\n            "height": 1080,\n        }\n    }\n'})}),"\n",(0,t.jsx)(s.h3,{id:"device-emulation",children:"Device emulation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",metastring:'title="conftest.py"',children:"import pytest\n\n@pytest.fixture(scope=\"session\")\ndef browser_context_args(browser_context_args, playwright):\n    iphone_11 = playwright.devices['iPhone 11 Pro']\n    return {\n        **browser_context_args,\n        **iphone_11,\n    }\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Or via the CLI ",(0,t.jsx)(s.code,{children:'--device="iPhone 11 Pro"'})]}),"\n",(0,t.jsxs)(s.h3,{id:"using-with-unittesttestcase",children:["Using with ",(0,t.jsx)(s.code,{children:"unittest.TestCase"})]}),"\n",(0,t.jsxs)(s.p,{children:["See the following example for using it with ",(0,t.jsx)(s.code,{children:"unittest.TestCase"}),". This has a limitation, that only a single browser can be specified and no matrix of multiple browsers gets generated when specifying multiple."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",children:'import pytest\nimport unittest\n\nfrom playwright.sync_api import Page\n\n\nclass MyTest(unittest.TestCase):\n    @pytest.fixture(autouse=True)\n    def setup(self, page: Page):\n        self.page = page\n\n    def test_foobar(self):\n        self.page.goto("https://microsoft.com")\n        self.page.locator("#foobar").click()\n        assert self.page.evaluate("1 + 1") == 2\n'})}),"\n",(0,t.jsx)(s.h2,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsx)(s.h3,{id:"use-with-pdb",children:"Use with pdb"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"breakpoint()"})," statement in your test code to pause execution and get a ",(0,t.jsx)(s.a,{href:"https://docs.python.org/3/library/pdb.html",children:"pdb"})," REPL."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-py",children:'def test_bing_is_working(page):\n    page.goto("https://bing.com")\n    breakpoint()\n    # ...\n'})}),"\n",(0,t.jsx)(s.h2,{id:"deploy-to-ci",children:"Deploy to CI"}),"\n",(0,t.jsxs)(s.p,{children:["See the ",(0,t.jsx)(s.a,{href:"/python/docs/next/ci",children:"guides for CI providers"})," to deploy your tests to CI/CD."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);