"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2794],{7928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var s=t(4848),i=t(8453),a=t(4235),r=t(8328);t(3078);const l={id:"events",title:"Events"},o=void 0,p={id:"events",title:"Events",description:"Introduction",source:"@site/docs/events.mdx",sourceDirName:".",slug:"/events",permalink:"/python/docs/next/events",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"events",title:"Events"},sidebar:"docs",previous:{title:"Evaluating JavaScript",permalink:"/python/docs/next/evaluating"},next:{title:"Extensibility",permalink:"/python/docs/next/extensibility"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Waiting for event",id:"waiting-for-event",level:2},{value:"Adding/removing event listener",id:"addingremoving-event-listener",level:2},{value:"Adding one-off listeners",id:"adding-one-off-listeners",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events, such as waiting for events or adding or removing event listeners."}),"\n",(0,s.jsx)(n.h2,{id:"waiting-for-event",children:"Waiting for event"}),"\n",(0,s.jsx)(n.p,{children:"Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns."}),"\n",(0,s.jsxs)(n.p,{children:["Wait for a request with the specified url using ",(0,s.jsx)(n.a,{href:"/python/docs/next/api/class-page#page-wait-for-request",children:"page.expect_request()"}),":"]}),"\n",(0,s.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,s.jsx)(r.A,{value:"sync",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'with page.expect_request("**/*logo*.png") as first:\n  page.goto("https://wikipedia.org")\nprint(first.value.url)\n'})})}),(0,s.jsx)(r.A,{value:"async",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'async with page.expect_request("**/*logo*.png") as first:\n  await page.goto("https://wikipedia.org")\nfirst_request = await first.value\nprint(first_request.url)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Wait for popup window:"}),"\n",(0,s.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,s.jsx)(r.A,{value:"sync",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'with page.expect_popup() as popup:\n  page.get_by_text("open the popup").click()\npopup.value.goto("https://wikipedia.org")\n'})})}),(0,s.jsx)(r.A,{value:"async",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'async with page.expect_popup() as popup:\n  await page.get_by_text("open the popup").click()\nchild_page = await popup.value\nawait child_page.goto("https://wikipedia.org")\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"addingremoving-event-listener",children:"Adding/removing event listener"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:"}),"\n",(0,s.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,s.jsx)(r.A,{value:"sync",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'def print_request_sent(request):\n  print("Request sent: " + request.url)\n\ndef print_request_finished(request):\n  print("Request finished: " + request.url)\n\npage.on("request", print_request_sent)\npage.on("requestfinished", print_request_finished)\npage.goto("https://wikipedia.org")\n\npage.remove_listener("requestfinished", print_request_finished)\npage.goto("https://www.openstreetmap.org/")\n'})})}),(0,s.jsx)(r.A,{value:"async",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'def print_request_sent(request):\n  print("Request sent: " + request.url)\n\ndef print_request_finished(request):\n  print("Request finished: " + request.url)\n\npage.on("request", print_request_sent)\npage.on("requestfinished", print_request_finished)\nawait page.goto("https://wikipedia.org")\n\npage.remove_listener("requestfinished", print_request_finished)\nawait page.goto("https://www.openstreetmap.org/")\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"adding-one-off-listeners",children:"Adding one-off listeners"}),"\n",(0,s.jsx)(n.p,{children:"If a certain event needs to be handled once, there is a convenience API for that:"}),"\n",(0,s.jsxs)(a.A,{groupId:"python-flavor",defaultValue:"sync",values:[{label:"Sync",value:"sync"},{label:"Async",value:"async"}],children:[(0,s.jsx)(r.A,{value:"sync",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'page.once("dialog", lambda dialog: dialog.accept("2021"))\npage.evaluate("prompt(\'Enter a number:\')")\n'})})}),(0,s.jsx)(r.A,{value:"async",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'page.once("dialog", lambda dialog: dialog.accept("2021"))\nawait page.evaluate("prompt(\'Enter a number:\')")\n'})})})]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);