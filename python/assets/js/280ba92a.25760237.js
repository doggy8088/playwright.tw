"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[4518],{9606:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>h,toc:()=>c});var t=n(4848),l=n(8453),r=n(4235),o=n(8328);n(3078);const i={id:"running-tests",title:"Running and debugging tests"},a=void 0,h={id:"running-tests",title:"Running and debugging tests",description:"Introduction",source:"@site/docs/running-tests.mdx",sourceDirName:".",slug:"/running-tests",permalink:"/python/docs/next/running-tests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"running-tests",title:"Running and debugging tests"},sidebar:"docs",previous:{title:"Generating tests",permalink:"/python/docs/next/codegen-intro"},next:{title:"Trace viewer",permalink:"/python/docs/next/trace-viewer-intro"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Command Line",id:"command-line",level:3},{value:"Run tests in headed mode",id:"run-tests-in-headed-mode",level:3},{value:"Run tests on different browsers",id:"run-tests-on-different-browsers",level:3},{value:"Run specific tests",id:"run-specific-tests",level:3},{value:"Run tests in parallel",id:"run-tests-in-parallel",level:3},{value:"Debugging tests",id:"debugging-tests",level:2},{value:"What&#39;s next",id:"whats-next",level:2}];function u(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(s.p,{children:["You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers by using the ",(0,t.jsx)(s.code,{children:"--browser"})," flag. By default, tests are run in a headless manner, meaning no browser window will be opened while running the tests and results will be seen in the terminal. If you prefer, you can run your tests in headed mode by using the ",(0,t.jsx)(s.code,{children:"--headed"})," CLI argument."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"You will learn"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/python/docs/next/running-tests#command-line",children:"How to run tests from the command line"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/python/docs/next/running-tests#debugging-tests",children:"How to debug tests"})}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"running-tests",children:"Running tests"}),"\n",(0,t.jsx)(s.h3,{id:"command-line",children:"Command Line"}),"\n",(0,t.jsxs)(s.p,{children:["To run your tests, use the ",(0,t.jsx)(s.code,{children:"pytest"})," command. This will run your tests on the Chromium browser by default. Tests run in headless mode by default meaning no browser window will be opened while running the tests and results will be seen in the terminal."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest\n"})}),"\n",(0,t.jsx)(s.h3,{id:"run-tests-in-headed-mode",children:"Run tests in headed mode"}),"\n",(0,t.jsxs)(s.p,{children:["To run your tests in headed mode, use the ",(0,t.jsx)(s.code,{children:"--headed"})," flag. This will open up a browser window while running your tests and once finished the browser window will close."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --headed\n"})}),"\n",(0,t.jsx)(s.h3,{id:"run-tests-on-different-browsers",children:"Run tests on different browsers"}),"\n",(0,t.jsxs)(s.p,{children:["To specify which browser you would like to run your tests on, use the ",(0,t.jsx)(s.code,{children:"--browser"})," flag followed by the name of the browser."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --browser webkit\n"})}),"\n",(0,t.jsxs)(s.p,{children:["To specify multiple browsers to run your tests on, use the ",(0,t.jsx)(s.code,{children:"--browser"})," flag multiple times followed by the name of each browser."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --browser webkit --browser firefox\n"})}),"\n",(0,t.jsx)(s.h3,{id:"run-specific-tests",children:"Run specific tests"}),"\n",(0,t.jsx)(s.p,{children:"To run a single test file, pass in the name of the test file that you want to run."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest test_login.py\n"})}),"\n",(0,t.jsx)(s.p,{children:"To run a set of test files, pass in the names of the test files that you want to run."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest tests/test_todo_page.py tests/test_landing_page.py\n"})}),"\n",(0,t.jsx)(s.p,{children:"To run a specific test, pass in the function name of the test you want to run."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest -k test_add_a_todo_item\n"})}),"\n",(0,t.jsx)(s.h3,{id:"run-tests-in-parallel",children:"Run tests in parallel"}),"\n",(0,t.jsxs)(s.p,{children:["To run your tests in parallel, use the ",(0,t.jsx)(s.code,{children:"--numprocesses"})," flag followed by the number of processes you would like to run your tests on. We recommend half of logical CPU cores."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"pytest --numprocesses 2\n"})}),"\n",(0,t.jsxs)(s.p,{children:["(This assumes ",(0,t.jsx)(s.code,{children:"pytest-xdist"})," is installed. For more information see ",(0,t.jsx)(s.a,{href:"/python/docs/next/test-runners#parallelism-running-multiple-tests-at-once",children:"here"}),".)"]}),"\n",(0,t.jsxs)(s.p,{children:["For more information, see ",(0,t.jsx)(s.a,{href:"/python/docs/next/test-runners",children:"Playwright Pytest usage"})," or the Pytest documentation for ",(0,t.jsx)(s.a,{href:"https://docs.pytest.org/en/stable/usage.html",children:"general CLI usage"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"debugging-tests",children:"Debugging tests"}),"\n",(0,t.jsxs)(s.p,{children:["Since Playwright runs in Python, you can debug it with your debugger of choice, e.g., with the ",(0,t.jsx)(s.a,{href:"https://code.visualstudio.com/docs/python/python-tutorial",children:"Python extension"})," in Visual Studio Code. Playwright comes with the Playwright Inspector which allows you to step through Playwright API calls, see their debug logs and explore ",(0,t.jsx)(s.a,{href:"/python/docs/next/locators",children:"locators"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"To debug all tests, run the following command."}),"\n",(0,t.jsxs)(r.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,t.jsx)(o.A,{value:"bash",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"PWDEBUG=1 pytest -s\n"})})}),(0,t.jsx)(o.A,{value:"powershell",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-powershell",children:"$env:PWDEBUG=1\npytest -s\n"})})}),(0,t.jsx)(o.A,{value:"batch",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-batch",children:"set PWDEBUG=1\npytest -s\n"})})})]}),"\n",(0,t.jsx)(s.p,{children:"To debug one test file, run the command followed by the name of the test file that you want to debug."}),"\n",(0,t.jsxs)(r.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,t.jsx)(o.A,{value:"bash",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"PWDEBUG=1 pytest -s test_example.py\n"})})}),(0,t.jsx)(o.A,{value:"powershell",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-powershell",children:"$env:PWDEBUG=1\npytest -s test_example.py\n"})})}),(0,t.jsx)(o.A,{value:"batch",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-batch",children:"set PWDEBUG=1\npytest -s test_example.py\n"})})})]}),"\n",(0,t.jsxs)(s.p,{children:["To debug a specific test, add ",(0,t.jsx)(s.code,{children:"-k"})," followed by the name of the test that you want to debug."]}),"\n",(0,t.jsxs)(r.A,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],children:[(0,t.jsx)(o.A,{value:"bash",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"PWDEBUG=1 pytest -s -k test_get_started_link\n"})})}),(0,t.jsx)(o.A,{value:"powershell",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-powershell",children:"$env:PWDEBUG=1\npytest -s -k test_get_started_link\n"})})}),(0,t.jsx)(o.A,{value:"batch",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-batch",children:"set PWDEBUG=1\npytest -s -k test_get_started_link\n"})})})]}),"\n",(0,t.jsx)(s.p,{children:"This command will open up a Browser window as well as the Playwright Inspector. You can use the step over button at the top of the inspector to step through your test. Or press the play button to run your test from start to finish. Once the test has finished, the browser window will close."}),"\n",(0,t.jsx)(s.p,{children:"While debugging you can use the Pick Locator button to select an element on the page and see the locator that Playwright would use to find that element. You can also edit the locator and see it highlighting live on the Browser window. Use the Copy Locator button to copy the locator to your clipboard and then paste it into your test."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:"https://github.com/microsoft/playwright/assets/13063165/c94c89c8-f945-460c-a653-7809c6ca50ee",alt:"Playwright Inspector"})}),"\n",(0,t.jsxs)(s.p,{children:["Check out our ",(0,t.jsx)(s.a,{href:"/python/docs/next/debug",children:"debugging guide"})," to learn more about the ",(0,t.jsx)(s.a,{href:"/python/docs/next/debug#playwright-inspector",children:"Playwright Inspector"})," as well as debugging with ",(0,t.jsx)(s.a,{href:"/python/docs/next/debug#browser-developer-tools",children:"Browser Developer tools"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"whats-next",children:"What's next"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/python/docs/next/codegen",children:"Generate tests with Codegen"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/python/docs/next/trace-viewer-intro",children:"See a trace of your tests"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/python/docs/next/ci-intro",children:"Run your tests on CI with GitHub Actions"})}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);